label,Issue_KEY,Commit_SHA,Issue_Text,Commit_Text,Commit_Code
0,LOG4NET-259,ca41de816d183c517c287b4743073f6f4feb3bc6,"Log4Net does not create a new tab in Chainsaw I believe the problem is in XmlLayoutSchemaLog4j, and that you need to change ""log4japp"" to ""application"".

According to the Chainsaw tutorial:
Chainsaw automatically looks inside each received LoggingEvent for a special Application property to determine which tab to route an event to. If it cannot find this property, it attempts to use a secondary property usually added via the SocketAppender or SocketHubAppender which identify the remote host of these events. If neither of these are found, Chainsaw routes events to a default ""Unknown"" tab.

Logging events generated internally by chainsaw include the following properties:
<log4j:properties>
    <log4j:data name=""application"" value=""Generator 1""/>
    <log4j:data name=""hostname"" value=""localhost""/>
    <log4j:data name=""log4jid"" value=""2""/>
    <log4j:data name=""some string"" value=""some valueGenerator 1""/>
</log4j:properties>

Logging events generated by XmlLayoutSchemaLog4j include the following properties:
<log4j:properties>
    <log4j:data name=""log4net:UserName"" value=""DOMAIN\username""/>
    <log4j:data name=""log4jid"" value=""281""/>
    <log4j:data name=""log4jmachinename"" value=""machineName""/>
    <log4j:data name=""log4net:HostName"" value=""machineName""/>
    <log4j:data name=""log4japp"" value=""Application.exe""/>
</log4j:properties>

See also: http://www.mail-archive.com/log4j-dev@jakarta.apache.org/msg05361.html

UPDATE: Documentation issue. See comments below.",LOG4NET-335 fix InternalConfigureAndWatch to allow exactly one watch handler for every config file instead of one watch handler for every repository, MODIFY XmlConfigurator.csXmlConfigurator InternalConfigureAndWatch
0,LOG4NET-215,fc878ee7e72a20432534f7670c4549739170287b,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Allow EventLog category to be specified via the LoggingEvent's properties or a configured value.  Based on patch by Ron Grabowsky.  LOG4NET-38, MODIFY EventLogAppender.csEventLogAppender Append MODIFY SystemInfo.csSystemInfo TryParse
1,LOG4NET-354,12a0c7397eb19eafbbcdfa0a93b1ae03740ad212,"E-mail encoding configuration setting for SmtpAppender It would be nice if we could specify body transfer encoding and subject encoding in SmtpAppender (via configuration settings).
All unicode characters are rendered as question marks, because SmtpAppender uses the default settings:

Content-Type: text/plain;charset=""iso-8859-1""
Content-Transfer-Encoding: 7bit","LOG4NET-354 reverted changes from revision 1489736 since we do not want to change the public API

However, there should be an entry in the FAQ that explains the usage of LogManager.GetRepository().Configured
which still needs to be written.", MODIFY LogImpl.cs MODIFY ILog.cs
1,LOG4NET-215,451cce90f726c70f60f81848ff75413efb4e3e34,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",fix bounds-checks in NamedPatternConverter.  LOG4NET-215, MODIFY NamedPatternConverter.csNamedPatternConverter Convert MODIFY PatternLayoutTest.csPatternLayoutTest MessageAsNamePatternConverter GetFullyQualifiedName PatternLayoutTest NamedPatternConverterWithPrecision2ShouldStripLessLeadingStuffIfPresent PatternLayoutTest NamedPatternConverterWithoutPrecisionShouldReturnFullName PatternLayoutTest NamedPatternConverterWithPrecision1ShouldStripLeadingStuffIfPresent
1,LOG4NET-106,fcbb2b35201cfd167d3a5e2b0ea9a997b4f782a3,"TraceAppender : Add switch to disable using logger name as trace category TraceAppender now always put logger name as trace category when writing to System.Diagnostics.Trace.Write
ie. :
System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);

This resulted in logger's name appearing twice in Trace logs if once use/share the same conversion for both file-based and trace appenders, eg.
""%date [%thread] %-5level %logger - %message%""

It would be nice to have a settable property on TraceAppender to disable using logger's name as trace category, ie. :

public bool UseLoggerNameAsTraceCategory
{
get; set;
}

...
if (m_useLoggerNameAsTraceCategory)
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);
}
else
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), null);
}





",LOG4NET-106: Disambiguated cref due to newly added LayoutSkeleton.Format method, MODIFY PatternLayout.cs
1,LOG4NET-143,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-243,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-116,289a3f2a030c75e6fb0912f2c0c22021848d587c,"allow smtp to ssl authenticate and with certificates. It would be fantastic if more of the SMTP feature of .net 2.0 would be allowed such as 
SSL authentication and with certificates.",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
0,LOG4NET-76,d78a5f8331dad60de277fecda43205412ccb464a,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-232,ca41de816d183c517c287b4743073f6f4feb3bc6,"Use ReaderWriterLockSlim instead of ReaderWriterLock. ReaderWriterLock should be replaced with ReaderWriterLockSlim according to Microsoft for performance and simplification reasons.

MSDN: http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock.aspx

The .NET Framework has two reader-writer locks, ReaderWriterLockSlim and ReaderWriterLock. ReaderWriterLockSlim is recommended for all new development. ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlim avoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than ReaderWriterLock. ",LOG4NET-335 fix InternalConfigureAndWatch to allow exactly one watch handler for every config file instead of one watch handler for every repository, MODIFY XmlConfigurator.csXmlConfigurator InternalConfigureAndWatch
0,LOG4NET-132,bdd6cea2ed135071e286d8daaa03150bb19bf0ed,"Environment variables are mistakenly case sensitive on windows On windows, environment variables are meant to be case insensitive.  Because of this, in some contexts, a special IDictionary class that lowercases all the keys is used to manipulate environment variables, specifically ProcessStartInfo.EnvironmentVariables.

The upshot of this, for me, is that when running under the profiler I have, all the environment variables get lowercased, and my logging configuration is broken, because TEMP is now temp, and log4net is treating the environment variables in a case sensitive manner, from using Environment.GetEnvironmentVariables(), which creates a normal case sensitive Hashtable object.

It seems that, on windows, the result of Environment.GetEnvironmentVariables() should be copied into a StringDictionary to get proper case insensitive behavior.",Fix for LOG4NET-31. Allow additional properties to be passed to Converters configured via xml. Moved Hierarchy.PropertyEntry into its own class. Moved PatternString.ConverterInfo into its own class., MODIFY PatternLayout.csPatternLayout ConverterInfo ConverterInfo PatternLayout CreatePatternParser PatternLayout AddConverter PatternLayout AddConverter MODIFY Hierarchy.csHierarchy PropertyEntry ToString ADD ConverterInfo.csConverterInfo AddProperty ConverterInfo ConverterInfo MODIFY PatternConverter.cs MODIFY PatternParser.csPatternParser ProcessConverter MODIFY PatternString.csPatternString ConverterInfo ConverterInfo PatternString AddConverter PatternString CreatePatternParser PatternString AddConverter ADD PropertyEntry.csPropertyEntry ToString MODIFY log4net.vs2005.csproj
0,LOG4NET-229,9df9848f90c58c41f658b66c68178112eccc7c30,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
1,LOG4NET-155,3e13e73fbab8e609afded93bc2439320733d5e97,"Add TimeEvaluator Hello,

I'd like to submit this class. I find it handy together with RemotingAppender (or buffering appenders generally) where we don't want to send synchronously, but still want to have some timely feedback from the sites even if there is little logging.

A sample configuration would be:

    <appender name=""RemotingAppender"" type=""log4net.Appender.RemotingAppender"">
      <param name=""Sink"" value=""tcp://localhost:11111/LoggingSink"" />
      <param name=""Lossy"" value=""false"" />
      <param name=""BufferSize"" value=""500"" />
      <param name=""Fix"" value=""Partial"" />
      <evaluator type=""log4net.Core.TimeEvaluator"">
        <threshold value=""60""/>
      </evaluator>
    </appender>

I've taken the existing LevelEvaluator from Nicko Cadell as a template to build this class.

I've tried it and it worked, but haven't done any further testing.

Best regards and thanks for the great works!
Robert.",Fix for LOG4NET-155. Added TimeEvaluator that will trigger a buffer flush if a certain amount of time has elapsed since the last event., ADD TimeEvaluator.csTimeEvaluator TimeEvaluator TimeEvaluator IsTriggeringEvent TimeEvaluator TimeEvaluator MODIFY log4net.vs2005.csproj
0,LOG4NET-242,e1c9c3b7bb26b3564062859a86b38b793048548a,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
1,LOG4NET-390,758890749170f52792fc75788a481c0727901d62,"ReadOnlyAppenderCollection.ToArray returns empty array log4net.Appender.AppenderCollection.ReadOnlyAppenderCollection does not override ToArray().
As a consequence ToArray calls returns always empty arrays.

Fix:
public override IAppender[] ToArray()
{
    return m_collection.ToArray();
}",merge fix for LOG4NET-390 from trunk, MODIFY AppenderCollection.csAppenderCollection ReadOnlyAppenderCollection TrimToSize AppenderCollection ReadOnlyAppenderCollection ToArray ADD AppenderCollectionTest.csAppenderCollectionTest ToArrayTest AppenderCollectionTest ReadOnlyToArrayTest MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-318,d68a3ab28f137926263ba0e502abd77b3caeb70b,"log4net doesn't pass verification Run PEVerify tool. (http://msdn.microsoft.com/en-us/library/62bwd2yd(v=VS.100).aspx)

I get
[IL]: Error: [log4net.dll : log4net.Plugin.RemoteLoggingServerPlugin::Attach][offset 0x00000029] Method is not visible.

It is a good idea to add verification step for the build process.

Thanks.
",LOG4NET-341 fix location info to not contain a reference to StackFrame any more, MODIFY LocationInfo.csLocationInfo LocationInfo ADD MethodItem.csMethodItem MethodItem MethodItem MethodItem MethodItem GetMethodParameterNames MethodItem MethodItem MethodItem MethodItem ADD StackFrameItem.csStackFrameItem StackFrameItem MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate MODIFY StackTraceDetailPatternConverter.csStackTraceDetailPatternConverter GetMethodInformation StackTraceDetailPatternConverter GetMethodParameterNames StackTraceDetailPatternConverter GetMethodInformation MODIFY StackTracePatternConverter.csStackTracePatternConverter GetMethodInformation StackTracePatternConverter Convert StackTracePatternConverter GetMethodInformation MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj
0,LOG4NET-475,b0925ead3f58f007f280268c4dc0a97a8c750081,"Cannot add appender in Log4net at runtime I am trying to write a custom appender that rolls over daily, as well as on a size limit, and cleans up after itself in the process. I wrote the implementation using the AppenderSkeleton as a base class, then attempted to write a unit test to test the appender functionality. I do the following:

            DailyRollingFileAppender appender = new DailyRollingFileAppender();
            appender.RollOverOnSize = true;
            appender.RollOverDaily = true; //dont think I can test this
            appender.MaxFileSizeBytes = 1024;
            appender.RolloverDayCount = 1;
            appender.RollOverOnSize = true;
            appender.LoggingDirectory = Path.Combine(Directory.GetCurrentDirectory(), ""TestLogFolder"");
            appender.LogFileName = ""TestLogFileName"";
            appender.DateTimeFormatString = ""YYYY-MM-DD-hh-mm-ss"";
            appender.Cleanup = true;
            appender.Layout = new PatternLayout();
            appender.MaxNumberOfFiles = 10;
            appender.Name = ""testAppender"";

            //lets write some crappy log messages
            byte[] bytes = new byte[1050];

            Random rnd = new Random();
            rnd.NextBytes(bytes);

            ILog log = LogManager.GetLogger(""LoggerName"");
            Logger logger = (Logger)log.Logger;
            logger.AddAppender(appender);

            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), new Exception());
            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), null);

The code is based on the only examples I can find of people adding appenders to loggers at runtime, which you would want to do for a unit test. The issue is that the Logger instance I get from the call to ILog.Logger in the code above as a collection of appenders of type ReadOnlyAppenderCollection. The code silently consumes the exception it throws internally and never actually adds the appender to the collection. Can/How do I add an appender to a logger at runtime in the manner described above, so I can appropriately test that it functions. ",LOG4NET-461: fix for ancient .NET frameworks, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
1,LOG4NET-164,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"using a named mutex for file appenders About logging to the same file from 2 or more instances of an application.
As opposed to a minimallock which makes it still possible for 2 application instances to interfere. Why not use a named mutex so that the logging will wait for the lock to be released from another instance.
","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-76,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-296,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Patch for .net 4, client profile and a fix for the name resolution bug  ",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-311,09f7293056e8abf36655537318384e9bd0ff5c9e,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
1,LOG4NET-457,eeef15d53127f7929c015d4992adf4e58bf9e121,SMTP Appender should trim leading and trailing separators from address fields see https://github.com/apache/log4net/pull/13,"LOG4NET-457 SMTP Appender should trim leading and trailing separators from address fields

based on patch by Éric Daigneault
closes #13", MODIFY SmtpAppender.csSmtpAppender MaybeTrimSeparators
0,LOG4NET-117,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
1,LOG4NET-376,24157c2a6a1ba70f80ff17fa4fdb9406cca28d09,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




","revert part of last patch for LOG4NET-376

actually the lock has two purposes (at least revision 1483378
indicates this):

* lock the table and the last formatted timestamp
* lock the writer instance

my last patch exposed the writer instance to thread-safety issues.", MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-67,5d7cf795884a0217aed3edd15bf33808e5be5621,"CVE-2006-0743 Security vulnerability in LocalSyslogAppender Reported by Sebastian Krahmer to security@apache.org
Logged as CVE-2006-0743

The LocalSyslogAppender contains a vulnerability which could lead to memory corruption within the runtime process. This is likely to cause the application using the LocalSyslogAppender to terminate unexpectedly. In addition to a deliberate denial of service attack this fault may be caused by logging legitimate data therefore the LocalSyslogAppender must not be used even within secured environments.

Current users of the LocalSyslogAppender (from the log4net 1.2.9 release) should update their logging configuration to remove references to the LocalSyslogAppender. Alternatively users can build a new version of the log4net assembly from the head of the source code repository where this fault has been fixed.",Fix for LOG4NET-56. Added support for rendering IEnumerators rather than just collections., MODIFY DefaultRenderer.csDefaultRenderer RenderObject
1,LOG4NET-229,8400fecdd81394a86d4192889446d40678dcfb90,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-215,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-242,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
1,LOG4NET-69,09d665129ac3fc08b225e097201276f04b6a7586,"Exception thrown when *Format methods are given a malformed format string FormatException thrown when *Format methods are given a malformed format string: log.DebugFormat(""Malformed {{,,,5}format{8}!"");

This statement:

 log.DebugFormat(""Malformed {{,,,5}format{8}!"");

throws the following exception:

[FormatException: Input string was not in a correct format.]
   System.Text.StringBuilder.FormatError()
   System.Text.StringBuilder.AppendFormat(IFormatProvider provider, String format, Object[] args)
   System.String.Format(IFormatProvider provider, String format, Object[] args)
   log4net.Core.LogImpl.DebugFormat(String format, Object[] args)

which is consistent with the documentation for String.Format:

System.FormatException: The format item in format is invalid.  -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.  ","Fix for LOG4NET-69.
Added new wrapped implementation of String.Format in Transform.StringFormat. This method will not throw exceptions. Added some more exception handling code to the Logger.", MODIFY TraceLogImpl.csTraceLogImpl TraceFormat TraceLogImpl TraceFormat MODIFY log4net.build MODIFY ILogger.cs MODIFY LogImpl.csLogImpl FatalFormat LogImpl WarnFormat LogImpl WarnFormat LogImpl InfoFormat LogImpl DebugFormat LogImpl ErrorFormat LogImpl InfoFormat LogImpl DebugFormat LogImpl ErrorFormat LogImpl FatalFormat MODIFY Logger.csLogger Log Logger Log Logger IsEnabledFor MODIFY Transform.csTransform StringFormatError Transform RenderObject Transform StringFormat Transform RenderArray
0,LOG4NET-46,6586b155fe474144ba918de90e9769780234a1e5,"Support appenders that can output multiple events efficiently Some appenders can efficiently output batches of events. Currently there is no way to pass a batch of events to an appender.

Add an interface IBulkAppender that exposes a DoAppend method that takes an array of events. This interface can be supported by appenders that can process in bulk.",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-259,26060334da4fc07c5f768da5a1f7a647a70de42b,"Log4Net does not create a new tab in Chainsaw I believe the problem is in XmlLayoutSchemaLog4j, and that you need to change ""log4japp"" to ""application"".

According to the Chainsaw tutorial:
Chainsaw automatically looks inside each received LoggingEvent for a special Application property to determine which tab to route an event to. If it cannot find this property, it attempts to use a secondary property usually added via the SocketAppender or SocketHubAppender which identify the remote host of these events. If neither of these are found, Chainsaw routes events to a default ""Unknown"" tab.

Logging events generated internally by chainsaw include the following properties:
<log4j:properties>
    <log4j:data name=""application"" value=""Generator 1""/>
    <log4j:data name=""hostname"" value=""localhost""/>
    <log4j:data name=""log4jid"" value=""2""/>
    <log4j:data name=""some string"" value=""some valueGenerator 1""/>
</log4j:properties>

Logging events generated by XmlLayoutSchemaLog4j include the following properties:
<log4j:properties>
    <log4j:data name=""log4net:UserName"" value=""DOMAIN\username""/>
    <log4j:data name=""log4jid"" value=""281""/>
    <log4j:data name=""log4jmachinename"" value=""machineName""/>
    <log4j:data name=""log4net:HostName"" value=""machineName""/>
    <log4j:data name=""log4japp"" value=""Application.exe""/>
</log4j:properties>

See also: http://www.mail-archive.com/log4j-dev@jakarta.apache.org/msg05361.html

UPDATE: Documentation issue. See comments below.","LOG4NET-342 added the property Configured to ILog that allows to check if the repository was configured properly

Usecase:
   if (log.Configured == false) 
   { 
      throw new ConfigurationErrorsException(""Log4net failed to initialize properly.""); 
   }", MODIFY LogImpl.cs MODIFY ILog.cs
1,LOG4NET-25,252574f67d0bdabea33a7f9c73d1a941299f9e8a,"RollingFileAppender can fail if RollOverIfDateBoundaryCrossing required RollingFileAppender fails if RollOverIfDateBoundaryCrossing required and current directory is not ApplicationBase directory.

RollOverIfDateBoundaryCrossing is called before the base class (FileAppender) ActivateOptions method is called. Therefore the File property has not yet been converted to a fully qualified path. If the current directory is not the ApplicationBase directory (e.g. when running under ASP.NET) then the RollFile call will fail with the message ""Source does not exist"" in the internal debug log.",Fix LOG4NET-25.  RollingFileAppender fails if RollOverIfDateBoundaryCrossing required and current directory is not ApplicationBase directory., MODIFY RollingFileAppender.csRollingFileAppender ActivateOptions
1,LOG4NET-98,0b84492f43c8c769e7453e675f111b56e5263712,"Update header comment in files to be compliant with new Apache header requirements: http://www.apache.org/legal/src-headers.html for 11/1/2006 deadline Update header comment in files to be compliant with new Apache header requirements: 

 http://www.apache.org/legal/src-headers.html 

for 11/1/2006 deadline.","Fix for LOG4NET-98.
Updated all source, build and doc files to use new Apache source headers as per http://www.apache.org/legal/src-headers.html", MODIFY NOTICE.txt MODIFY contributing.html MODIFY downloads.html MODIFY history.html MODIFY index.html MODIFY license.html MODIFY building.html MODIFY config-examples.html MODIFY example-apps.html MODIFY faq.html MODIFY features.html MODIFY framework-support.html MODIFY chainsaw.html MODIFY index.html MODIFY configuration.html MODIFY contexts.html MODIFY internals.html MODIFY introduction.html MODIFY plugins.html MODIFY repositories.html MODIFY release-notes.html MODIFY roadmap.html MODIFY support.html MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AsyncAppender.cs MODIFY FastDbAppender.cs MODIFY FireEventAppender.cs MODIFY MessageBoxAppender.cs MODIFY MessageObjectExpanderAppender.cs MODIFY MsmqAppender.cs MODIFY PatternFileAppender.cs MODIFY SimpleSmtpAppender.cs MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY IWmiBoundEvent.cs MODIFY WmiAppender.cs MODIFY WmiInstaller.cs MODIFY WmiLayout.cs MODIFY WmiLoggingEvent.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY TraceLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ForwardingLayout.cs MODIFY LineWrappingLayout.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY NotLogging.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingClient.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingServer.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cs MODIFY Global.asax.cs MODIFY WebForm1.aspx.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY AssemblyVersionInfo.vb MODIFY Global.asax.vb MODIFY WebForm1.aspx.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY EntryPoint.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cpp MODIFY ConsoleApp.cpp MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogImpl.cs MODIFY EventIDLogManager.cs MODIFY IEventIDLog.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY MarshalByRefLogImpl.cs MODIFY MarshalByRefLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ITraceLog.cs MODIFY TraceLogImpl.cs MODIFY TraceLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY log4net-sdk.ndoc MODIFY log4net.build MODIFY log4net.include MODIFY AdoNetAppender.cs MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderCollection.cs MODIFY AppenderSkeleton.cs MODIFY AspNetTraceAppender.cs MODIFY BufferingAppenderSkeleton.cs MODIFY BufferingForwardingAppender.cs MODIFY ColoredConsoleAppender.cs MODIFY ConsoleAppender.cs MODIFY DebugAppender.cs MODIFY EventLogAppender.cs MODIFY FileAppender.cs MODIFY ForwardingAppender.cs MODIFY IAppender.cs MODIFY IBulkAppender.cs MODIFY LocalSyslogAppender.cs MODIFY MemoryAppender.cs MODIFY NetSendAppender.cs MODIFY OutputDebugStringAppender.cs MODIFY RemoteSyslogAppender.cs MODIFY RemotingAppender.cs MODIFY RollingFileAppender.cs MODIFY SmtpAppender.cs MODIFY SmtpPickupDirAppender.cs MODIFY TelnetAppender.cs MODIFY TextWriterAppender.cs MODIFY TraceAppender.cs MODIFY UdpAppender.cs MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cpp MODIFY AssemblyVersionInfo.cs MODIFY AssemblyVersionInfo.js MODIFY AssemblyVersionInfo.vb MODIFY AliasDomainAttribute.cs MODIFY AliasRepositoryAttribute.cs MODIFY BasicConfigurator.cs MODIFY ConfiguratorAttribute.cs MODIFY DOMConfigurator.cs MODIFY DOMConfiguratorAttribute.cs MODIFY DomainAttribute.cs MODIFY Log4NetConfigurationSectionHandler.cs MODIFY PluginAttribute.cs MODIFY RepositoryAttribute.cs MODIFY SecurityContextProviderAttribute.cs MODIFY XmlConfigurator.cs MODIFY XmlConfiguratorAttribute.cs MODIFY CompactRepositorySelector.cs MODIFY DefaultRepositorySelector.cs MODIFY ErrorCode.cs MODIFY ExceptionEvaluator.cs MODIFY IAppenderAttachable.cs MODIFY IErrorHandler.cs MODIFY IFixingRequired.cs MODIFY ILogger.cs MODIFY ILoggerWrapper.cs MODIFY IOptionHandler.cs MODIFY IRepositorySelector.cs MODIFY ITriggeringEventEvaluator.cs MODIFY Level.cs MODIFY LevelCollection.cs MODIFY LevelEvaluator.cs MODIFY LevelMap.cs MODIFY LocationInfo.cs MODIFY LogException.cs MODIFY LogImpl.cs MODIFY LoggerManager.cs MODIFY LoggerWrapperImpl.cs MODIFY LoggingEvent.cs MODIFY SecurityContext.cs MODIFY SecurityContextProvider.cs MODIFY WrapperMap.cs MODIFY AbsoluteTimeDateFormatter.cs MODIFY DateTimeDateFormatter.cs MODIFY IDateFormatter.cs MODIFY Iso8601DateFormatter.cs MODIFY SimpleDateFormatter.cs MODIFY DenyAllFilter.cs MODIFY FilterDecision.cs MODIFY FilterSkeleton.cs MODIFY IFilter.cs MODIFY LevelMatchFilter.cs MODIFY LevelRangeFilter.cs MODIFY LoggerMatchFilter.cs MODIFY MdcFilter.cs MODIFY NdcFilter.cs MODIFY PropertyFilter.cs MODIFY StringMatchFilter.cs MODIFY GlobalContext.cs MODIFY ILog.cs MODIFY ExceptionLayout.cs MODIFY ILayout.cs MODIFY IRawLayout.cs MODIFY Layout2RawLayoutAdapter.cs MODIFY LayoutSkeleton.cs MODIFY AppDomainPatternConverter.cs MODIFY AspNetCachePatternConverter.cs MODIFY AspNetContextPatternConverter.cs MODIFY AspNetPatternConverter.cs MODIFY AspNetRequestPatternConverter.cs MODIFY AspNetSessionPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY ExceptionPatternConverter.cs MODIFY FileLocationPatternConverter.cs MODIFY FullLocationPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LevelPatternConverter.cs MODIFY LineLocationPatternConverter.cs MODIFY LoggerPatternConverter.cs MODIFY MessagePatternConverter.cs MODIFY MethodLocationPatternConverter.cs MODIFY NamedPatternConverter.cs MODIFY NdcPatternConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RelativeTimePatternConverter.cs MODIFY ThreadPatternConverter.cs MODIFY TypeNamePatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PatternLayout.cs MODIFY RawLayoutConverter.cs MODIFY RawPropertyLayout.cs MODIFY RawTimeStampLayout.cs MODIFY RawUtcTimeStampLayout.cs MODIFY SimpleLayout.cs MODIFY XMLLayout.cs MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.cs MODIFY LogManager.cs MODIFY LogicalThreadContext.cs MODIFY MDC.cs MODIFY NDC.cs MODIFY DefaultRenderer.cs MODIFY IObjectRenderer.cs MODIFY RendererMap.cs MODIFY IPlugin.cs MODIFY IPluginFactory.cs MODIFY PluginCollection.cs MODIFY PluginMap.cs MODIFY PluginSkeleton.cs MODIFY RemoteLoggingServerPlugin.cs MODIFY DefaultLoggerFactory.cs MODIFY Hierarchy.cs MODIFY ILoggerFactory.cs MODIFY Logger.cs MODIFY LoggerKey.cs MODIFY ProvisionNode.cs MODIFY RootLogger.cs MODIFY XmlHierarchyConfigurator.cs MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.cs MODIFY ThreadContext.cs MODIFY AppenderAttachedImpl.cs MODIFY CompositeProperties.cs MODIFY ContextPropertiesBase.cs MODIFY CountingQuietTextWriter.cs MODIFY CyclicBuffer.cs MODIFY EmptyCollection.cs MODIFY EmptyDictionary.cs MODIFY FormattingInfo.cs MODIFY GlobalContextProperties.cs MODIFY LevelMapping.cs MODIFY LevelMappingEntry.cs MODIFY LogLog.cs MODIFY LogicalThreadContextProperties.cs MODIFY NativeError.cs MODIFY NullDictionaryEnumerator.cs MODIFY NullEnumerator.cs MODIFY NullSecurityContext.cs MODIFY OnlyOnceErrorHandler.cs MODIFY OptionConverter.cs MODIFY PatternConverter.cs MODIFY PatternParser.cs MODIFY PatternString.cs MODIFY AppDomainPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY EnvironmentPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LiteralPatternConverter.cs MODIFY NewLinePatternConverter.cs MODIFY ProcessIdPatternConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RandomStringPatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PropertiesDictionary.cs MODIFY ProtectCloseTextWriter.cs MODIFY QuietTextWriter.cs MODIFY ReadOnlyPropertiesDictionary.cs MODIFY ReaderWriterLock.cs MODIFY ReusableStringWriter.cs MODIFY SystemInfo.cs MODIFY SystemStringFormat.cs MODIFY TextWriterAdapter.cs MODIFY ThreadContextProperties.cs MODIFY ThreadContextStack.cs MODIFY ThreadContextStacks.cs MODIFY Transform.cs MODIFY BooleanConverter.cs MODIFY ConversionNotSupportedException.cs MODIFY ConverterRegistry.cs MODIFY EncodingConverter.cs MODIFY IConvertFrom.cs MODIFY IConvertTo.cs MODIFY IPAddressConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PatternStringConverter.cs MODIFY TypeConverter.cs MODIFY TypeConverterAttribute.cs MODIFY WindowsSecurityContext.cs MODIFY nant.build MODIFY BufferingAppenderTest.cs MODIFY CountingAppender.cs MODIFY EventLogAppenderTest.cs MODIFY RemotingAppenderTest.cs MODIFY RollingFileAppenderTest.cs MODIFY StringAppender.cs MODIFY AssemblyInfo.cs MODIFY ThreadContextTest.cs MODIFY FixingTest.cs MODIFY ShutdownTest.cs MODIFY StringFormatTest.cs MODIFY Logger.cs MODIFY PatternLayoutTest.cs MODIFY XmlLayoutTest.cs MODIFY CyclicBufferTest.cs MODIFY PropertiesDictionaryTest.cs MODIFY RandomStringPatternConverterTest.cs MODIFY SystemInfoTest.cs MODIFY Utils.cs MODIFY contributing.xml MODIFY downloads.xml MODIFY history.xml MODIFY index.xml MODIFY license.xml MODIFY building.xml MODIFY config-examples.xml MODIFY example-apps.xml MODIFY faq.xml MODIFY features.xml MODIFY framework-support.xml MODIFY chainsaw.xml MODIFY index.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY internals.xml MODIFY introduction.xml MODIFY plugins.xml MODIFY repositories.xml MODIFY release-notes.xml MODIFY roadmap.xml MODIFY project.xml MODIFY site.vsl MODIFY support.xml
1,LOG4NET-74,fcd26b8ccf169f9ea4e7cc02a5ff567a2dc3d544,"Change MemoryAppender member variables to protected The MemoryAppender is designed to hold the log events in an internal array. The appender can be subclassed, however the internal list is not available to subclasses.
This appender will be more useful if the members are protected.",Fix for LOG4NET-74. Made member variables protected., MODIFY MemoryAppender.cs
0,LOG4NET-331,3fb279c8c87d3a1d5808f1e9504185673e35c78f,"AdoNetAppender errors when writing Asp.net item when Request object is null When using AdoNetAppender, with a conversion pattern of '%aspnet-request{REMOTE_ADDR}', and I attempt to write a log entry during the Application_Start event, it throws an error (internally) and stops working. The error refers to ""...Request is not available in this context.."" which makes sense because its only in the Application_Start event. However the appender should accommodate this situation and log null, not throw an error. The RollingFileAppender, for instance,  handles this gracefully.",LOG4NET-343 exception if logger name is '.', MODIFY Hierarchy.csHierarchy UpdateParents MODIFY Hierarchy.csHierarchy AddingMultipleAppenders2 Hierarchy LoggerNameCanConsistOfASingleDot Hierarchy LoggerNameCanConsistOfASingleNonDot Hierarchy SetRepositoryPropertiesInConfigFile Hierarchy LoggerNameCanContainSequenceOfDots
1,LOG4NET-72,debba6201326ec2cfb7bdd8613f12fe3d212e418,"Performance of ILog.xxxFormat methods The performance of the ILog.xxxFormat methods can be improved.

1) Add method overloads for common numbers of arguments:

void DebugFormat(string format, object arg0); 
void DebugFormat(string format, object arg0, object arg1); 
void DebugFormat(string format, object arg0, object arg1, object arg2); 

2) Delay formatting of the message until after the appenders filters have run.","Fix for LOG4NET-72. Moved String.Format call into separate class SystemStringFormat. This class holds the format string and arguments and only performs the String.Format when its ToString method is called.
Added simple test to ensure that the String.Format methods are working correctly and error handling correctly.
Updated the tests project nant.build to copy shared libs into the build output directory.", MODIFY LogImpl.csLogImpl DebugFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl FatalFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl WarnFormat LogImpl WarnFormat ADD SystemStringFormat.csSystemStringFormat ToString SystemStringFormat StringFormatError SystemStringFormat StringFormat SystemStringFormat RenderObject SystemStringFormat SystemStringFormat SystemStringFormat RenderArray MODIFY Transform.csTransform RenderArray Transform StringFormatError Transform RenderObject Transform StringFormat MODIFY log4net.csproj ADD prerequisites.txt MODIFY nant.build ADD StringFormatTest.csStringFormatTest TestThreadPropertiesPattern MODIFY log4net.Tests.csproj
0,LOG4NET-112,0d83e31c3fe2f44d3e64f67cc77a7a809cca73b7,"Add support to the UdpAppender for IP v6 remote addresses The UdpClient object must be configured for either IP v4 or IP v6 when it is created. Once configured it cannot be used to send to remote addresses that are from a different network family.

Specifying the network family is not supported on NET 1.0, NETCF 1.0, SSCLI 1.0",Fix for LOG4NET-113. 3 argument version of Type.GetType behaves differently to to 2 argument version on Compact Framework., MODIFY SystemInfo.csSystemInfo GetTypeFromString
0,LOG4NET-344,17fa2d8992fc0ca6eecb5c23ab452b0802aaed5d,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",LOG4NET-331 gracefully handle IIS7 integrated mode's behavior when request is not available (other modes and versions simply return null for the request property), MODIFY AspNetRequestPatternConverter.csAspNetRequestPatternConverter Convert
0,LOG4NET-88,4e262fa919e6a0eb44abe6eca92ae07d17f1cd1a,"[PATCH] to AdoNetAppender.cs to support .NET 2.0 connectionStrings configuration section This is a patch for [LOG4NET-78] https://issues.apache.org/jira/browse/LOG4NET-78.  This adds a new ""connectionStringName"" attribute (and corresponding ConnectionStringName) property to the AdoNetAppender class.  This is a reference to a connection string within the <ConnectionStrings> section of an App.config or Web.config file.

The choice of name ""connectionStringName"" is consistent with the naming that Microsoft uses in the various Providers such as SqlMembershipProvider.

I made sure to put this code in between #if NET_2_0 blocks. However, the patch does not include the required change to the log4net.csproj file which needs to reference the System.Configuration.dll (C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.configuration.dll) assembly.  

This is a .NET 2.0 only assembly so I was unsure how to add a conditional compilation element so that the project reference would not break log4net for .NET 1.0 and .NET 1.1.  

If there is a better way to do so, please let me know!","Fix for LOG4NET-2. Require that a Type parameter be passed to log4net's internal logging class when recording an internal message. Added LogReceived event to LogLog class to facilitate capturing internal messages during the the configuration process. Added ILoggerRepository.ConfigurationMessages property which holds a list of internal messages generated during the most recent configuration cycle. Changed signature on XmlConfigurator/BasicConfigurator.Configure methods to return internal messages recording during the configuration process. 

Added Visual Studio 2005 solution and project files.", MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender SendBuffer AdoNetAppender GetLogStatement AdoNetAppender SendBuffer AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderSkeleton.csAppenderSkeleton ~AppenderSkeleton AppenderSkeleton lock MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY FileAppender.csFileAppender OpenFile FileAppender ActivateOptions MODIFY RollingFileAppender.csRollingFileAppender OpenFile RollingFileAppender ComputeCheckPeriod RollingFileAppender RollOverSize RollingFileAppender InitializeFromOneFile RollingFileAppender GetExistingFiles RollingFileAppender DetermineCurSizeRollBackups RollingFileAppender ExistingInit RollingFileAppender DeleteFile RollingFileAppender RollFile RollingFileAppender RollOverIfDateBoundaryCrossing MODIFY SmtpAppender.cs MODIFY TelnetAppender.csTelnetAppender SocketHandler OnConnect TelnetAppender ActivateOptions MODIFY TextWriterAppender.csTextWriterAppender lock MODIFY BasicConfigurator.csBasicConfigurator InternalConfigure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure MODIFY SecurityContextProviderAttribute.csSecurityContextProviderAttribute Configure MODIFY XmlConfigurator.csXmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator InternalConfigureAndWatch XmlConfigurator InternalConfigure XmlConfigurator ConfigureAndWatch XmlConfigurator Configure XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnRenamed XmlConfigurator InternalConfigureFromXml XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnChanged XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler OnWatchedFileChange XmlConfigurator ConfigureFromXml XmlConfigurator Configure XmlConfigurator ConfigureAndWatch MODIFY XmlConfiguratorAttribute.csXmlConfiguratorAttribute ConfigureFromFile XmlConfiguratorAttribute Configure XmlConfiguratorAttribute ConfigureFromUri XmlConfiguratorAttribute ConfigureFromFile MODIFY CompactRepositorySelector.csCompactRepositorySelector CompactRepositorySelector CompactRepositorySelector CreateRepository MODIFY DefaultRepositorySelector.csDefaultRepositorySelector LoadPlugins DefaultRepositorySelector CreateRepository DefaultRepositorySelector ConfigureRepository DefaultRepositorySelector GetInfoForAssembly DefaultRepositorySelector DefaultRepositorySelector DefaultRepositorySelector LoadAliases DefaultRepositorySelector CreateRepository MODIFY Level.cs MODIFY LocationInfo.csLocationInfo LocationInfo MODIFY LoggerManager.csLoggerManager LoggerManager MODIFY LoggingEvent.csLoggingEvent if LoggingEvent if LoggingEvent if MODIFY DatePatternConverter.csDatePatternConverter Convert DatePatternConverter ActivateOptions MODIFY NamedPatternConverter.csNamedPatternConverter ActivateOptions MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY RendererMap.csRendererMap FindAndRender MODIFY RemoteLoggingServerPlugin.csRemoteLoggingServerPlugin Attach ADD ConfigurationChangedEventArgs.csConfigurationChangedEventArgs ConfigurationChangedEventArgs MODIFY Hierarchy.csHierarchy BasicRepositoryConfigure Hierarchy UpdateParents Hierarchy XmlRepositoryConfigure Hierarchy CollectAppenders Hierarchy Shutdown MODIFY Logger.csLogger Log Logger CallAppenders Logger Log Logger IsEnabledFor Logger Log MODIFY RootLogger.csRootLogger if MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator ParseAppender XmlHierarchyConfigurator ParseChildrenOfLoggerElement XmlHierarchyConfigurator ParseRenderer XmlHierarchyConfigurator FindAppenderByReference XmlHierarchyConfigurator ParseLogger XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator Configure XmlHierarchyConfigurator ConvertStringTo XmlHierarchyConfigurator ParseLevel MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.csLoggerRepositorySkeleton LoggerRepositorySkeleton LoggerRepositorySkeleton ResetConfiguration MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend AppenderAttachedImpl RemoveAllAppenders MODIFY LogLog.csLogLog OnLogReceived LogLog Debug LogReceivedEventArgs LogReceivedEventArgs LogLog Error LogLog ToString LogLog Warn LogLog Error LogLog LogReceivedAdapter LogReceivedAdapter LogLog LogReceivedAdapter LogLog_LogReceived LogLog Error LogLog Warn LogLog Error LogLog Warn LogLog Debug LogLog LogLog LogLog LogReceivedAdapter Dispose LogLog Warn LogLog Debug LogLog Debug LogLog LogLog MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties GetProperties LogicalThreadContextProperties SetCallContextData MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler Error OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error MODIFY OptionConverter.csOptionConverter ToFileSize OptionConverter ToBoolean OptionConverter InstantiateByClassName MODIFY PatternParser.csPatternParser ProcessConverter MODIFY DatePatternConverter.csDatePatternConverter ActivateOptions DatePatternConverter Convert MODIFY EnvironmentFolderPathPatternConverter.csEnvironmentFolderPathPatternConverter Convert MODIFY EnvironmentPatternConverter.csEnvironmentPatternConverter Convert MODIFY IdentityPatternConverter.csIdentityPatternConverter Convert MODIFY ProcessIdPatternConverter.csProcessIdPatternConverter Convert MODIFY RandomStringPatternConverter.csRandomStringPatternConverter ActivateOptions RandomStringPatternConverter Convert MODIFY UserNamePatternConverter.csUserNamePatternConverter Convert MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY SystemInfo.csSystemInfo GetTypeFromString SystemInfo SystemInfo SystemInfo GetAppSetting SystemInfo if MODIFY SystemStringFormat.csSystemStringFormat StringFormatError SystemStringFormat StringFormat MODIFY ThreadContextStacks.csThreadContextStacks if MODIFY ConverterRegistry.csConverterRegistry CreateConverterInstance ADD log4net.vs2005.csproj ADD log4net.vs2005.sln ADD ConfigurationMessages.csLogLogAppender Append ConfigurationMessages ConfigurationMessagesTest ConfigurationMessages rep_ConfigurationChanged LogLogAppender ActivateOptions ADD LogLogTest.csLogLogTest EmitInternalMessages TraceListenerCounter Write TraceListenerCounter WriteLine TraceListenerCounter Reset LogLogTest TraceListenerCounterTest LogLogTest LogReceivedAdapter ADD log4net.Tests.vs2005.csproj
1,LOG4NET-23,6a525039c435d10dbfefe366bcec49d087955dad,example-apps.html links are off by one folder level In the doc/release/example-apps.html document the href links to the example folders are all off by 1 folder level. The links go up one too many folders.,Fix LOG4NET-23. Folders off by 1 level, MODIFY example-apps.xml
0,LOG4NET-242,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-229,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-167,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-117,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-311,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-44,9e1ead9259bca8cc9b20678810d5703e5166fb16,"XmlLayout emits all properties under a node named global-properties, rather than just properties. The global-properties name is incorrect as all properties for the event are included. The node name should be changed to properties.",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-242,9df9848f90c58c41f658b66c68178112eccc7c30,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-371,4702ed38136629fbcebddb26e3cc5458b29ae17c,"Log with formatting doesn't call custom renderers (IObjectRenderer) If I log an object using ILog.Info(myObject), myObjectRenderer is used. If I use ILog.InfoFormat(""my object is: {0}"", myObject) then the default renderer is used.

I spent hours trying to figure out why the default renderer was being used and then on a whim I used the non-formatted log method and everything worked correctly. At the very least I would like the documentation for this feature to specify that only the non-formatted logging methods make use of custom renderers.","LOG4NET-370 fix the RemoteSyslogAppender to properly handle log messages that contain newlines

This patch is based on the work of Jarrod Alexander. Please note that this patch also fixes
indentation issues and thus contains some portions of refactoring. Finally it is worth to note
that the patch primarily focuses on making the syslog messages RFC3164 (http://www.ietf.org/rfc/rfc3164.txt) compliant. The signifant parts of the RFC are:

4.1.3 MSG Part of a syslog Packet 

   The MSG part will fill the remainder of the syslog packet. This will 
   usually contain some additional information of the process that 
   generated the message, and then the text of the message. There is no 
   ending delimiter to this part. The MSG part of the syslog packet 
   MUST contain visible (printing) characters. The code set 
   traditionally and most often used has also been seven-bit ASCII in an 
   eight-bit field like that used in the PRI and HEADER parts. In this 
   code set, the only allowable characters are the ABNF VCHAR values 
   (%d33-126) and spaces (SP value %d32). However, no indication of the 
   code set used within the MSG is required, nor is it expected. Other 
   code sets MAY be used as long as the characters used in the MSG are 
   exclusively visible characters and spaces similar to those described 
   above. The selection of a code set used in the MSG part SHOULD be 
   made with thoughts of the intended receiver. A message containing 
   characters in a code set that cannot be viewed or understood by a 
   recipient will yield no information of value to an operator or 
   administrator looking at it.", MODIFY RemoteSyslogAppender.csRemoteSyslogAppender GetSeverity RemoteSyslogAppender RemoteSyslogAppender RemoteSyslogAppender Append
0,LOG4NET-212,d78a5f8331dad60de277fecda43205412ccb464a,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-116,73e0dd86850f4d805d2146c9a5cdfe77a3fa6f26,"allow smtp to ssl authenticate and with certificates. It would be fantastic if more of the SMTP feature of .net 2.0 would be allowed such as 
SSL authentication and with certificates.",Fix for LOG4NET-158. XMLConfigurator.ConfigureAndWatch() won't leak resources when called multiple times. Internal FileWatcher is properly disposed when a change is detected., MODIFY XmlConfigurator.csXmlConfigurator ConfigureAndWatchHandler Dispose XmlConfigurator InternalConfigureAndWatch XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler XmlConfigurator ConfigureAndWatchHandler StartWatching
1,LOG4NET-575,3242db510c27e825af7164415402f5012df521a2,"log4net function having XXE vulnerability  Recently we ran veracode (security tool) for our application. Veracode gave us the report that log4net function 'void InternalConfigure(Repository.ILoggerRepository, System.IO.Stream)' has Improper Restriction of XML External Entity Reference (XXE) error. We are seeing this vulnerability in both 2.0.7 and 2.0.8 versions. 

Attached screenshot for further reference.","XmlConfigurator: do longer allow dtd processing across all platforms (LOG4NET-575)

This patch fixes a security vulnerabiliy reported by Karthik Balasundaram. The security
vulnerability was found in the way how log4net parses xml configuration files where it
allowed to process XML External Entity Processing. An attacker could use this as an
attack vector if he could modify the XML configuration file.", MODIFY XmlConfigurator.csXmlConfigurator InternalConfigure
0,LOG4NET-215,54493ed542fa2c3ab36809f1b5a65b8daa97d1ae,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Deal with SecurityException in EventLogAppender more gracefully.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY EventLogAppenderTest.csEventLogAppenderTest ActivateOptionsDisablesAppenderIfSourceDoesntExist EventLogAppenderTest TestGetEntryTypeForExistingApplicationName EventLogAppenderTest TestGetEntryType
0,LOG4NET-485,d79057ae35cb4934c976172fa758be40d08a9815,"RollingFileAppender cannot be used by multiple process RollingFileAppender doesn't acquire lock when rolling takes place.
As a consequence running multiple instances of the same program rewrites the same log file instead of making a roll for everyone.

There is FileAppender.InterProcessLock but it only protects writes and not rolls.",LOG4NET-473: Added file extension attribute in SmtpPickupDirAppender (closes #19), MODIFY SmtpPickupDirAppender.csSmtpPickupDirAppender SmtpPickupDirAppender SmtpPickupDirAppender SendBuffer SmtpPickupDirAppender if SmtpPickupDirAppender if MODIFY SmtpPickupDirAppenderTest.csSmtpPickupDirAppenderTest DeleteTestFiles SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest CreateSmtpPickupDirAppender SmtpPickupDirAppenderTest SetUp SmtpPickupDirAppenderTest TestOutputContainsSentDate SmtpPickupDirAppenderTest CreateLogger SmtpPickupDirAppenderTest DestroyLogger SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest TearDown SmtpPickupDirAppenderTest InitializePickupDir SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest ResetLogger SmtpPickupDirAppenderTest TestConfigurableFileExtension SmtpPickupDirAppenderTest TestDefaultFileNameIsAGuid
0,LOG4NET-94,0ef4194ecf833aa255b0996ec8e41230a3039e3f,"Incorrect config file for ..\examples\net\1.0\Tutorials\ConsoleApp The app.config file has some errors in it...


Line 39

is...
<sppendToFile value=""true"" />

should be...
<appendToFile value=""true"" />


Line 43

is...
<geader value=""[Header]&#13;&#10;"" />

should be...
<header value=""[Header]&#13;&#10;"" />



Line 87

is...
<commandText"" value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />

should be...
<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />



Line 94

is...
</param>

should be...
</layout>


-- Jeff Hegedus:  Corrected xml below ---

<?xml version=""1.0"" encoding=""utf-8"" ?>
<!-- 
		.NET application configuration file     
		This file must have the exact same name as your application with .config appended to it. 
		
		For example if your application is ConsoleApp.exe then the config file must be ConsoleApp.exe.config. 
		It must also be in the same directory as the application. 
	-->
<configuration>
	<!-- Register a section handler for the log4net section -->
	<configSections>
		<section name=""log4net"" type=""System.Configuration.IgnoreSectionHandler"" />
	</configSections>
	<appSettings>
		<!-- To enable internal log4net logging specify the following appSettings key -->
		<!-- <add key=""log4net.Internal.Debug"" value=""true""/> -->
	</appSettings>
	<!-- This section contains the log4net configuration settings -->
	<log4net>
		<!-- Define some output appenders -->
		<appender name=""RollingLogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file value=""rolling-log.txt"" />
			<appendToFile value=""true"" />
			<maxSizeRollBackups value=""10"" />
			<maximumFileSize value=""100"" />
			<rollingStyle value=""Size"" />
			<staticLogFileName value=""true"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<appender name=""LogFileAppender"" type=""log4net.Appender.FileAppender"">
			<file value=""log-file.txt"" />
			<!-- Example using environment variables in params -->
			<!-- <file value=""${TMP}\log-file.txt"" /> -->
			<appendToFile value=""true"" />
			<!-- An alternate output encoding can be specified -->
			<!-- <encoding value=""unicodeFFFE"" /> -->
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
			<!-- Alternate layout using XML			
			<layout type=""log4net.Layout.XMLLayout"" /> -->
		</appender>
		<appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"">
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
		</appender>
		<appender name=""NetSendAppender"" type=""log4net.Appender.NetSendAppender"">
			<threshold value=""ERROR"" />
			<server value=""IN27WS024728"" />
			<recipient value=""jhegedus2"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<!-- Example of how to configure the AdoNetAppender		
		<appender name=""AdoNetAppender"" type=""log4net.Appender.AdoNetAppender"" >			
			<connectionString value=""Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"" />
			<layout type=""log4net.Layout.PatternLayout"">				
				<conversionPattern value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES ('%date','%thread','%level','%logger','%message')"" />
			</layout>
		</appender> 
		-->
		<!-- 
		<appender name=""A"" type=""log4net.Appender.ForwardingAppender"" >
			<threshold value=""WARN""/>			
			<appender-ref ref=""ConsoleAppender"" />		
		</appender>
		<appender name=""B"" type=""log4net.Appender.ForwardingAppender"" >
			<filter type=""log4net.Filter.LevelRangeFilter"">
				<levelMin value=""DEBUG""/>
				<levelMax value=""INFO""/>
			</filter>
			<appender-ref ref=""ConsoleAppender"" />
		</appender> 
		-->
		<!-- Example of how to configure the AdoNetAppender to connect to MS Access -->
		<appender name=""ADONetAppender_Access"" type=""log4net.Appender.AdoNetAppender"">
			<connectionString value=""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""1024"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Example of how to configure the AdoNetAppender to connect to MS SQL Server -->
		<appender name=""ADONetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
			<bufferSize value=""1"" />
			<connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
			<connectionString value=""data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""DateTime"" />
				<!-- 
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
				</layout> 
				-->
				<layout type=""log4net.Layout.RawTimeStampLayout"" />
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""4000"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value=""WARN"" />
			<appender-ref ref=""LogFileAppender"" />
			<appender-ref ref=""ConsoleAppender"" />
			<!-- <appender-ref ref=""ADONetAppender_SqlServer"" /> -->
			<appender-ref ref=""NetSendAppender"" />
			<!-- <appender-ref ref=""A"" /> -->
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name=""ConsoleApp.LoggingExample"">
			<!-- <appender-ref ref=""B"" /> -->
			<level value=""ALL"" />
			<appender-ref ref=""RollingLogFileAppender"" />
		</logger>
	</log4net>
</configuration>",Added missing documentation for ASP.Net related PatternConverters. LOG4NET-87., MODIFY AspNetCachePatternConverter.csAspNetCachePatternConverter Convert AspNetCachePatternConverter Convert MODIFY AspNetContextPatternConverter.cs MODIFY AspNetPatternConverter.cs MODIFY AspNetRequestPatternConverter.cs MODIFY AspNetSessionPatternConverter.csAspNetSessionPatternConverter Convert
0,LOG4NET-65,4aab012ac8201b2aebe4c3d1e49027e4078b202a,"Unhandled SecurityException exception for FileIOPermission while loading configuration file If the calling application does not have the PathDiscovery FileIOPermission a SecurityException is generated from the XmlConfiguratorAttribute.Configure method. This is called from the first LoggerManager.GetLogger in a calling assembly.

The exception should be caught as we may potentially be injecting this exception into user code's class initialisation phase which the user would find unexpected.

An example stack trace for the exception is:

[SecurityException: Request for the permission of type 'System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' failed.]
   System.Security.CodeAccessSecurityEngine.Check(Object demand, StackCrawlMark& stackMark, Boolean isPermSet) +0
   System.Security.CodeAccessPermission.Demand() +59
   System.AppDomainSetup.VerifyDir(String dir, Boolean normalize) +110
   System.AppDomain.get_BaseDirectory() +61
   log4net.Util.SystemInfo.get_ApplicationBaseDirectory() +31
   log4net.Config.XmlConfiguratorAttribute.Configure(Assembly sourceAssembly, ILoggerRepository targetRepository) +30
   log4net.Core.DefaultRepositorySelector.ConfigureRepository(Assembly assembly, ILoggerRepository repository) +314
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType, String repositoryName, Boolean readAssemblyAttributes) +532
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType) +42
   log4net.Core.DefaultRepositorySelector.GetRepository(Assembly repositoryAssembly) +80
   log4net.Core.LoggerManager.GetLogger(Assembly repositoryAssembly, String name) +132
   log4net.LogManager.GetLogger(Assembly repositoryAssembly, String name) +30
   log4net.LogManager.GetLogger(String name) +34
",Fixed code compatibility issue for .NET 1.1 and .NET 2.0. Related to LOG4NET-58, MODIFY XmlLayoutTest.csXmlLayoutTest createEventNode XmlLayoutTest createEventNode
0,LOG4NET-66,5d7cf795884a0217aed3edd15bf33808e5be5621,"PreserveFileExtension with StaticFileName I found that the patch to make all RollingFileAppender log files have the same file extension (provided by Joshua Bassett) didn't work properly if the log4net configuration used a static file name.

I've attached a patch to version 312319 with his changes and mine merged.

Mike",Fix for LOG4NET-56. Added support for rendering IEnumerators rather than just collections., MODIFY DefaultRenderer.csDefaultRenderer RenderObject
0,LOG4NET-296,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Patch for .net 4, client profile and a fix for the name resolution bug  ","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-259,3decc7da565e5e28f5fc30377032f5952f362f76,"Log4Net does not create a new tab in Chainsaw I believe the problem is in XmlLayoutSchemaLog4j, and that you need to change ""log4japp"" to ""application"".

According to the Chainsaw tutorial:
Chainsaw automatically looks inside each received LoggingEvent for a special Application property to determine which tab to route an event to. If it cannot find this property, it attempts to use a secondary property usually added via the SocketAppender or SocketHubAppender which identify the remote host of these events. If neither of these are found, Chainsaw routes events to a default ""Unknown"" tab.

Logging events generated internally by chainsaw include the following properties:
<log4j:properties>
    <log4j:data name=""application"" value=""Generator 1""/>
    <log4j:data name=""hostname"" value=""localhost""/>
    <log4j:data name=""log4jid"" value=""2""/>
    <log4j:data name=""some string"" value=""some valueGenerator 1""/>
</log4j:properties>

Logging events generated by XmlLayoutSchemaLog4j include the following properties:
<log4j:properties>
    <log4j:data name=""log4net:UserName"" value=""DOMAIN\username""/>
    <log4j:data name=""log4jid"" value=""281""/>
    <log4j:data name=""log4jmachinename"" value=""machineName""/>
    <log4j:data name=""log4net:HostName"" value=""machineName""/>
    <log4j:data name=""log4japp"" value=""Application.exe""/>
</log4j:properties>

See also: http://www.mail-archive.com/log4j-dev@jakarta.apache.org/msg05361.html

UPDATE: Documentation issue. See comments below.",LOG4NET-228 improved exception handling for getting the computers hostname, MODIFY SystemInfo.csSystemInfo if
1,LOG4NET-88,674ee22c3559786e2f28f0e84e4670d46f72a791,"[PATCH] to AdoNetAppender.cs to support .NET 2.0 connectionStrings configuration section This is a patch for [LOG4NET-78] https://issues.apache.org/jira/browse/LOG4NET-78.  This adds a new ""connectionStringName"" attribute (and corresponding ConnectionStringName) property to the AdoNetAppender class.  This is a reference to a connection string within the <ConnectionStrings> section of an App.config or Web.config file.

The choice of name ""connectionStringName"" is consistent with the naming that Microsoft uses in the various Providers such as SqlMembershipProvider.

I made sure to put this code in between #if NET_2_0 blocks. However, the patch does not include the required change to the log4net.csproj file which needs to reference the System.Configuration.dll (C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.configuration.dll) assembly.  

This is a .NET 2.0 only assembly so I was unsure how to add a conditional compilation element so that the project reference would not break log4net for .NET 1.0 and .NET 1.1.  

If there is a better way to do so, please let me know!",Fix for LOG4NET-88. Added ConnectionStringName and AppSettingsKey properties to make it easier to use connection strings stored in well-known locations., MODIFY AdoNetAppender.csAdoNetAppender ResolveConnectionString AdoNetAppender InitializeDatabaseConnection
1,LOG4NET-301,d78a5f8331dad60de277fecda43205412ccb464a,"Unit tests fail on a clean checkout on .NET 2.0 using NAnt Blocker as it makes validating patches hard if the unit tests fail.

Log of running nant inside the tests directory will be attached.",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-38,e1c9c3b7bb26b3564062859a86b38b793048548a,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
1,LOG4NET-301,09f7293056e8abf36655537318384e9bd0ff5c9e,"Unit tests fail on a clean checkout on .NET 2.0 using NAnt Blocker as it makes validating patches hard if the unit tests fail.

Log of running nant inside the tests directory will be attached.","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-111,0b84492f43c8c769e7453e675f111b56e5263712,Project metadata for projects.apache.org projects.apache.org is a catalog of Apache projects that is generated from project supplied metadata.  This issue requests adding a metadata file to the log4net repository to allow log4net to appear in projects.apache.org alongside log4j and log4cxx.,"Fix for LOG4NET-98.
Updated all source, build and doc files to use new Apache source headers as per http://www.apache.org/legal/src-headers.html", MODIFY NOTICE.txt MODIFY contributing.html MODIFY downloads.html MODIFY history.html MODIFY index.html MODIFY license.html MODIFY building.html MODIFY config-examples.html MODIFY example-apps.html MODIFY faq.html MODIFY features.html MODIFY framework-support.html MODIFY chainsaw.html MODIFY index.html MODIFY configuration.html MODIFY contexts.html MODIFY internals.html MODIFY introduction.html MODIFY plugins.html MODIFY repositories.html MODIFY release-notes.html MODIFY roadmap.html MODIFY support.html MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AsyncAppender.cs MODIFY FastDbAppender.cs MODIFY FireEventAppender.cs MODIFY MessageBoxAppender.cs MODIFY MessageObjectExpanderAppender.cs MODIFY MsmqAppender.cs MODIFY PatternFileAppender.cs MODIFY SimpleSmtpAppender.cs MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY IWmiBoundEvent.cs MODIFY WmiAppender.cs MODIFY WmiInstaller.cs MODIFY WmiLayout.cs MODIFY WmiLoggingEvent.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY TraceLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ForwardingLayout.cs MODIFY LineWrappingLayout.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY NotLogging.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingClient.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingServer.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cs MODIFY Global.asax.cs MODIFY WebForm1.aspx.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY AssemblyVersionInfo.vb MODIFY Global.asax.vb MODIFY WebForm1.aspx.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY EntryPoint.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cpp MODIFY ConsoleApp.cpp MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogImpl.cs MODIFY EventIDLogManager.cs MODIFY IEventIDLog.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY MarshalByRefLogImpl.cs MODIFY MarshalByRefLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ITraceLog.cs MODIFY TraceLogImpl.cs MODIFY TraceLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY log4net-sdk.ndoc MODIFY log4net.build MODIFY log4net.include MODIFY AdoNetAppender.cs MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderCollection.cs MODIFY AppenderSkeleton.cs MODIFY AspNetTraceAppender.cs MODIFY BufferingAppenderSkeleton.cs MODIFY BufferingForwardingAppender.cs MODIFY ColoredConsoleAppender.cs MODIFY ConsoleAppender.cs MODIFY DebugAppender.cs MODIFY EventLogAppender.cs MODIFY FileAppender.cs MODIFY ForwardingAppender.cs MODIFY IAppender.cs MODIFY IBulkAppender.cs MODIFY LocalSyslogAppender.cs MODIFY MemoryAppender.cs MODIFY NetSendAppender.cs MODIFY OutputDebugStringAppender.cs MODIFY RemoteSyslogAppender.cs MODIFY RemotingAppender.cs MODIFY RollingFileAppender.cs MODIFY SmtpAppender.cs MODIFY SmtpPickupDirAppender.cs MODIFY TelnetAppender.cs MODIFY TextWriterAppender.cs MODIFY TraceAppender.cs MODIFY UdpAppender.cs MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cpp MODIFY AssemblyVersionInfo.cs MODIFY AssemblyVersionInfo.js MODIFY AssemblyVersionInfo.vb MODIFY AliasDomainAttribute.cs MODIFY AliasRepositoryAttribute.cs MODIFY BasicConfigurator.cs MODIFY ConfiguratorAttribute.cs MODIFY DOMConfigurator.cs MODIFY DOMConfiguratorAttribute.cs MODIFY DomainAttribute.cs MODIFY Log4NetConfigurationSectionHandler.cs MODIFY PluginAttribute.cs MODIFY RepositoryAttribute.cs MODIFY SecurityContextProviderAttribute.cs MODIFY XmlConfigurator.cs MODIFY XmlConfiguratorAttribute.cs MODIFY CompactRepositorySelector.cs MODIFY DefaultRepositorySelector.cs MODIFY ErrorCode.cs MODIFY ExceptionEvaluator.cs MODIFY IAppenderAttachable.cs MODIFY IErrorHandler.cs MODIFY IFixingRequired.cs MODIFY ILogger.cs MODIFY ILoggerWrapper.cs MODIFY IOptionHandler.cs MODIFY IRepositorySelector.cs MODIFY ITriggeringEventEvaluator.cs MODIFY Level.cs MODIFY LevelCollection.cs MODIFY LevelEvaluator.cs MODIFY LevelMap.cs MODIFY LocationInfo.cs MODIFY LogException.cs MODIFY LogImpl.cs MODIFY LoggerManager.cs MODIFY LoggerWrapperImpl.cs MODIFY LoggingEvent.cs MODIFY SecurityContext.cs MODIFY SecurityContextProvider.cs MODIFY WrapperMap.cs MODIFY AbsoluteTimeDateFormatter.cs MODIFY DateTimeDateFormatter.cs MODIFY IDateFormatter.cs MODIFY Iso8601DateFormatter.cs MODIFY SimpleDateFormatter.cs MODIFY DenyAllFilter.cs MODIFY FilterDecision.cs MODIFY FilterSkeleton.cs MODIFY IFilter.cs MODIFY LevelMatchFilter.cs MODIFY LevelRangeFilter.cs MODIFY LoggerMatchFilter.cs MODIFY MdcFilter.cs MODIFY NdcFilter.cs MODIFY PropertyFilter.cs MODIFY StringMatchFilter.cs MODIFY GlobalContext.cs MODIFY ILog.cs MODIFY ExceptionLayout.cs MODIFY ILayout.cs MODIFY IRawLayout.cs MODIFY Layout2RawLayoutAdapter.cs MODIFY LayoutSkeleton.cs MODIFY AppDomainPatternConverter.cs MODIFY AspNetCachePatternConverter.cs MODIFY AspNetContextPatternConverter.cs MODIFY AspNetPatternConverter.cs MODIFY AspNetRequestPatternConverter.cs MODIFY AspNetSessionPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY ExceptionPatternConverter.cs MODIFY FileLocationPatternConverter.cs MODIFY FullLocationPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LevelPatternConverter.cs MODIFY LineLocationPatternConverter.cs MODIFY LoggerPatternConverter.cs MODIFY MessagePatternConverter.cs MODIFY MethodLocationPatternConverter.cs MODIFY NamedPatternConverter.cs MODIFY NdcPatternConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RelativeTimePatternConverter.cs MODIFY ThreadPatternConverter.cs MODIFY TypeNamePatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PatternLayout.cs MODIFY RawLayoutConverter.cs MODIFY RawPropertyLayout.cs MODIFY RawTimeStampLayout.cs MODIFY RawUtcTimeStampLayout.cs MODIFY SimpleLayout.cs MODIFY XMLLayout.cs MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.cs MODIFY LogManager.cs MODIFY LogicalThreadContext.cs MODIFY MDC.cs MODIFY NDC.cs MODIFY DefaultRenderer.cs MODIFY IObjectRenderer.cs MODIFY RendererMap.cs MODIFY IPlugin.cs MODIFY IPluginFactory.cs MODIFY PluginCollection.cs MODIFY PluginMap.cs MODIFY PluginSkeleton.cs MODIFY RemoteLoggingServerPlugin.cs MODIFY DefaultLoggerFactory.cs MODIFY Hierarchy.cs MODIFY ILoggerFactory.cs MODIFY Logger.cs MODIFY LoggerKey.cs MODIFY ProvisionNode.cs MODIFY RootLogger.cs MODIFY XmlHierarchyConfigurator.cs MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.cs MODIFY ThreadContext.cs MODIFY AppenderAttachedImpl.cs MODIFY CompositeProperties.cs MODIFY ContextPropertiesBase.cs MODIFY CountingQuietTextWriter.cs MODIFY CyclicBuffer.cs MODIFY EmptyCollection.cs MODIFY EmptyDictionary.cs MODIFY FormattingInfo.cs MODIFY GlobalContextProperties.cs MODIFY LevelMapping.cs MODIFY LevelMappingEntry.cs MODIFY LogLog.cs MODIFY LogicalThreadContextProperties.cs MODIFY NativeError.cs MODIFY NullDictionaryEnumerator.cs MODIFY NullEnumerator.cs MODIFY NullSecurityContext.cs MODIFY OnlyOnceErrorHandler.cs MODIFY OptionConverter.cs MODIFY PatternConverter.cs MODIFY PatternParser.cs MODIFY PatternString.cs MODIFY AppDomainPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY EnvironmentPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LiteralPatternConverter.cs MODIFY NewLinePatternConverter.cs MODIFY ProcessIdPatternConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RandomStringPatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PropertiesDictionary.cs MODIFY ProtectCloseTextWriter.cs MODIFY QuietTextWriter.cs MODIFY ReadOnlyPropertiesDictionary.cs MODIFY ReaderWriterLock.cs MODIFY ReusableStringWriter.cs MODIFY SystemInfo.cs MODIFY SystemStringFormat.cs MODIFY TextWriterAdapter.cs MODIFY ThreadContextProperties.cs MODIFY ThreadContextStack.cs MODIFY ThreadContextStacks.cs MODIFY Transform.cs MODIFY BooleanConverter.cs MODIFY ConversionNotSupportedException.cs MODIFY ConverterRegistry.cs MODIFY EncodingConverter.cs MODIFY IConvertFrom.cs MODIFY IConvertTo.cs MODIFY IPAddressConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PatternStringConverter.cs MODIFY TypeConverter.cs MODIFY TypeConverterAttribute.cs MODIFY WindowsSecurityContext.cs MODIFY nant.build MODIFY BufferingAppenderTest.cs MODIFY CountingAppender.cs MODIFY EventLogAppenderTest.cs MODIFY RemotingAppenderTest.cs MODIFY RollingFileAppenderTest.cs MODIFY StringAppender.cs MODIFY AssemblyInfo.cs MODIFY ThreadContextTest.cs MODIFY FixingTest.cs MODIFY ShutdownTest.cs MODIFY StringFormatTest.cs MODIFY Logger.cs MODIFY PatternLayoutTest.cs MODIFY XmlLayoutTest.cs MODIFY CyclicBufferTest.cs MODIFY PropertiesDictionaryTest.cs MODIFY RandomStringPatternConverterTest.cs MODIFY SystemInfoTest.cs MODIFY Utils.cs MODIFY contributing.xml MODIFY downloads.xml MODIFY history.xml MODIFY index.xml MODIFY license.xml MODIFY building.xml MODIFY config-examples.xml MODIFY example-apps.xml MODIFY faq.xml MODIFY features.xml MODIFY framework-support.xml MODIFY chainsaw.xml MODIFY index.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY internals.xml MODIFY introduction.xml MODIFY plugins.xml MODIFY repositories.xml MODIFY release-notes.xml MODIFY roadmap.xml MODIFY project.xml MODIFY site.vsl MODIFY support.xml
0,LOG4NET-494,5f4c6b6c3a61b77f4bffa8e3bd8041fd6fb86068,"ArgumentOutOfRange with SQLite In AdoNetAppender.cs at line 561 :	
param.FormatValue(dbCmd, e);

In SQLite we need to call the Prepare function before FormatValue :
param.Prepare(dbCmd);

If Prepare not called, then SQLite generate an ArgumentOutOfRangeException because the parameters is not defined",LOG4NET-495: added buffering website test for the AdoNetAppender, MODIFY AdoNetAppenderTest.csAdoNetAppenderTest BufferingWebsiteExample AdoNetAppenderTest WebsiteExample
0,LOG4NET-155,a233bcb1bd3b771cf8bdf9c011f639f341d0a4a7,"Add TimeEvaluator Hello,

I'd like to submit this class. I find it handy together with RemotingAppender (or buffering appenders generally) where we don't want to send synchronously, but still want to have some timely feedback from the sites even if there is little logging.

A sample configuration would be:

    <appender name=""RemotingAppender"" type=""log4net.Appender.RemotingAppender"">
      <param name=""Sink"" value=""tcp://localhost:11111/LoggingSink"" />
      <param name=""Lossy"" value=""false"" />
      <param name=""BufferSize"" value=""500"" />
      <param name=""Fix"" value=""Partial"" />
      <evaluator type=""log4net.Core.TimeEvaluator"">
        <threshold value=""60""/>
      </evaluator>
    </appender>

I've taken the existing LevelEvaluator from Nicko Cadell as a template to build this class.

I've tried it and it worked, but haven't done any further testing.

Best regards and thanks for the great works!
Robert.",Fix for LOG4NET-168. Add ReplyTo property to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
1,LOG4NET-154,9948907f69ce50a6a922ce7027b6c9e5098cb21b,"Add a StackTracePatternConverter to display method calls leading up to log message Modify LocationInfo to save StackTrace information and make it available as StackTracePatternConverter to display call stack leading up to the log message:

 log.Debug(""Item Saved"");
 
 [%stackTrace{3}] %message%newline

 [default_aspx.btnSubmit_Click > productController.Save > productService.Save] Item Saved

This will probably be a slow pattern converter on par with other LocationInfo derived pattern converters.",Applied additional patches for LOG4NET-154 to improve functionality of StackTracePatternConverter., ADD StackTraceDetailPatternConverter.csStackTraceDetailPatternConverter GetMethodInformation StackTraceDetailPatternConverter GetMethodParameterNames MODIFY StackTracePatternConverter.csStackTracePatternConverter Convert StackTracePatternConverter GetMethodInformation MODIFY PatternLayout.csPatternLayout PatternLayout MODIFY PatternLayoutTest.csPatternLayoutTest TestStackTracePattern
0,LOG4NET-379,dbb13e771fb1da8ff024ecacfdcc1c74ce2243f4,"NullReferenceException in FileAppender when file is not filled. When I create a FileAppender without a filename and I call ActivateOptions(), a NullReferenceException is thrown. This is because the filename is first trimmed before the check whether the filename is null or not.","LOG4NET-318 add [SecuritySafeCritical] attribute to the Attach method of the RemoteLoggingServerPlugin

According to http://stackoverflow.com/questions/8297419/log4net-doesnt-pass-verification-when-compiling this should fix
the PEVerify issue reported.", MODIFY RemoteLoggingServerPlugin.cs
0,LOG4NET-310,8fa4d71a61c7e6e6d9e8d8adc47a22fceaf8bf37,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Fix race-condition in XmlLayoutBase. LOG4NET-76, MODIFY XMLLayoutBase.csXmlLayoutBase Format
0,LOG4NET-376,cca252c3090b1e8091d61ffdd0e97835146db31a,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
0,LOG4NET-311,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-76,09f7293056e8abf36655537318384e9bd0ff5c9e,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-158,289a3f2a030c75e6fb0912f2c0c22021848d587c,"XMLConfigurator.ConfigureAndWatch() leaks resources if called multiple times If XMLConfigurator.ConfigureAndWatch() is called multiple times within an AppDomain, each time it is called it leaks a Win32 file  handle (possibly from a FileSystemWatcher object not being disposed?) to the folder containing the previous configuration file it was watching.

Desired behavior would be to release the handle to the folder containing the previous configuration file.",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
0,LOG4NET-148,a06839a335c7f13c865ee4bfb30982f67a2a63b9,"ThreadContext uses LocalDataStore to store ThreadSpecific data instead should be using  [ThreadStatic] variables. According to this article (http://blogs.msdn.com/junfeng/archive/2005/12/31/508423.aspx) and production issues encountered: using LocalDataStore is not a scalable approach for any web server that gets a significant amount of traffic.

The ThreadContext object should be modified to use [ThreadStatic] variables.

From the article:
The Whidbey RTM implementation of Thread.GetData/Thread.SetData has several scalability issues caused by global locks being taken. The appdomain-global lock taken in LocalDataStore.SetData is one of them. There is another global lock taken in ThreadNative::GetDomainLocalStore that is even worse since it is process-global.

The best workaround is to use [ThreadStatic] variables instead of Thread.GetData/Thread.SetData",LOG4NET-354 added a configuration option that allows to configure the subject and body encoding, MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-259,b13c1fdd8d87877cdcfa6eb8c01555bf15d267b9,"Log4Net does not create a new tab in Chainsaw I believe the problem is in XmlLayoutSchemaLog4j, and that you need to change ""log4japp"" to ""application"".

According to the Chainsaw tutorial:
Chainsaw automatically looks inside each received LoggingEvent for a special Application property to determine which tab to route an event to. If it cannot find this property, it attempts to use a secondary property usually added via the SocketAppender or SocketHubAppender which identify the remote host of these events. If neither of these are found, Chainsaw routes events to a default ""Unknown"" tab.

Logging events generated internally by chainsaw include the following properties:
<log4j:properties>
    <log4j:data name=""application"" value=""Generator 1""/>
    <log4j:data name=""hostname"" value=""localhost""/>
    <log4j:data name=""log4jid"" value=""2""/>
    <log4j:data name=""some string"" value=""some valueGenerator 1""/>
</log4j:properties>

Logging events generated by XmlLayoutSchemaLog4j include the following properties:
<log4j:properties>
    <log4j:data name=""log4net:UserName"" value=""DOMAIN\username""/>
    <log4j:data name=""log4jid"" value=""281""/>
    <log4j:data name=""log4jmachinename"" value=""machineName""/>
    <log4j:data name=""log4net:HostName"" value=""machineName""/>
    <log4j:data name=""log4japp"" value=""Application.exe""/>
</log4j:properties>

See also: http://www.mail-archive.com/log4j-dev@jakarta.apache.org/msg05361.html

UPDATE: Documentation issue. See comments below.",LOG4NET-226 added catch ObjectDisposedException clause as suggested by Johannes Krackowizer and confirmed by Ron Grabowski, MODIFY LoggingEvent.csLoggingEvent if
0,LOG4NET-167,b9c24915eadbbb665778ef42524fd74d99eb969a,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-129,f51c60d914ba1ffb6ed34ae1ed275913572c4131,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",Point to existing FAQ entry.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions
0,LOG4NET-215,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-344,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
1,LOG4NET-460,3fb61ce794a7fc1fdbfc1e21adff29b300316d2d,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-460 make Logger's virtual properties work when overridden, MODIFY Logger.csLogger for Logger IsEnabledFor Logger CallAppenders Logger for
1,LOG4NET-164,10eb59431deedcdaedc9d9f13684cf1ba9e67e03,"using a named mutex for file appenders About logging to the same file from 2 or more instances of an application.
As opposed to a minimallock which makes it still possible for 2 application instances to interfere. Why not use a named mutex so that the logging will wait for the lock to be released from another instance.
","MutexLock => InterProcessLock.  Document it, discourage its use.  LOG4NET-164", MODIFY FileAppender.cs MODIFY config-examples.xml MODIFY faq.xml MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestInterProcessLockUnlocks RollingFileAppenderTest TestInterProcessLockRecovers RollingFileAppenderTest TestMutexLockFails RollingFileAppenderTest TestInterProcessLockFails RollingFileAppenderTest TestMutexLockUnlocks
0,LOG4NET-484,b0925ead3f58f007f280268c4dc0a97a8c750081,"System.ObjectDisposedException with FileAppender+InterProcessLock Configure lockingModel for InterProcessLock with RollingFileAppender.

{code:xml|title=app.config}
<?xml version=""1.0"" encoding=""utf-8""?>
<configuration>
	<configSections>
		<section name=""log4net"" type=""log4net.Config.Log4NetConfigurationSectionHandler, log4net"" />
	</configSections>
	<log4net>
		<appender name=""RollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file type=""log4net.Util.PatternString"" value=""test.log"" />
			<encoding value=""utf-8"" />
			<appendToFile value=""true""/>
			<rollingStyle value=""Size""/>
			<maxSizeRollBackups value=""10""/>
			<maximumFileSize value=""1""/>
			<staticLogFileName value=""true""/>
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%d [%t] %-5p %c{2} - %m%n""/>
			</layout>
			<lockingModel type=""log4net.Appender.FileAppender+InterProcessLock"" />
		</appender>
		<root>
			<level value=""INFO""/>
			<appender-ref ref=""RollingFileAppender""/>
		</root>
	</log4net>
</configuration>
{code}

Make a log with roll :

{code:title=Program.cs}
using log4net;

namespace ConsoleApplication131
{
	class Program
	{
		static void Main(string[] args)
		{
			var log = LogManager.GetLogger(typeof(Program));
			log.Info(""A"");
			log.Info(""A"");
		}
	}
}
{code}

You get this one roll:

{noformat}
log4net:ERROR Failed to Close appender [RollingFileAppender]
System.ObjectDisposedException: Safe handle has been closed
   at System.Threading.WaitHandle.WaitOneNative(SafeWaitHandle waitHandle, UInt32 millisecondsTimeout, Boolean hasThreadAffinity, Boolean exitContext)
   at System.Threading.WaitHandle.WaitOne(Int64 timeout, Boolean exitContext)
   at log4net.Appender.FileAppender.InterProcessLock.AcquireLock()
   at log4net.Appender.FileAppender.LockingStream.AcquireLock()
   at log4net.Appender.FileAppender.WriteFooter()
   at log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter()
   at log4net.Appender.TextWriterAppender.Reset()
   at log4net.Appender.FileAppender.Reset()
   at log4net.Appender.TextWriterAppender.OnClose()
   at log4net.Appender.AppenderSkeleton.Close()
   at log4net.Util.AppenderAttachedImpl.RemoveAllAppenders()
{noformat}",LOG4NET-461: fix for ancient .NET frameworks, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
0,LOG4NET-215,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-399,0119c40a291be35b13f05c981bd6463e7a5516fc,"Does not build for Compact Framework 2.0 NAnt 0.92 (Build 0.92.4543.0; release; 6/9/2012)
Copyright (C) 2001-2012 Gerry Shaw
http://nant.sourceforge.net

[loadtasks] Scanning directory ""D:\05-Tools\log4net-1.2.12\extensions\common\neutral"" for extension assemblies.
[loadtasks] Scanning assembly ""NAnt.CompressionTasks"" for extensions.
[loadtasks] Creating TaskBuilder for GUnzip
[loadtasks] Adding task 'gunzip' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.GUnzip
[loadtasks] Creating TaskBuilder for TarTask
[loadtasks] Adding task 'tar' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.TarTask
[loadtasks] Creating TaskBuilder for UnTarTask
[loadtasks] Adding task 'untar' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.UnTarTask
[loadtasks] Creating TaskBuilder for UnZipTask
[loadtasks] Adding task 'unzip' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.UnZipTask
[loadtasks] Creating TaskBuilder for ZipTask
[loadtasks] Adding task 'zip' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.ZipTask
[loadtasks] Scanning assembly ""NAnt.DotNetTasks"" for extensions.
[loadtasks] Found method GetResourceCulture.
[loadtasks] Creating TaskBuilder for AssemblyInfoTask
[loadtasks] Adding task 'asminfo' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.AssemblyInfoTask
[loadtasks] Creating TaskBuilder for AssemblyLinkerTask
[loadtasks] Adding task 'al' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.AssemblyLinkerTask
[loadtasks] Creating TaskBuilder for CscTask
[loadtasks] Adding task 'csc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.CscTask
[loadtasks] Creating TaskBuilder for DelaySignTask
[loadtasks] Adding task 'delay-sign' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.DelaySignTask
[loadtasks] Creating TaskBuilder for IlasmTask
[loadtasks] Adding task 'ilasm' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.IlasmTask
[loadtasks] Creating TaskBuilder for JscTask
[loadtasks] Adding task 'jsc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.JscTask
[loadtasks] Creating TaskBuilder for LicenseTask
[loadtasks] Adding task 'license' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.LicenseTask
[loadtasks] Creating TaskBuilder for NDocTask
[loadtasks] Adding task 'ndoc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.NDocTask
[loadtasks] Creating TaskBuilder for RegsvcsTask
[loadtasks] Adding task 'regsvcs' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.RegsvcsTask
[loadtasks] Creating TaskBuilder for ResGenTask
[loadtasks] Adding task 'resgen' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.ResGenTask
[loadtasks] Creating TaskBuilder for ScriptTask
[loadtasks] Adding task 'script' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.ScriptTask
[loadtasks] Creating TaskBuilder for VbcTask
[loadtasks] Adding task 'vbc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.VbcTask
[loadtasks] Creating TaskBuilder for VjcTask
[loadtasks] Adding task 'vjc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.VjcTask
[loadtasks] Scanning assembly ""NAnt.NUnit1Tasks"" for extensions.
[loadtasks] Creating TaskBuilder for NUnitTask
[loadtasks] Adding task 'nunit' from D:\05-Tools\nant-0.92\bin\NAnt.NUnit1Tasks.dll:NAnt.NUnit1.Tasks.NUnitTask
[loadtasks] Scanning assembly ""NAnt.NUnit2Tasks"" for extensions.
[loadtasks] Creating TaskBuilder for NUnit2Task
[loadtasks] Adding task 'nunit2' from D:\05-Tools\nant-0.92\bin\NAnt.NUnit2Tasks.dll:NAnt.NUnit2.Tasks.NUnit2Task
[loadtasks] Scanning assembly ""NAnt.SourceControlTasks"" for extensions.
[loadtasks] Creating TaskBuilder for ChangeLogTask
[loadtasks] Adding task 'cvs-changelog' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.ChangeLogTask
[loadtasks] Creating TaskBuilder for CheckoutTask
[loadtasks] Adding task 'cvs-checkout' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.CheckoutTask
[loadtasks] Creating TaskBuilder for CvsPass
[loadtasks] Adding task 'cvs-pass' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.CvsPass
[loadtasks] Creating TaskBuilder for CvsTask
[loadtasks] Adding task 'cvs' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.CvsTask
[loadtasks] Creating TaskBuilder for ExportTask
[loadtasks] Adding task 'cvs-export' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.ExportTask
[loadtasks] Creating TaskBuilder for RTagTask
[loadtasks] Adding task 'cvs-rtag' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.RTagTask
[loadtasks] Creating TaskBuilder for TagTask
[loadtasks] Adding task 'cvs-tag' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.TagTask
[loadtasks] Creating TaskBuilder for UpdateTask
[loadtasks] Adding task 'cvs-update' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.UpdateTask
[loadtasks] Scanning assembly ""NAnt.VisualCppTasks"" for extensions.
[loadtasks] Found method QuoteArgumentValue.
[loadtasks] Found method GetObjOutputFile.
[loadtasks] Found method QuoteArgumentValue.
[loadtasks] Found method ProcessTrailingBackslash.
[loadtasks] Found method DuplicateTrailingBackslash.
[loadtasks] Found method FixTrailingBackslash.
[loadtasks] Found method CleanTrailingBackslash.
[loadtasks] Found method QuoteArgumentValue.
[loadtasks] Creating TaskBuilder for ClTask
[loadtasks] Adding task 'cl' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.ClTask
[loadtasks] Creating TaskBuilder for LibTask
[loadtasks] Adding task 'lib' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.LibTask
[loadtasks] Creating TaskBuilder for LinkTask
[loadtasks] Adding task 'link' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.LinkTask
[loadtasks] Creating TaskBuilder for McTask
[loadtasks] Adding task 'mc' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.McTask
[loadtasks] Creating TaskBuilder for MidlTask
[loadtasks] Adding task 'midl' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.MidlTask
[loadtasks] Creating TaskBuilder for RcTask
[loadtasks] Adding task 'rc' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.RcTask
[loadtasks] Scanning assembly ""NAnt.VSNetTasks"" for extensions.
[loadtasks] Found method GetRelatedFiles.
[loadtasks] Found method op_Equality.
[loadtasks] Found method op_Inequality.
[loadtasks] Found method Parse.
[loadtasks] Found method IsEnterpriseTemplateProject.
[loadtasks] Found method LoadGuid.
[loadtasks] Found method IsSupported.
[loadtasks] Found method IsSupported.
[loadtasks] Found method GetProjectGuid.
[loadtasks] Found method IsSupported.
[loadtasks] Found method CreateCLArgumentMap.
[loadtasks] Found method CreateLinkerArgumentMap.
[loadtasks] Found method CreateMidlArgumentMap.
[loadtasks] Found method LoadGuid.
[loadtasks] Found method IsSupported.
[loadtasks] Found method GetFileContentsStatic.
[loadtasks] Creating TaskBuilder for SolutionTask
[loadtasks] Adding task 'solution' from D:\05-Tools\nant-0.92\bin\NAnt.VSNetTasks.dll:NAnt.VSNet.Tasks.SolutionTask
[loadtasks] Scanning assembly ""NAnt.Win32Tasks"" for extensions.
[loadtasks] Found method ExtractTypeLibPath.
[loadtasks] Creating TaskBuilder for AxImpTask
[loadtasks] Adding task 'aximp' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.AxImpTask
[loadtasks] Creating TaskBuilder for LocateSdkTask
[loadtasks] Adding task 'locatesdk' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.LocateSdkTask
[loadtasks] Creating TaskBuilder for MonoRegistryTask
[loadtasks] Adding task 'monoregistry' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.MonoRegistryTask
[loadtasks] Creating TaskBuilder for ReadRegistryTask
[loadtasks] Adding task 'readregistry' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.ReadRegistryTask
[loadtasks] Creating TaskBuilder for RegAsmTask
[loadtasks] Adding task 'regasm' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.RegAsmTask
[loadtasks] Creating TaskBuilder for TlbExpTask
[loadtasks] Adding task 'tlbexp' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.TlbExpTask
[loadtasks] Creating TaskBuilder for TlbImpTask
[loadtasks] Adding task 'tlbimp' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.TlbImpTask
[loadtasks] Scanning assembly ""NAnt.Core"" for extensions.
[loadtasks] Found method InitializeBuildElement.
[loadtasks] Found method GetFullName.
[loadtasks] Found method GetName.
[loadtasks] Found method GetLocation.
[loadtasks] Found method GetCodeBase.
[loadtasks] Found method GetEscapedCodeBase.
[loadtasks] Found method GetFullName.
[loadtasks] Found method GetName.
[loadtasks] Found method GetVersion.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method ToInt.
[loadtasks] Found method ToDouble.
[loadtasks] Found method ConvertToString.
[loadtasks] Found method ToDateTime.
[loadtasks] Found method ToBoolean.
[loadtasks] Found method Now.
[loadtasks] Found method GetYear.
[loadtasks] Found method GetMonth.
[loadtasks] Found method GetDay.
[loadtasks] Found method GetHour.
[loadtasks] Found method GetMinute.
[loadtasks] Found method GetSecond.
[loadtasks] Found method GetMillisecond.
[loadtasks] Found method GetTicks.
[loadtasks] Found method GetDayOfWeek.
[loadtasks] Found method GetDayOfYear.
[loadtasks] Found method GetDaysInMonth.
[loadtasks] Found method IsLeapYear.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method ToString.
[loadtasks] Found method GetCurrentDirectory.
[loadtasks] Found method GetHostName.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method GetFolderPath.
[loadtasks] Found method GetMachineName.
[loadtasks] Found method GetOperatingSystem.
[loadtasks] Found method GetUserName.
[loadtasks] Found method GetVariable.
[loadtasks] Found method VariableExists.
[loadtasks] Found method GetVersion.
[loadtasks] Found method NewLine.
[loadtasks] Found method GetCompanyName.
[loadtasks] Found method GetFileVersion.
[loadtasks] Found method GetProductName.
[loadtasks] Found method GetProductVersion.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method Round.
[loadtasks] Found method Floor.
[loadtasks] Found method Ceiling.
[loadtasks] Found method Abs.
[loadtasks] Found method IsWin32.
[loadtasks] Found method IsWindows.
[loadtasks] Found method IsUnix.
[loadtasks] Found method GetPlatform.
[loadtasks] Found method GetVersion.
[loadtasks] Found method ToString.
[loadtasks] Found method Combine.
[loadtasks] Found method ChangeExtension.
[loadtasks] Found method GetDirectoryName.
[loadtasks] Found method GetExtension.
[loadtasks] Found method GetFileName.
[loadtasks] Found method GetFileNameWithoutExtension.
[loadtasks] Found method GetPathRoot.
[loadtasks] Found method GetTempFileName.
[loadtasks] Found method GetTempPath.
[loadtasks] Found method HasExtension.
[loadtasks] Found method IsPathRooted.
[loadtasks] Found method GetLength.
[loadtasks] Found method Substring.
[loadtasks] Found method StartsWith.
[loadtasks] Found method EndsWith.
[loadtasks] Found method ToLower.
[loadtasks] Found method ToUpper.
[loadtasks] Found method Replace.
[loadtasks] Found method Contains.
[loadtasks] Found method IndexOf.
[loadtasks] Found method LastIndexOf.
[loadtasks] Found method PadLeft.
[loadtasks] Found method PadRight.
[loadtasks] Found method Trim.
[loadtasks] Found method TrimStart.
[loadtasks] Found method TrimEnd.
[loadtasks] Found method GetTotalDays.
[loadtasks] Found method GetTotalHours.
[loadtasks] Found method GetTotalMinutes.
[loadtasks] Found method GetTotalSeconds.
[loadtasks] Found method GetTotalMilliseconds.
[loadtasks] Found method GetDays.
[loadtasks] Found method GetHours.
[loadtasks] Found method GetMinutes.
[loadtasks] Found method GetSeconds.
[loadtasks] Found method GetMilliseconds.
[loadtasks] Found method GetTicks.
[loadtasks] Found method FromDays.
[loadtasks] Found method FromHours.
[loadtasks] Found method FromMinutes.
[loadtasks] Found method FromSeconds.
[loadtasks] Found method FromMilliseconds.
[loadtasks] Found method FromTicks.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method GetMajor.
[loadtasks] Found method GetMinor.
[loadtasks] Found method GetBuild.
[loadtasks] Found method GetRevision.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method WriteSchema.
[loadtasks] Found method FindMoreRecentLastWriteTime.
[loadtasks] Found method FindMoreRecentLastWriteTime.
[loadtasks] Found method TranslatePath.
[loadtasks] Found method CopyFile.
[loadtasks] Found method MoveFile.
[loadtasks] Found method ReadFile.
[loadtasks] Found method GetTempDirectory.
[loadtasks] Found method CombinePaths.
[loadtasks] Found method GetFullPath.
[loadtasks] Found method GetHomeDirectory.
[loadtasks] Found method ResolveFile.
[loadtasks] Found method GetTypeFromString.
[loadtasks] Found method RegisterSharedAssembly.
[loadtasks] Found method GetString.
[loadtasks] Found method GetString.
[loadtasks] Found method GetString.
[loadtasks] Found method EndsWith.
[loadtasks] Found method IsNullOrEmpty.
[loadtasks] Found method ConvertEmptyToNull.
[loadtasks] Found method ConvertNullToEmpty.
[loadtasks] Found method Join.
[loadtasks] Found method Clone.
[loadtasks] Found method Main.
[loadtasks] Found method ShowProjectHelp.
[loadtasks] Found method GetBuildFileName.
[loadtasks] Found method CreateLogger.
[loadtasks] Found method CreateListener.
[loadtasks] Found method Synchronized.
[loadtasks] Found method Synchronized.
[loadtasks] Found method IsVolumeCaseSensitive.
[loadtasks] Found method get_IsWindows.
[loadtasks] Found method get_TaskBuilders.
[loadtasks] Found method get_DataTypeBuilders.
[loadtasks] Found method get_FilterBuilders.
[loadtasks] Found method ScanAssembly.
[loadtasks] Found method ScanAssembly.
[loadtasks] Found method ScanDir.
[loadtasks] Found method CreateTask.
[loadtasks] Found method CreateFilter.
[loadtasks] Found method CreateDataType.
[loadtasks] Creating FilterBuilder for ""ExpandProperties"".
[loadtasks] Adding filter ""expandproperties"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.ExpandProperties.
[loadtasks] Creating FilterBuilder for ""ReplaceString"".
[loadtasks] Adding filter ""replacestring"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.ReplaceString.
[loadtasks] Creating FilterBuilder for ""ReplaceTokens"".
[loadtasks] Adding filter ""replacetokens"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.ReplaceTokens.
[loadtasks] Creating FilterBuilder for ""TabsToSpaces"".
[loadtasks] Adding filter ""tabstospaces"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.TabsToSpaces.
[loadtasks] Creating TaskBuilder for AttribTask
[loadtasks] Adding task 'attrib' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.AttribTask
[loadtasks] Creating TaskBuilder for AvailableTask
[loadtasks] Adding task 'available' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.AvailableTask
[loadtasks] Creating TaskBuilder for CallTask
[loadtasks] Adding task 'call' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.CallTask
[loadtasks] Creating TaskBuilder for ChooseTask
[loadtasks] Adding task 'choose' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.ChooseTask
[loadtasks] Creating TaskBuilder for CopyTask
[loadtasks] Adding task 'copy' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.CopyTask
[loadtasks] Creating TaskBuilder for DeleteTask
[loadtasks] Adding task 'delete' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.DeleteTask
[loadtasks] Creating TaskBuilder for DescriptionTask
[loadtasks] Adding task 'description' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.DescriptionTask
[loadtasks] Creating TaskBuilder for EchoTask
[loadtasks] Adding task 'echo' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.EchoTask
[loadtasks] Creating TaskBuilder for ExecTask
[loadtasks] Adding task 'exec' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.ExecTask
[loadtasks] Creating TaskBuilder for FailTask
[loadtasks] Adding task 'fail' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.FailTask
[loadtasks] Creating TaskBuilder for GetTask
[loadtasks] Adding task 'get' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.GetTask
[loadtasks] Creating TaskBuilder for IfTask
[loadtasks] Adding task 'if' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.IfTask
[loadtasks] Creating TaskBuilder for IfNotTask
[loadtasks] Adding task 'ifnot' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.IfNotTask
[loadtasks] Creating TaskBuilder for IncludeTask
[loadtasks] Adding task 'include' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.IncludeTask
[loadtasks] Creating TaskBuilder for LoadFileTask
[loadtasks] Adding task 'loadfile' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.LoadFileTask
[loadtasks] Creating TaskBuilder for LoadTasksTask
[loadtasks] Adding task 'loadtasks' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.LoadTasksTask
[loadtasks] Creating TaskBuilder for LoopTask
[loadtasks] Adding task 'foreach' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.LoopTask
[loadtasks] Creating TaskBuilder for MailTask
[loadtasks] Adding task 'mail' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.MailTask
[loadtasks] Creating TaskBuilder for MkDirTask
[loadtasks] Adding task 'mkdir' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.MkDirTask
[loadtasks] Creating TaskBuilder for MoveTask
[loadtasks] Adding task 'move' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.MoveTask
[loadtasks] Creating TaskBuilder for NAntSchemaTask
[loadtasks] Adding task 'nantschema' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.NAntSchemaTask
[loadtasks] Creating TaskBuilder for NAntTask
[loadtasks] Adding task 'nant' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.NAntTask
[loadtasks] Creating TaskBuilder for PropertyTask
[loadtasks] Adding task 'property' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.PropertyTask
[loadtasks] Creating TaskBuilder for RegexTask
[loadtasks] Adding task 'regex' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.RegexTask
[loadtasks] Creating TaskBuilder for SetEnvTask
[loadtasks] Adding task 'setenv' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.SetEnvTask
[loadtasks] Creating TaskBuilder for SleepTask
[loadtasks] Adding task 'sleep' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.SleepTask
[loadtasks] Creating TaskBuilder for StyleTask
[loadtasks] Adding task 'style' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.StyleTask
[loadtasks] Creating TaskBuilder for SysInfoTask
[loadtasks] Adding task 'sysinfo' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.SysInfoTask
[loadtasks] Creating TaskBuilder for TouchTask
[loadtasks] Adding task 'touch' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.TouchTask
[loadtasks] Creating TaskBuilder for TryCatchTask
[loadtasks] Adding task 'trycatch' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.TryCatchTask
[loadtasks] Creating TaskBuilder for TStampTask
[loadtasks] Adding task 'tstamp' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.TStampTask
[loadtasks] Creating TaskBuilder for UpToDateTask
[loadtasks] Adding task 'uptodate' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.UpToDateTask
[loadtasks] Creating TaskBuilder for XmlPeekTask
[loadtasks] Adding task 'xmlpeek' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.XmlPeekTask
[loadtasks] Creating TaskBuilder for XmlPokeTask
[loadtasks] Adding task 'xmlpoke' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.XmlPokeTask
[loadtasks] Scanning assembly ""NAnt.MSNetTasks"" for extensions.
[loadtasks] Creating TaskBuilder for IldasmTask
[loadtasks] Adding task 'ildasm' from D:\05-Tools\nant-0.92\bin\NAnt.MSNetTasks.dll:NAnt.MSNet.Tasks.IldasmTask
[loadtasks] Creating TaskBuilder for ServiceControllerTask
[loadtasks] Adding task 'servicecontroller' from D:\05-Tools\nant-0.92\bin\NAnt.MSNetTasks.dll:NAnt.MSNet.Tasks.ServiceControllerTask
[loadtasks] Scanning assembly ""NAnt.MSBuild"" for extensions.
Buildfile: file:///D:/05-Tools/log4net-1.2.12/log4net.build
Target framework: Microsoft .NET Framework 4.0
Base Directory: D:\05-Tools\log4net-1.2.12.
Target(s) specified: compile-netcf-2.0 

  [include] Including file D:\05-Tools\log4net-1.2.12\log4net.include.
Build sequence for target `set-build-configuration' is check-current-build-config, set-build-configuration
Complete build sequence is check-current-build-config, set-build-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration

check-current-build-config:


set-build-configuration:

Build sequence for target `set-debug-build-configuration' is set-debug-build-configuration
Complete build sequence is set-debug-build-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, check-current-build-config, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-build-configuration-flags, set-framework-configuration
Build sequence for target `set-debug-build-configuration' is set-debug-build-configuration
Complete build sequence is set-debug-build-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, check-current-build-config, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-build-configuration-flags, set-framework-configuration

set-debug-build-configuration:

Build sequence for target `set-build-configuration-flags' is check-current-build-config, set-build-configuration-flags
Complete build sequence is check-current-build-config, set-build-configuration-flags, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-framework-configuration
Build sequence for target `set-build-configuration-flags' is check-current-build-config, set-build-configuration-flags
Complete build sequence is check-current-build-config, set-build-configuration-flags, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-framework-configuration

check-current-build-config:


set-build-configuration-flags:

Build sequence for target `set-framework-configuration' is check-current-build-config, set-framework-configuration
Complete build sequence is check-current-build-config, set-framework-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags

check-current-build-config:


set-framework-configuration:

Build sequence for target `set-net-4.0-runtime-configuration' is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration
Complete build sequence is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration
Build sequence for target `set-net-4.0-runtime-configuration' is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration
Complete build sequence is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration

check-bin-dir:


check-doc-dir:


check-sdkdoc-dir:


check-sdkdoc-debug:


check-current-build-config:


check-build-debug:


check-build-defines:


set-net-4.0-runtime-configuration:

Build sequence for target `compile-netcf-2.0' is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-netcf-2.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-2.0
Complete build sequence is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-netcf-2.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-2.0, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, set-netcf-1.0-runtime-configuration, compile-netcf-1.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration

set-netcf-2.0-runtime-configuration:

 [property] Target framework changed to ""Microsoft .NET Compact Framework 2.0"".

check-log4net-basedir:


check-current-bin-dir:


clean-current-bin-dir:

     [echo] Cleaning the bin/netcf/2.0/debug binaries directory.
   [delete] Deleting directory 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug'.
    [mkdir] Creating directory 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug'.

compile-netcf-2.0:

      [csc] Output file 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.dll' does not exist, rebuilding.
      [csc] Compiling 223 files to 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.dll'.
      [csc] Contents of C:\Users\dajones\AppData\Local\Temp\tmp28D5.tmp.
      [csc] /fullpaths
      [csc] ""/doc:D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.xml""
      [csc] /debug
      [csc] ""/define:DEBUG""
      [csc] ""/define:TRACE""
      [csc] /nostdlib
      [csc] /nologo
      [csc] ""/target:library""
      [csc] ""/define:DEBUG,TRACE,NETCF,NETCF_2_0""
      [csc] ""/out:D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.dll""
      [csc] /warnaserror
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\mscorlib.dll""
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\System.dll""
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\System.Data.dll""
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\System.Xml.dll""
      [csc] ""/resource:D:\05-Tools\log4net-1.2.12\LICENSE,LICENSE""
      [csc] ""/resource:D:\05-Tools\log4net-1.2.12\NOTICE,NOTICE""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AdoNetAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AnsiColorTerminalAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AppenderCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AppenderSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AspNetTraceAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\BufferingAppenderSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\BufferingForwardingAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ColoredConsoleAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ConsoleAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\DebugAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\EventLogAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\FileAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ForwardingAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\IAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\IBulkAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\LocalSyslogAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ManagedColoredConsoleAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\MemoryAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\NetSendAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\OutputDebugStringAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\RemoteSyslogAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\RemotingAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\RollingFileAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\SmtpAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\SmtpPickupDirAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\TelnetAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\TextWriterAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\TraceAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\UdpAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\AliasDomainAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\AliasRepositoryAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\BasicConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\ConfiguratorAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\DomainAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\DOMConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\DOMConfiguratorAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\Log4NetConfigurationSectionHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\PluginAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\RepositoryAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\SecurityContextProviderAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\XmlConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\XmlConfiguratorAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\CompactRepositorySelector.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\DefaultRepositorySelector.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ErrorCode.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ExceptionEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IAppenderAttachable.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IErrorHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IFixingRequired.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ILogger.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ILoggerWrapper.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IOptionHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IRepositorySelector.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ITriggeringEventEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\Level.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LevelCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LevelEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LevelMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LocationInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LogException.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LoggerManager.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LoggerWrapperImpl.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LoggingEvent.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LogImpl.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\MethodItem.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\SecurityContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\SecurityContextProvider.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\StackFrameItem.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\TimeEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\WrapperMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\AbsoluteTimeDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\DateTimeDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\IDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\Iso8601DateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\SimpleDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\DenyAllFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\FilterDecision.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\FilterSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\IFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\LevelMatchFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\LevelRangeFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\LoggerMatchFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\MdcFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\NdcFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\PropertyFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\StringMatchFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AppDomainPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetCachePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetContextPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetRequestPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetSessionPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\DatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\ExceptionPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\FileLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\FullLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\IdentityPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\LevelPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\LineLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\LoggerPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\MessagePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\MethodLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\NamedPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\NdcPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\PatternLayoutConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\PropertyPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\RelativeTimePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\StackTraceDetailPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\StackTracePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\ThreadPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\TypeNamePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\UserNamePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\UtcDatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\DynamicPatternLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\ExceptionLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\ILayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\IRawLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Layout2RawLayoutAdapter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\LayoutSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\PatternLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawLayoutConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawPropertyLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawTimeStampLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawUtcTimeStampLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\SimpleLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\XMLLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\XMLLayoutBase.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\XmlLayoutSchemaLog4j.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ObjectRenderer\DefaultRenderer.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ObjectRenderer\IObjectRenderer.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ObjectRenderer\RendererMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\IPlugin.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\IPluginFactory.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\PluginCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\PluginMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\PluginSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\RemoteLoggingServerPlugin.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\DefaultLoggerFactory.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\Hierarchy.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\ILoggerFactory.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\Logger.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\LoggerKey.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\ProvisionNode.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\RootLogger.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\ConfigurationChangedEventArgs.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\IBasicRepositoryConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\ILoggerRepository.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\IXmlRepositoryConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\LoggerRepositorySkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\AppDomainPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\DatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\EnvironmentFolderPathPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\EnvironmentPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\IdentityPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\LiteralPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\NewLinePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\ProcessIdPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\PropertyPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\RandomStringPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\UserNamePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\UtcDatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\BooleanConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\ConversionNotSupportedException.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\ConverterRegistry.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\EncodingConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\IConvertFrom.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\IConvertTo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\IPAddressConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\PatternLayoutConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\PatternStringConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\TypeConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\TypeConverterAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\AppenderAttachedImpl.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\CompositeProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ContextPropertiesBase.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ConverterInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\CountingQuietTextWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\CyclicBuffer.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\EmptyCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\EmptyDictionary.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\FormattingInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\GlobalContextProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ILogExtensions.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LevelMapping.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LevelMappingEntry.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LogicalThreadContextProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LogLog.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NativeError.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NullDictionaryEnumerator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NullEnumerator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NullSecurityContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\OnlyOnceErrorHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\OptionConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternParser.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternString.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PropertiesDictionary.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PropertyEntry.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ProtectCloseTextWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\QuietTextWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ReaderWriterLock.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ReadOnlyPropertiesDictionary.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ReusableStringWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\SystemInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\SystemStringFormat.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TextWriterAdapter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ThreadContextProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ThreadContextStack.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ThreadContextStacks.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\Transform.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\WindowsSecurityContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\AssemblyInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\AssemblyVersionInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\GeneratedAssemblyInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\GlobalContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ILog.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Log4netAssemblyInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\LogicalThreadContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\LogManager.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\MDC.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\NDC.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ThreadContext.cs""
      [csc] 
      [csc] Starting 'C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe (@""C:\Users\dajones\AppData\Local\Temp\tmp28D5.tmp"" /noconfig)' in 'D:\05-Tools\log4net-1.2.12'
      [csc] d:\05-Tools\log4net-1.2.12\src\Core\StackFrameItem.cs(44,31): error CS0246: The type or namespace name 'StackFrame' could not be found (are you missing a using directive or an assembly reference?)
      [csc] d:\05-Tools\log4net-1.2.12\src\Util\ThreadContextProperties.cs(41,4): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?)

BUILD FAILED

D:\05-Tools\log4net-1.2.12\log4net.build(413,6):
External Program Failed: C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe (return code was 1):
NAnt.Core.BuildException: D:\05-Tools\log4net-1.2.12\log4net.build(413,6):
External Program Failed: C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe (return code was 1)
   at NAnt.Core.Tasks.ExternalProgramBase.ExecuteTask()
   at NAnt.DotNet.Tasks.CompilerBase.ExecuteTask()
   at NAnt.Core.Task.Execute()
   at NAnt.Core.Target.Execute()
   at NAnt.Core.Project.Execute(String targetName, Boolean forceDependencies)
   at NAnt.Core.Project.Execute()
   at NAnt.Core.Project.Run()

Total time: 0.5 seconds.

",LOG4NET-394 added try/catch clauses in the ILogExtensions, MODIFY ILogExtensions.csILogExtensions DebugFormatExt ILogExtensions FatalFormatExt ILogExtensions DebugExt ILogExtensions DebugExt ILogExtensions WarnFormatExt ILogExtensions InfoExt ILogExtensions ErrorExt ILogExtensions ErrorExt ILogExtensions WarnExt ILogExtensions ErrorFormatExt ILogExtensions WarnExt ILogExtensions WarnExt ILogExtensions DebugFormatExt ILogExtensions InfoFormatExt ILogExtensions WarnFormatExt ILogExtensions ErrorExt ILogExtensions ErrorFormatExt ILogExtensions FatalExt ILogExtensions FatalFormatExt ILogExtensions InfoFormatExt ILogExtensions ErrorFormatExt ILogExtensions FatalFormatExt ILogExtensions ErrorExt ILogExtensions InfoExt ILogExtensions ErrorFormatExt ILogExtensions WarnExt ILogExtensions FatalExt ILogExtensions InfoExt ILogExtensions FatalFormatExt ILogExtensions DebugFormatExt ILogExtensions WarnFormatExt ILogExtensions InfoExt ILogExtensions ErrorFormatExt ILogExtensions DebugExt ILogExtensions InfoFormatExt ILogExtensions InfoFormatExt ILogExtensions FatalFormatExt ILogExtensions FatalExt ILogExtensions FatalExt ILogExtensions WarnFormatExt ILogExtensions DebugExt ILogExtensions InfoFormatExt ILogExtensions DebugFormatExt ILogExtensions WarnFormatExt ILogExtensions DebugFormatExt
0,LOG4NET-96,674ee22c3559786e2f28f0e84e4670d46f72a791,"Expose the Message, Exception, and ErrorCode properties of OnlyOnceErrorHandler. When an appender makes use of an OnlyOnceErrorHandler, allow the values that were written to the error handler to be inspected.",Fix for LOG4NET-88. Added ConnectionStringName and AppSettingsKey properties to make it easier to use connection strings stored in well-known locations., MODIFY AdoNetAppender.csAdoNetAppender ResolveConnectionString AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-117,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-229,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
1,LOG4NET-212,73bdae467e39a9082d1a6dad3d2d5d26995b2a95,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",Race-Condition via shared StringBuilder in ReusableStringWriter.   LOG4NET-212, MODIFY AppenderSkeleton.csAppenderSkeleton RenderLoggingEvent MODIFY PatternConverter.csPatternConverter Format
0,LOG4NET-70,fcd26b8ccf169f9ea4e7cc02a5ff567a2dc3d544,CoreDll.dll referenced with different capitalisation The CoreDll.dll is referenced as both CoreDll.dll and coredll.dll. This has no effect on functionality but we should be consistant and use CoreDll.dll.,Fix for LOG4NET-74. Made member variables protected., MODIFY MemoryAppender.cs
0,LOG4NET-311,f51c60d914ba1ffb6ed34ae1ed275913572c4131,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Point to existing FAQ entry.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions
0,LOG4NET-441,61ca3990f6a28245ab78273480ee74891d9564b2,"FAQ should have Q&A about initialization I set up a sample application to try out log4net but nothing happened. I had linked the assembly, called the methods and set up the config, but I neither called one of the configurators nor included one of the configurator attributes. While in retrospect it's stupid on my part, it also seems to be a common cry for help (search ""log4net not working""). The FAQ Q&A (under troubleshooting) could be something like:

Q: Why isn't log4net working at all?
A: You may have overlooked initialization code for log4net in your application. log4net can be initialized explicitly by calling one of the configurators (e.g. BasicConfigurator, DOMConfigurator or XmlConfigurator in the log4net.Config namespace, or implicitly by including one of the configurator attributes (e.g. [XmlConfiguratorAttribute], [DOMConfiguratorAttribute]) in the assembly where log4net is first used. See xxxx and yyyy for more information.","LOG4NET-447 provide a PopAllEvents method for thread-safe access to
MemoryAppender

Patch by  Gregory Babski", ADD MemoryAppenderTest.csMemoryAppenderTest LogMessages MemoryAppenderTest TestThreadSafety MODIFY MemoryAppender.csMemoryAppender PopAllEvents
0,LOG4NET-143,09f7293056e8abf36655537318384e9bd0ff5c9e,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
1,LOG4NET-317,272f82c31219c09f3bbf2a4dde149acb835501a2,LogicalThreadContext sometimes doesn't follow CallContext's logical thread   See the discussion in http://logging.markmail.org/thread/q3bogptirf32g77r,make sure LogicalThreadContext really follows logical thread on .NET2+.  LOG4NET-317, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties GetCallContextData LogicalThreadContextProperties SetCallContextData
0,LOG4NET-66,b3c6cd405f44bbcb9a8728bdcca17d05a7dd0b9d,"PreserveFileExtension with StaticFileName I found that the patch to make all RollingFileAppender log files have the same file extension (provided by Joshua Bassett) didn't work properly if the log4net configuration used a static file name.

I've attached a patch to version 312319 with his changes and mine merged.

Mike",Fix for LOG4NET-64. Allow file extension to be preserved when rolling file., MODIFY RollingFileAppender.csRollingFileAppender RollOverTime RollingFileAppender GetBackUpIndex RollingFileAppender RollOverRenameFiles RollingFileAppender GetNextOutputFileName RollingFileAppender InitializeFromOneFile RollingFileAppender CombinePath RollingFileAppender GetWildcardPatternForFile RollingFileAppender GetExistingFiles RollingFileAppender ActivateOptions
0,LOG4NET-241,09f7293056e8abf36655537318384e9bd0ff5c9e,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
1,LOG4NET-527,3dd6039eafb88029e0f057ec182468e9b9b91adb,"broken link on config-examples.html I needed more information on AdoNetAppender but encounter a broken link.

If you go to https://logging.apache.org/log4net/release/config-examples.html and click on the link under AdoNetAppender, you will get not found error.

I'm attaching a patch so we can fix this minor issue.

Thanks.",Site: fixed links to sdk for all the appenders in the config-examples page [LOG4NET-527], MODIFY config-examples.xml
0,LOG4NET-38,54493ed542fa2c3ab36809f1b5a65b8daa97d1ae,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",Deal with SecurityException in EventLogAppender more gracefully.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY EventLogAppenderTest.csEventLogAppenderTest ActivateOptionsDisablesAppenderIfSourceDoesntExist EventLogAppenderTest TestGetEntryTypeForExistingApplicationName EventLogAppenderTest TestGetEntryType
0,LOG4NET-297,b9c24915eadbbb665778ef42524fd74d99eb969a,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-38,5b2160524efa38a35a82ffdaf0aec0c07ce44e22,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",Allow default value for event id to be specified via configuration.  LOG4NET-214, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-214,b9c24915eadbbb665778ef42524fd74d99eb969a,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-310,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-172,61ca3990f6a28245ab78273480ee74891d9564b2,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.","LOG4NET-447 provide a PopAllEvents method for thread-safe access to
MemoryAppender

Patch by  Gregory Babski", ADD MemoryAppenderTest.csMemoryAppenderTest LogMessages MemoryAppenderTest TestThreadSafety MODIFY MemoryAppender.csMemoryAppender PopAllEvents
1,LOG4NET-301,73a4921de015d4262273055b04ea37206a224038,"Unit tests fail on a clean checkout on .NET 2.0 using NAnt Blocker as it makes validating patches hard if the unit tests fail.

Log of running nant inside the tests directory will be attached.",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
1,LOG4NET-376,24a9768eb4bda7e61fe06ef3ff2fa1090842aac1,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




",LOG4NET-376 fixed a race condition in AbsoluteTimeDateFormatter by adding a lock around s_lastTimeStrings, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-243,e1c9c3b7bb26b3564062859a86b38b793048548a,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-92,9f1b0f4d9ca956aea2d201515d3a143c47a0f309,[PATCH] Build for Compact Framework 2.0 This patch adds support for building for the compact framework 2.0.  These changes enable log4net to build and work for my needs - no extensive testing has been done.,LOG4NET-111: Project metadata for projects.apache.org, ADD doap_log4net.rdf
1,LOG4NET-117,702b0775760b413eee77c86d855f94e6c77316e4,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",no longer needed now that content has been migrated to mvn site.  LOG4NET-117, DELETE contributing.html DELETE site.css DELETE style.css DELETE downloads.html DELETE history.html DELETE index.html DELETE license.html DELETE building.html DELETE config-examples.html DELETE example-apps.html DELETE faq.html DELETE features.html DELETE framework-support.html DELETE chainsaw.html DELETE index.html DELETE configuration.html DELETE contexts.html DELETE internals.html DELETE introduction.html DELETE plugins.html DELETE repositories.html DELETE release-notes.html DELETE roadmap.html DELETE support.html DELETE build.xml DELETE ant-1.4.1.jar DELETE commons-collections-2.0.jar DELETE jdom-b8.jar DELETE log4j-1.1.3.jar DELETE velocity-1.4-dev.jar DELETE xerces-1.4.4.jar DELETE contributing.xml DELETE downloads.xml DELETE history.xml DELETE index.xml DELETE license.xml DELETE building.xml DELETE config-examples.xml DELETE example-apps.xml DELETE faq.xml DELETE features.xml DELETE framework-support.xml DELETE chainsaw.xml DELETE index.xml DELETE configuration.xml DELETE contexts.xml DELETE internals.xml DELETE introduction.xml DELETE plugins.xml DELETE repositories.xml DELETE release-notes.xml DELETE roadmap.xml DELETE project.xml DELETE site.vsl DELETE support.xml
0,LOG4NET-241,d78a5f8331dad60de277fecda43205412ccb464a,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-129,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-490,f86138c7fbde114c384afc7fb1fdd659eb403069,"InterProcessLock Tests fail The tests in question are:

* TestInterProcessLockRoll
* TestInterProcessLockUnlocks

This is actually quite bad and proves that my last attempt to introduce something that just works failed miserably. At first glance the trouble comes from the interaction with the base classes. One thing I noted is that the base class tries to write a footer when the file gets closed. But in the case of the rolling file appender the file is no longer there when this happens. Another example is that due to the error logs I'm writing the test finally noticed that the locks are acquired and released in bad order and thus result in bad behaviour.

But these are just two examples from a bunch of issues that still have to be worked out.",LOG4NET-489: fixed missing call to prepare the database parameter, MODIFY AdoNetAppender.csAdoNetAppender AddParameter AdoNetAppender DiposeConnection AdoNetAppender SendBuffer AdoNetAppenderParameter Prepare AdoNetAppender ResolveConnectionType AdoNetAppenderParameter FormatValue AdoNetAppender CreateConnection AdoNetAppender SendBuffer AdoNetAppender ResolveConnectionString AdoNetAppender AdoNetAppender AdoNetAppender InitializeDatabaseConnection AdoNetAppender ActivateOptions AdoNetAppenderParameter AdoNetAppenderParameter AdoNetAppender OnClose AdoNetAppender GetLogStatement
0,LOG4NET-214,d78a5f8331dad60de277fecda43205412ccb464a,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-70,75f0d6ef0bb353f893d1065d16e8f1bd873af8d2,CoreDll.dll referenced with different capitalisation The CoreDll.dll is referenced as both CoreDll.dll and coredll.dll. This has no effect on functionality but we should be consistant and use CoreDll.dll.,Fix for LOG4NET-72. CultureInfo.GetCultureInfo is not supported on .net 1.0 and 1.1, MODIFY StringFormatTest.csStringFormatTest TestLogFormatApi_NoFatal StringFormatTest TestLogFormatApi_NoDebug StringFormatTest TestLogFormatApi_NoError StringFormatTest TestLogFormatApi_Error StringFormatTest TestLogFormatApi_NoWarn StringFormatTest TestLogFormatApi_NoInfo StringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info
0,LOG4NET-489,183fd72e56c22f3e72ac1751c5d79aa8139205bd,"AdoNetAppender fails after upgrade to 2.0.4 with 1.2.13 everything is working fine.
Update to 1.2.14 (2.0.4 on Nuget), logging fails.
I would have attached screenshots, but can't work out how.

For example

    <connectionType
      value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
    <connectionStringName value=""LabelPrint"" />
    <commandText
      value=""INSERT INTO dbo.Logging ([LogDate],[Level],[Operation],[OperationInfo],[User],[Label],[Application],[CorrelationId],[Method],[Line],[Logger],[Message],[Exception]) 
                 VALUES (@log_date, @log_level, @operation, @operationInfo, @user, @label, @application, @correlationId, @pgm_method, @pgm_line, @logger, @message, @exception)"" />
    <parameter>
      <parameterName value=""@log_date"" />
      <dbType value=""DateTime"" />
      <layout type=""log4net.Layout.RawUtcTimeStampLayout"" />
    </parameter>
    ... etc

This now causes the error 

'Exception while writing to database System.IndexOutOfRangeException: An SqlParameter with ParamerName '@log_date' is not contained by this SqlParameterCollection ....

",port fix for LOG4NET-462 from 1.3 branch, MODIFY ReadOnlyPropertiesDictionary.csReadOnlyPropertiesDictionary GetObjectData
0,LOG4NET-437,cca252c3090b1e8091d61ffdd0e97835146db31a,"LogicalThreadContext data does not flow properly using Async and Await LogicalThreadContext doesn't work properly when using Async and Await. The current NDC call stack gets corrupted because the logical data context is not immutable. (See: http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html for the gory details). I've attached a Program.cs that demonstrates the issue. You will see with an unpatched log4net the thread context is corrupted compared to the proper implementation in MyStack and the console logger. An entry like:

LOG4NET Main 1 A 2 A: </MoreWork>
LOG4NET Main 1 A 2 A: </MoreWork>

is invalid and should not be possible in a properly working thread context.

I've attached a VERY naive patch that corrects the issue.",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
0,LOG4NET-117,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
1,LOG4NET-62,3f58b282b3449c0eef4c5867f37197fe2941d836,"Fixing any data should preclude the use of any other data in the output. Once the FixVolatileData (LoggingEvent.cs 1212) has been executed all non-fixed data should be unavailable (null or some other n/a value). Currently it will be computed at use time, possibly in the wrong context.",Fix for LOG4NET-62. Fixing values now fixes them and prevents others from being updated., MODIFY LoggingEvent.csLoggingEvent if LoggingEvent if LoggingEvent if LoggingEvent GetExceptionString LoggingEvent if LoggingEvent if LoggingEvent CacheProperties LoggingEvent if LoggingEvent if LoggingEvent FixVolatileData LoggingEvent if LoggingEvent if LoggingEvent if LoggingEvent if LoggingEvent if ADD FixingTest.csFixingTest TestAllFixedValues FixingTest BuildStandardEventData FixingTest TestNoFixedValues FixingTest TestUnfixedValues FixingTest FixingTest MODIFY log4net.Tests.csproj
0,LOG4NET-76,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-212,e1c9c3b7bb26b3564062859a86b38b793048548a,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-69,debba6201326ec2cfb7bdd8613f12fe3d212e418,"Exception thrown when *Format methods are given a malformed format string FormatException thrown when *Format methods are given a malformed format string: log.DebugFormat(""Malformed {{,,,5}format{8}!"");

This statement:

 log.DebugFormat(""Malformed {{,,,5}format{8}!"");

throws the following exception:

[FormatException: Input string was not in a correct format.]
   System.Text.StringBuilder.FormatError()
   System.Text.StringBuilder.AppendFormat(IFormatProvider provider, String format, Object[] args)
   System.String.Format(IFormatProvider provider, String format, Object[] args)
   log4net.Core.LogImpl.DebugFormat(String format, Object[] args)

which is consistent with the documentation for String.Format:

System.FormatException: The format item in format is invalid.  -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.  ","Fix for LOG4NET-72. Moved String.Format call into separate class SystemStringFormat. This class holds the format string and arguments and only performs the String.Format when its ToString method is called.
Added simple test to ensure that the String.Format methods are working correctly and error handling correctly.
Updated the tests project nant.build to copy shared libs into the build output directory.", MODIFY LogImpl.csLogImpl DebugFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl FatalFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl WarnFormat LogImpl WarnFormat ADD SystemStringFormat.csSystemStringFormat ToString SystemStringFormat StringFormatError SystemStringFormat StringFormat SystemStringFormat RenderObject SystemStringFormat SystemStringFormat SystemStringFormat RenderArray MODIFY Transform.csTransform RenderArray Transform StringFormatError Transform RenderObject Transform StringFormat MODIFY log4net.csproj ADD prerequisites.txt MODIFY nant.build ADD StringFormatTest.csStringFormatTest TestThreadPropertiesPattern MODIFY log4net.Tests.csproj
0,LOG4NET-388,5c023f6a22bfb93873a5ce0d6f5ac7e7275e2914,"[PATCH] NotSupportedException is thrown in SystemInfo.AssemblyLocationInfo for dynamic assemblies For dynamic assemblies ""Location"" property shouldn't be used (http://msdn.microsoft.com/en-us/library/system.reflection.assembly.location.aspx).
Therefore in log4net.Util.SystemInfo we can test if assembly is dynamic and in result avoid exception.

Exception is very annoying and popular with NHibernate 3.3.3.4001.

I have added both fix and test.","LOG4NET-205 fixed LoggingEvent to put the UserNameProperty and the IdentityProperty into the composite properties dictionary

This way the PropertyFilter can look up and filter by UserName and Identity.", MODIFY LoggingEvent.csLoggingEvent CreateCompositeProperties
0,LOG4NET-297,9df9848f90c58c41f658b66c68178112eccc7c30,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
1,LOG4NET-301,e1c9c3b7bb26b3564062859a86b38b793048548a,"Unit tests fail on a clean checkout on .NET 2.0 using NAnt Blocker as it makes validating patches hard if the unit tests fail.

Log of running nant inside the tests directory will be attached.",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-344,cca252c3090b1e8091d61ffdd0e97835146db31a,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
1,LOG4NET-214,5b2160524efa38a35a82ffdaf0aec0c07ce44e22,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",Allow default value for event id to be specified via configuration.  LOG4NET-214, MODIFY EventLogAppender.csEventLogAppender Append
1,LOG4NET-348,f1ebf4c88754bc39c076f52f6d76afb2277db5d0,"System.IndexOutOfRangeException when StackFrameLevel is greater then StackFrames length In file src\Layout\Pattern\StackTracePatternConverter.cs (lines 108-114) is:

108: if (stackFrameIndex > stackframes.Length)
109: {
110:	stackFrameIndex--;
111:	continue;
112: }
113:				
114: StackFrame stackFrame = stackframes[stackFrameIndex];

Exception is trown in line 114. To solve that problem please change line 108 to:
108: if (stackFrameIndex >= stackframes.Length)


",LOG4NET-348 fix System.IndexOutOfRangeException in StackTracePatternConverter whenever m_stackFrameLevel is bigger than the retrieved StackFrames, MODIFY StackTracePatternConverter.csStackTracePatternConverter Convert
0,LOG4NET-129,b9c24915eadbbb665778ef42524fd74d99eb969a,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-215,702b0775760b413eee77c86d855f94e6c77316e4,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",no longer needed now that content has been migrated to mvn site.  LOG4NET-117, DELETE contributing.html DELETE site.css DELETE style.css DELETE downloads.html DELETE history.html DELETE index.html DELETE license.html DELETE building.html DELETE config-examples.html DELETE example-apps.html DELETE faq.html DELETE features.html DELETE framework-support.html DELETE chainsaw.html DELETE index.html DELETE configuration.html DELETE contexts.html DELETE internals.html DELETE introduction.html DELETE plugins.html DELETE repositories.html DELETE release-notes.html DELETE roadmap.html DELETE support.html DELETE build.xml DELETE ant-1.4.1.jar DELETE commons-collections-2.0.jar DELETE jdom-b8.jar DELETE log4j-1.1.3.jar DELETE velocity-1.4-dev.jar DELETE xerces-1.4.4.jar DELETE contributing.xml DELETE downloads.xml DELETE history.xml DELETE index.xml DELETE license.xml DELETE building.xml DELETE config-examples.xml DELETE example-apps.xml DELETE faq.xml DELETE features.xml DELETE framework-support.xml DELETE chainsaw.xml DELETE index.xml DELETE configuration.xml DELETE contexts.xml DELETE internals.xml DELETE introduction.xml DELETE plugins.xml DELETE repositories.xml DELETE release-notes.xml DELETE roadmap.xml DELETE project.xml DELETE site.vsl DELETE support.xml
0,LOG4NET-148,b13c1fdd8d87877cdcfa6eb8c01555bf15d267b9,"ThreadContext uses LocalDataStore to store ThreadSpecific data instead should be using  [ThreadStatic] variables. According to this article (http://blogs.msdn.com/junfeng/archive/2005/12/31/508423.aspx) and production issues encountered: using LocalDataStore is not a scalable approach for any web server that gets a significant amount of traffic.

The ThreadContext object should be modified to use [ThreadStatic] variables.

From the article:
The Whidbey RTM implementation of Thread.GetData/Thread.SetData has several scalability issues caused by global locks being taken. The appdomain-global lock taken in LocalDataStore.SetData is one of them. There is another global lock taken in ThreadNative::GetDomainLocalStore that is even worse since it is process-global.

The best workaround is to use [ThreadStatic] variables instead of Thread.GetData/Thread.SetData",LOG4NET-226 added catch ObjectDisposedException clause as suggested by Johannes Krackowizer and confirmed by Ron Grabowski, MODIFY LoggingEvent.csLoggingEvent if
0,LOG4NET-310,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-153,a233bcb1bd3b771cf8bdf9c011f639f341d0a4a7,"Make it easier to configure multiple appenders in code using BasicConfigurator Users wanting to configure log4net in code using more than just a single appender must cast the repository into a Hierarchy then manually add elements:

 Repository.Hierarchy.Hierarchy hierarchy = 
     (Repository.Hierarchy.Hierarchy)LogManager.GetRepository();
 hierarchy.Root.AddAppender(alpha);
 hierarchy.Root.AddAppender(beta);
 hierarchy.Configured = true;

The BasicConfigurator should make it easier to accomplish this:

 BasicConfigurator.Configure(alpha, beta);

This can be accomplished by adding an overload to Configure that accepts an params IAppender[]:

 IBasicRepositoryConfigurator.Configure(params IAppender[] appenders)",Fix for LOG4NET-168. Add ReplyTo property to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-37,b5e2ca40735957d84d2734c573f88cc75ec8a627,"Allow the RepositorySelector type to be specified using the AppSettings config Allow the RepositorySelector type to be sepecified using the AppSettings config.

The RepositorySelector is set by default to be DefaultRepositorySelector. This can be changed programatically by setting the LoggerManager.RepositorySelector property, however it cannot be set at runtime via the application configuration files.

Propose adding an AppSettings property 'log4net.RepositorySelector' that can be set to the type name of the repository selector to load. If this property is missing, or the type cannot be created the current default behaviour will continue.",Fix for LOG4NET-35 Exception rendering ThreadContextStack if null value pushed into stack. Fix and tests included, MODIFY ThreadContextStack.csThreadContextStack StackFrame if ThreadContextStack StackFrame if ADD ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadStackPatternNullVal ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestThreadStackPattern MODIFY log4net.Tests.csproj
0,LOG4NET-46,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"Support appenders that can output multiple events efficiently Some appenders can efficiently output batches of events. Currently there is no way to pass a batch of events to an appender.

Add an interface IBulkAppender that exposes a DoAppend method that takes an array of events. This interface can be supported by appenders that can process in bulk.","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
1,LOG4NET-443,dbe0f89a38f6fca026d8d78ab59f23009cde8443,"Logger.CallAppenders I do have an .NET application (Windows Service) that collects data from a lot of sources (DBs, log files, machines event logs, ...) and uses Log4Net to log details of the actions / execution.  As expected, I'm using a high number of threads to collect data, threads that are writing logs in some files (RollingFileAppenderer).

Lately it happens that the entire application is BLOCKED because all threads were trying to acquire a read lock, like in the stack trace:
000000001ac3d998 00000000774715fa [HelperMethodFrame: 000000001ac3d998] System.Threading.Thread.SleepInternal(Int32)
000000001ac3da90 000007fef747b5e9 System.Threading.Thread.Sleep(Int32)
000000001ac3dac0 000007fef5fb9631 System.Threading.ReaderWriterLockSlim.EnterMyLockSpin()
000000001ac3db90 000007fef5cd297e System.Threading.ReaderWriterLockSlim.TryEnterReadLockCore(TimeoutTracker)
000000001ac3dbf0 000007fef5cd28fa System.Threading.ReaderWriterLockSlim.TryEnterReadLock(TimeoutTracker)
000000001ac3dc40 000007fe98fb4efd log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)
000000001ac3dcc0 000007fe98fb4907 log4net.Repository.Hierarchy.Logger.Log(System.Type, log4net.Core.Level, System.Object, System.Exception)
000000001ac3dd30 000007fe98fb47f9 log4net.Core.LogImpl.Info(System.Object)  

It's important to mention that my threads have a timeout, and if they do not finish the job in the given interval they are ABORTED.

Searching for a solution, I found a possible explanation of application hanging here: http://chabster.blogspot.ro/2013/07/a-story-of-orphaned-readerwriterlockslim.html",LOG4NET-443 prevent orphaned locks with ReaderWriterLockSlim in the face of aborted threads, MODIFY ReaderWriterLock.csReaderWriterLock AcquireReaderLock ReaderWriterLock AcquireWriterLock
0,LOG4NET-167,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-297,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-112,0b84492f43c8c769e7453e675f111b56e5263712,"Add support to the UdpAppender for IP v6 remote addresses The UdpClient object must be configured for either IP v4 or IP v6 when it is created. Once configured it cannot be used to send to remote addresses that are from a different network family.

Specifying the network family is not supported on NET 1.0, NETCF 1.0, SSCLI 1.0","Fix for LOG4NET-98.
Updated all source, build and doc files to use new Apache source headers as per http://www.apache.org/legal/src-headers.html", MODIFY NOTICE.txt MODIFY contributing.html MODIFY downloads.html MODIFY history.html MODIFY index.html MODIFY license.html MODIFY building.html MODIFY config-examples.html MODIFY example-apps.html MODIFY faq.html MODIFY features.html MODIFY framework-support.html MODIFY chainsaw.html MODIFY index.html MODIFY configuration.html MODIFY contexts.html MODIFY internals.html MODIFY introduction.html MODIFY plugins.html MODIFY repositories.html MODIFY release-notes.html MODIFY roadmap.html MODIFY support.html MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AsyncAppender.cs MODIFY FastDbAppender.cs MODIFY FireEventAppender.cs MODIFY MessageBoxAppender.cs MODIFY MessageObjectExpanderAppender.cs MODIFY MsmqAppender.cs MODIFY PatternFileAppender.cs MODIFY SimpleSmtpAppender.cs MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY IWmiBoundEvent.cs MODIFY WmiAppender.cs MODIFY WmiInstaller.cs MODIFY WmiLayout.cs MODIFY WmiLoggingEvent.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY TraceLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ForwardingLayout.cs MODIFY LineWrappingLayout.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY NotLogging.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingClient.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingServer.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cs MODIFY Global.asax.cs MODIFY WebForm1.aspx.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY AssemblyVersionInfo.vb MODIFY Global.asax.vb MODIFY WebForm1.aspx.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY EntryPoint.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cpp MODIFY ConsoleApp.cpp MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogImpl.cs MODIFY EventIDLogManager.cs MODIFY IEventIDLog.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY MarshalByRefLogImpl.cs MODIFY MarshalByRefLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ITraceLog.cs MODIFY TraceLogImpl.cs MODIFY TraceLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY log4net-sdk.ndoc MODIFY log4net.build MODIFY log4net.include MODIFY AdoNetAppender.cs MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderCollection.cs MODIFY AppenderSkeleton.cs MODIFY AspNetTraceAppender.cs MODIFY BufferingAppenderSkeleton.cs MODIFY BufferingForwardingAppender.cs MODIFY ColoredConsoleAppender.cs MODIFY ConsoleAppender.cs MODIFY DebugAppender.cs MODIFY EventLogAppender.cs MODIFY FileAppender.cs MODIFY ForwardingAppender.cs MODIFY IAppender.cs MODIFY IBulkAppender.cs MODIFY LocalSyslogAppender.cs MODIFY MemoryAppender.cs MODIFY NetSendAppender.cs MODIFY OutputDebugStringAppender.cs MODIFY RemoteSyslogAppender.cs MODIFY RemotingAppender.cs MODIFY RollingFileAppender.cs MODIFY SmtpAppender.cs MODIFY SmtpPickupDirAppender.cs MODIFY TelnetAppender.cs MODIFY TextWriterAppender.cs MODIFY TraceAppender.cs MODIFY UdpAppender.cs MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cpp MODIFY AssemblyVersionInfo.cs MODIFY AssemblyVersionInfo.js MODIFY AssemblyVersionInfo.vb MODIFY AliasDomainAttribute.cs MODIFY AliasRepositoryAttribute.cs MODIFY BasicConfigurator.cs MODIFY ConfiguratorAttribute.cs MODIFY DOMConfigurator.cs MODIFY DOMConfiguratorAttribute.cs MODIFY DomainAttribute.cs MODIFY Log4NetConfigurationSectionHandler.cs MODIFY PluginAttribute.cs MODIFY RepositoryAttribute.cs MODIFY SecurityContextProviderAttribute.cs MODIFY XmlConfigurator.cs MODIFY XmlConfiguratorAttribute.cs MODIFY CompactRepositorySelector.cs MODIFY DefaultRepositorySelector.cs MODIFY ErrorCode.cs MODIFY ExceptionEvaluator.cs MODIFY IAppenderAttachable.cs MODIFY IErrorHandler.cs MODIFY IFixingRequired.cs MODIFY ILogger.cs MODIFY ILoggerWrapper.cs MODIFY IOptionHandler.cs MODIFY IRepositorySelector.cs MODIFY ITriggeringEventEvaluator.cs MODIFY Level.cs MODIFY LevelCollection.cs MODIFY LevelEvaluator.cs MODIFY LevelMap.cs MODIFY LocationInfo.cs MODIFY LogException.cs MODIFY LogImpl.cs MODIFY LoggerManager.cs MODIFY LoggerWrapperImpl.cs MODIFY LoggingEvent.cs MODIFY SecurityContext.cs MODIFY SecurityContextProvider.cs MODIFY WrapperMap.cs MODIFY AbsoluteTimeDateFormatter.cs MODIFY DateTimeDateFormatter.cs MODIFY IDateFormatter.cs MODIFY Iso8601DateFormatter.cs MODIFY SimpleDateFormatter.cs MODIFY DenyAllFilter.cs MODIFY FilterDecision.cs MODIFY FilterSkeleton.cs MODIFY IFilter.cs MODIFY LevelMatchFilter.cs MODIFY LevelRangeFilter.cs MODIFY LoggerMatchFilter.cs MODIFY MdcFilter.cs MODIFY NdcFilter.cs MODIFY PropertyFilter.cs MODIFY StringMatchFilter.cs MODIFY GlobalContext.cs MODIFY ILog.cs MODIFY ExceptionLayout.cs MODIFY ILayout.cs MODIFY IRawLayout.cs MODIFY Layout2RawLayoutAdapter.cs MODIFY LayoutSkeleton.cs MODIFY AppDomainPatternConverter.cs MODIFY AspNetCachePatternConverter.cs MODIFY AspNetContextPatternConverter.cs MODIFY AspNetPatternConverter.cs MODIFY AspNetRequestPatternConverter.cs MODIFY AspNetSessionPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY ExceptionPatternConverter.cs MODIFY FileLocationPatternConverter.cs MODIFY FullLocationPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LevelPatternConverter.cs MODIFY LineLocationPatternConverter.cs MODIFY LoggerPatternConverter.cs MODIFY MessagePatternConverter.cs MODIFY MethodLocationPatternConverter.cs MODIFY NamedPatternConverter.cs MODIFY NdcPatternConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RelativeTimePatternConverter.cs MODIFY ThreadPatternConverter.cs MODIFY TypeNamePatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PatternLayout.cs MODIFY RawLayoutConverter.cs MODIFY RawPropertyLayout.cs MODIFY RawTimeStampLayout.cs MODIFY RawUtcTimeStampLayout.cs MODIFY SimpleLayout.cs MODIFY XMLLayout.cs MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.cs MODIFY LogManager.cs MODIFY LogicalThreadContext.cs MODIFY MDC.cs MODIFY NDC.cs MODIFY DefaultRenderer.cs MODIFY IObjectRenderer.cs MODIFY RendererMap.cs MODIFY IPlugin.cs MODIFY IPluginFactory.cs MODIFY PluginCollection.cs MODIFY PluginMap.cs MODIFY PluginSkeleton.cs MODIFY RemoteLoggingServerPlugin.cs MODIFY DefaultLoggerFactory.cs MODIFY Hierarchy.cs MODIFY ILoggerFactory.cs MODIFY Logger.cs MODIFY LoggerKey.cs MODIFY ProvisionNode.cs MODIFY RootLogger.cs MODIFY XmlHierarchyConfigurator.cs MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.cs MODIFY ThreadContext.cs MODIFY AppenderAttachedImpl.cs MODIFY CompositeProperties.cs MODIFY ContextPropertiesBase.cs MODIFY CountingQuietTextWriter.cs MODIFY CyclicBuffer.cs MODIFY EmptyCollection.cs MODIFY EmptyDictionary.cs MODIFY FormattingInfo.cs MODIFY GlobalContextProperties.cs MODIFY LevelMapping.cs MODIFY LevelMappingEntry.cs MODIFY LogLog.cs MODIFY LogicalThreadContextProperties.cs MODIFY NativeError.cs MODIFY NullDictionaryEnumerator.cs MODIFY NullEnumerator.cs MODIFY NullSecurityContext.cs MODIFY OnlyOnceErrorHandler.cs MODIFY OptionConverter.cs MODIFY PatternConverter.cs MODIFY PatternParser.cs MODIFY PatternString.cs MODIFY AppDomainPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY EnvironmentPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LiteralPatternConverter.cs MODIFY NewLinePatternConverter.cs MODIFY ProcessIdPatternConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RandomStringPatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PropertiesDictionary.cs MODIFY ProtectCloseTextWriter.cs MODIFY QuietTextWriter.cs MODIFY ReadOnlyPropertiesDictionary.cs MODIFY ReaderWriterLock.cs MODIFY ReusableStringWriter.cs MODIFY SystemInfo.cs MODIFY SystemStringFormat.cs MODIFY TextWriterAdapter.cs MODIFY ThreadContextProperties.cs MODIFY ThreadContextStack.cs MODIFY ThreadContextStacks.cs MODIFY Transform.cs MODIFY BooleanConverter.cs MODIFY ConversionNotSupportedException.cs MODIFY ConverterRegistry.cs MODIFY EncodingConverter.cs MODIFY IConvertFrom.cs MODIFY IConvertTo.cs MODIFY IPAddressConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PatternStringConverter.cs MODIFY TypeConverter.cs MODIFY TypeConverterAttribute.cs MODIFY WindowsSecurityContext.cs MODIFY nant.build MODIFY BufferingAppenderTest.cs MODIFY CountingAppender.cs MODIFY EventLogAppenderTest.cs MODIFY RemotingAppenderTest.cs MODIFY RollingFileAppenderTest.cs MODIFY StringAppender.cs MODIFY AssemblyInfo.cs MODIFY ThreadContextTest.cs MODIFY FixingTest.cs MODIFY ShutdownTest.cs MODIFY StringFormatTest.cs MODIFY Logger.cs MODIFY PatternLayoutTest.cs MODIFY XmlLayoutTest.cs MODIFY CyclicBufferTest.cs MODIFY PropertiesDictionaryTest.cs MODIFY RandomStringPatternConverterTest.cs MODIFY SystemInfoTest.cs MODIFY Utils.cs MODIFY contributing.xml MODIFY downloads.xml MODIFY history.xml MODIFY index.xml MODIFY license.xml MODIFY building.xml MODIFY config-examples.xml MODIFY example-apps.xml MODIFY faq.xml MODIFY features.xml MODIFY framework-support.xml MODIFY chainsaw.xml MODIFY index.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY internals.xml MODIFY introduction.xml MODIFY plugins.xml MODIFY repositories.xml MODIFY release-notes.xml MODIFY roadmap.xml MODIFY project.xml MODIFY site.vsl MODIFY support.xml
0,LOG4NET-311,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
1,LOG4NET-371,0697e5ce56655b0c12ffa9c7441cf8a11d53b08f,"Log with formatting doesn't call custom renderers (IObjectRenderer) If I log an object using ILog.Info(myObject), myObjectRenderer is used. If I use ILog.InfoFormat(""my object is: {0}"", myObject) then the default renderer is used.

I spent hours trying to figure out why the default renderer was being used and then on a whim I used the non-formatted log method and everything worked correctly. At the very least I would like the documentation for this feature to specify that only the non-formatted logging methods make use of custom renderers.",LOG4NET-371 mention in the introduction that *Format methods do not use ObjectRenderers, MODIFY introduction.xml
0,LOG4NET-212,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-241,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
1,LOG4NET-135,3c054052a5cc1a9091b84b849f36bff0c51cc221,"Bad example code in documentation http://logging.apache.org/log4net/release/config-examples.html
The last code example under ""RollingFileAppender"" seems to be wrong. Shouldn't it be:

<rollingStyle value=""Once"" />",Fix for LOG4NET-135. Improve documentation for resetting log file once per application run., MODIFY config-examples.xml
1,LOG4NET-126,a056a11fb478a35d6cf3d4f26dc391c34f2dabc2,"Links on the log4net Examples page do not work, including the overview link explaining why the other links do not work The page at

http://logging.apache.org/log4net/release/example-apps.html

is one of the first pages that new users will visit.

The Overview section at the top of the page explains that none of the links given for examples, such as

http://logging.apache.org/examples/mono/1.0/Tutorials/ConsoleApp/cs

work, which is a shame as they would be a very handy reference. 

I skipped past this explanation looking for an example for SMTPAppender. It was only when I realised that none of the links were working that I scrolled back to the top of the page and saw the Overview section.


The Overview section gives a link to the release download, it gives

http://logging.apache.org/log4net/downloads.html

which also doesn't work. it should be 

http://logging.apache.org/log4net/download.html


Fixing these links would give a far better impression to new users.

Cheers

Brian

","Fix for LOG4NET-126. Changed link to downloads page from ""downloads.html"" to ""download.html"".", MODIFY example-apps.xml
0,LOG4NET-13,6de62c784acb8c0499ea3b7b84b34bff956a4e6a,"Allow SMTPAppender to have replaceable parameters in Subject It would be helpful to be able to have parameters that
are replaced on a per-log event basis on the Subject
line for the SMTPAppender.

Example:
I have multiple web servers running a .NET web service
and all use log4net. When an error occurs, they use the
SMTPAppender to notify me. It would be very useful to
include the host name of the sender in the subject line
so that I could easily determine which web server had
an error instead of having to look into the email.

In thinking more about this it could either be the
Subject line or the From line that has replacable
parameters. Perhaps even make it so that these
properties can use the <layout> tag.

Jeremy Wiebe - jeropa",Fix for LOG4NET-11. Added a Flush(true) method that will flush the lossy buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Flush MODIFY CyclicBuffer.csCyclicBuffer PopAll CyclicBuffer Clear
0,LOG4NET-241,8400fecdd81394a86d4192889446d40678dcfb90,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-22,21c34f7153387912a991692eaf1f32fe82ec9492,"XmlLayout allows output of invalid control characters XmlLayout allows output of invalid control characters.

Reported by Mike Blake-Knox with additional comments from Curt Arnold.


The XmlLayout encodes the character 0x1e as &#x1E; using the standard XML numeric character reference.

This character code is in a range which is not allowed to appear in XML 1.0 either as a un-encoded value or as a numeric character reference.

The valid character ranges are defined here in the XML recommendation:
http://www.w3.org/TR/REC-xml/#charsets

They are:

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

Numeric character references are not able to express characters from outside these ranges.

The System.Xml.XmlTextWriter does not verify if the unicode character is valid in XML, but it does encode it as a numeric character reference if it cannot be expressed in the output encoding.

To complicate matters further XML 1.1 does allow further, so called restricted characters, to be included in the output if they are encoded as numeric character references. These ranges are:

[#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]

See http://www.w3.org/TR/2004/REC-xml11-20040204/#charsets for details.",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-155,73e0dd86850f4d805d2146c9a5cdfe77a3fa6f26,"Add TimeEvaluator Hello,

I'd like to submit this class. I find it handy together with RemotingAppender (or buffering appenders generally) where we don't want to send synchronously, but still want to have some timely feedback from the sites even if there is little logging.

A sample configuration would be:

    <appender name=""RemotingAppender"" type=""log4net.Appender.RemotingAppender"">
      <param name=""Sink"" value=""tcp://localhost:11111/LoggingSink"" />
      <param name=""Lossy"" value=""false"" />
      <param name=""BufferSize"" value=""500"" />
      <param name=""Fix"" value=""Partial"" />
      <evaluator type=""log4net.Core.TimeEvaluator"">
        <threshold value=""60""/>
      </evaluator>
    </appender>

I've taken the existing LevelEvaluator from Nicko Cadell as a template to build this class.

I've tried it and it worked, but haven't done any further testing.

Best regards and thanks for the great works!
Robert.",Fix for LOG4NET-158. XMLConfigurator.ConfigureAndWatch() won't leak resources when called multiple times. Internal FileWatcher is properly disposed when a change is detected., MODIFY XmlConfigurator.csXmlConfigurator ConfigureAndWatchHandler Dispose XmlConfigurator InternalConfigureAndWatch XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler XmlConfigurator ConfigureAndWatchHandler StartWatching
1,LOG4NET-218,c70348a6dba2c6c27a3e64e2ef7ac8189ce978af,"Test StringFormatTest.TestFormatString fails The test ""StringFormatTest.TestFormatString"" fails with the following message:

NUnit.Framework.AssertionException: Test formatting error
    String lengths differ.  Expected length=272, but was length=291.
    Strings differ at index 46.
    expected: <""...ror>Exception during StringFormat: Index (zero based) must be greater ..."">
     but was: <""...ror>Exception during StringFormat: Der Index, basierend auf 0 (null), ..."">
    --------------------------------------------------^

The test seems to be dependent from the language settings of the current user",LOG4NET-218 fixed some tests to work again because of culture trouble, MODIFY RollingFileAppenderTest.csRollingFileAppenderTest SetUp RollingFileAppenderTest TearDown MODIFY StringFormatTest.csStringFormatTest TearDown StringFormatTest SetUp MODIFY PatternLayoutTest.csPatternLayoutTest SetUp PatternLayoutTest TestStackTracePattern PatternLayoutTest TearDown MODIFY XmlLayoutTest.csXmlLayoutTest BracketsInStackTracesAreEscapedProperly XmlLayoutTest SetUp XmlLayoutTest TearDown MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-129,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-527,fa4f0af03219d345ca98edc6cce365e40a60298a,"broken link on config-examples.html I needed more information on AdoNetAppender but encounter a broken link.

If you go to https://logging.apache.org/log4net/release/config-examples.html and click on the link under AdoNetAppender, you will get not found error.

I'm attaching a patch so we can fix this minor issue.

Thanks.",LOG4NET-526 initial version of an AppSetting pattern converter - patch by @JJoe2 - closes #35, MODIFY project.json MODIFY PatternString.csPatternString PatternString ADD AppSettingPatternConverter.csAppSettingPatternConverter if AppSettingPatternConverter Convert MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj MODIFY log4net.vs2012.csproj
0,LOG4NET-126,a233bcb1bd3b771cf8bdf9c011f639f341d0a4a7,"Links on the log4net Examples page do not work, including the overview link explaining why the other links do not work The page at

http://logging.apache.org/log4net/release/example-apps.html

is one of the first pages that new users will visit.

The Overview section at the top of the page explains that none of the links given for examples, such as

http://logging.apache.org/examples/mono/1.0/Tutorials/ConsoleApp/cs

work, which is a shame as they would be a very handy reference. 

I skipped past this explanation looking for an example for SMTPAppender. It was only when I realised that none of the links were working that I scrolled back to the top of the page and saw the Overview section.


The Overview section gives a link to the release download, it gives

http://logging.apache.org/log4net/downloads.html

which also doesn't work. it should be 

http://logging.apache.org/log4net/download.html


Fixing these links would give a far better impression to new users.

Cheers

Brian

",Fix for LOG4NET-168. Add ReplyTo property to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-297,09f7293056e8abf36655537318384e9bd0ff5c9e,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
1,LOG4NET-489,f86138c7fbde114c384afc7fb1fdd659eb403069,"AdoNetAppender fails after upgrade to 2.0.4 with 1.2.13 everything is working fine.
Update to 1.2.14 (2.0.4 on Nuget), logging fails.
I would have attached screenshots, but can't work out how.

For example

    <connectionType
      value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
    <connectionStringName value=""LabelPrint"" />
    <commandText
      value=""INSERT INTO dbo.Logging ([LogDate],[Level],[Operation],[OperationInfo],[User],[Label],[Application],[CorrelationId],[Method],[Line],[Logger],[Message],[Exception]) 
                 VALUES (@log_date, @log_level, @operation, @operationInfo, @user, @label, @application, @correlationId, @pgm_method, @pgm_line, @logger, @message, @exception)"" />
    <parameter>
      <parameterName value=""@log_date"" />
      <dbType value=""DateTime"" />
      <layout type=""log4net.Layout.RawUtcTimeStampLayout"" />
    </parameter>
    ... etc

This now causes the error 

'Exception while writing to database System.IndexOutOfRangeException: An SqlParameter with ParamerName '@log_date' is not contained by this SqlParameterCollection ....

",LOG4NET-489: fixed missing call to prepare the database parameter, MODIFY AdoNetAppender.csAdoNetAppender AddParameter AdoNetAppender DiposeConnection AdoNetAppender SendBuffer AdoNetAppenderParameter Prepare AdoNetAppender ResolveConnectionType AdoNetAppenderParameter FormatValue AdoNetAppender CreateConnection AdoNetAppender SendBuffer AdoNetAppender ResolveConnectionString AdoNetAppender AdoNetAppender AdoNetAppender InitializeDatabaseConnection AdoNetAppender ActivateOptions AdoNetAppenderParameter AdoNetAppenderParameter AdoNetAppender OnClose AdoNetAppender GetLogStatement
1,LOG4NET-40,a853cf53b35ee269226994a1254c0088f13f6d29,"RollingFileAppender does not limit files to MaxSizeRollBackups when CountDirection is 1 RollingFileAppender does not limit files to MaxSizeRollBackups when CountDirection is 1

When the CountDirection is positive the log files are named in ascending order. The total number of archive files should be limited to the MaxSizeRollBackups property value. The number of archive files is not limited.

An appender config that reproduces this behaviour is:

<appender name=""CountUpRollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
  <file value=""log-file-count-up-roll.txt"" />
  <rollingStyle value=""Size"" />
  <maxSizeRollBackups value=""10"" />
  <maximumFileSize value=""100"" />
  <countDirection value=""1"" />
  <staticLogFileName value=""false"" />
  <layout type=""log4net.Layout.PatternLayout"" value=""%date %-5level %logger - %message%newline"" />
</appender>",Fix for LOG4NET-40 RollingFileAppender does not limit files to MaxSizeRollBackups when CountDirection is 1, MODIFY RollingFileAppender.csRollingFileAppender GetNextOutputFileName RollingFileAppender OpenFile RollingFileAppender RollOverSize RollingFileAppender InitializeFromOneFile RollingFileAppender RollOverRenameFiles
1,LOG4NET-342,26060334da4fc07c5f768da5a1f7a647a70de42b,"Add a way to prevent silent failure I spent most of the day trying to find out why logging is not working on my dev system but not on test. There should be a way to force error reporting by throwing (possibly unhandled) exceptions. This could be done by adding a required flag to the appenders and another flag that requires a least one working appender.

I am not sure about a good way to implement this, I would just love it if my favourite tool to end silent failure could stop failing silently. 

","LOG4NET-342 added the property Configured to ILog that allows to check if the repository was configured properly

Usecase:
   if (log.Configured == false) 
   { 
      throw new ConfigurationErrorsException(""Log4net failed to initialize properly.""); 
   }", MODIFY LogImpl.cs MODIFY ILog.cs
0,LOG4NET-229,09f7293056e8abf36655537318384e9bd0ff5c9e,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-296,e1c9c3b7bb26b3564062859a86b38b793048548a,"Patch for .net 4, client profile and a fix for the name resolution bug  ",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
1,LOG4NET-275,b9c24915eadbbb665778ef42524fd74d99eb969a,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-243,d78a5f8331dad60de277fecda43205412ccb464a,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-167,9df9848f90c58c41f658b66c68178112eccc7c30,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-296,73a4921de015d4262273055b04ea37206a224038,"Patch for .net 4, client profile and a fix for the name resolution bug  ",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
1,LOG4NET-45,eb02bce2d20473bba7b2fddbad056f90651054dd,"PluginAttribute does not allow plugin type to be specified as a Type, only as a string The PluginAttribute currently allows the plugin type to be specified as a string, for example:

[assembly: log4net.Config.Plugin(""log4net.Plugin.RemoteLoggingServerPlugin,log4net"")]

it should be possible to specify this as a type, for example:

[assembly: log4net.Config.Plugin(typeof(log4net.Plugin.RemoteLoggingServerPlugin))]",Fix for LOG4NET-45. Added constructor and property to take plugin type as a Type, MODIFY PluginAttribute.csPluginAttribute ToString PluginAttribute PluginAttribute PluginAttribute CreatePlugin PluginAttribute PluginAttribute PluginAttribute PluginAttribute
1,LOG4NET-301,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Unit tests fail on a clean checkout on .NET 2.0 using NAnt Blocker as it makes validating patches hard if the unit tests fail.

Log of running nant inside the tests directory will be attached.","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
1,LOG4NET-157,26e94eaed3dfa4ef2115dd46bf8338beb140e52d,"FAQ for getting the fully-qualified name of a class The FAQ here--

http://logging.apache.org/log4net/release/faq.html

states that the following are equivalent ways to obtain a logger:

(1) private static readonly ILog log = LogManager.GetLogger(typeof(Foo));

(2) private static readonly ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

However, these constructs seem to behave differently when the classes involved are generic.  When generic classes are involved, I believe the former generates a different logger for each type parameter combination, while the latter generates a different logger if and only if the number of type parameters is different.

For example,

TestClass<T, S> can yield ""TestClass`2[[System.Int32..."" in the former case and ""TestClass`2"" in the latter.

",Note difference for generic types between the two approaches of finding a logger in FAQ.  LOG4NET-157, MODIFY faq.xml
0,LOG4NET-76,e1c9c3b7bb26b3564062859a86b38b793048548a,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
1,LOG4NET-511,56abbd94f3602cba730a81eea4216910469a0af8,"API to flush appenders I would like to see an API that flushes any appenders that have buffered data. E.g. a method LogManager.Flush().  An application might call such a method at regular intervals, e.g. on a Timer.

A naive implementation with the current log4net would iterate through appenders, looking for those that support flushing, and call the appender's flush method, e.g.:

    foreach (IAppender appender in 
             LogManager.GetRepository().GetAppenders())
    {
        BufferingAppenderSkeleton bas = appender 
                        as BufferingAppenderSkeleton;  
        if (bas != null) bas.Flush();
    }

But (a) I'm not sure this is thread-safe and (b) there are potentially other appenders that may want to be able to flush data (e.g. a TextWriterAppender with ImmediateFlush = false).

The request consists of:

- Add an interface, IFlushableAppender or equivalent, with a single method Flush().
- Implement this interface in all relevant appenders (BufferingAppenderSkeleton, TextWriterAppender, ...)
- Add a thread-safe static Flush() method to LogManager.
",LOG4NET-511 don't signal error by default, MODIFY AppenderSkeleton.csAppenderSkeleton Flush
0,LOG4NET-296,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Patch for .net 4, client profile and a fix for the name resolution bug  ",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-243,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-63,635cadac4e548c0a12e69544e8e932e69e39a2a1,"1.2.9.0 Documentation typos ------------------------------------------------------------------------------------------------------------------------------------
http://logging.apache.org/log4net/release/sdk/log4net.Layout.PatternLayout.html 
This page has ""It's"" instead of ""Its"" in the following text (this appears several times) 
WARNING Generating caller location information is extremely slow. It's use should be avoided unless execution speed is not an issue. 

------------------------------------------------------------------------------------------------------------------------------------. 
http://logging.apache.org/log4net/release/faq.html#what-is-log4net 
This page has a broken link at the bottom of the page under the ""How do I report bugs?"" title, where it says ""See the support page for details."" 
The ""support"" link here is broken here (it's set to http://logging.apache.org/support.html instead of http://logging.apache.org/log4net/support.html) 

------------------------------------------------------------------------------------------------------------------------------------
Page http://logging.apache.org/log4net/release/manual/configuration.html
Typo 1:
In the following paragraph, the Last sentence should have ""logger"" as plural, i.e. ""All loggers ultimately...""
Root Logger
Only one root logger element may only be defined and it must be a child of <log4net> element. The root logger is the root of the logger hierarchy. All loggers ultimately inherit from this logger.

Typo 2:
Under the ""Loggers"" section, the ""additivity"" attribute is mentioned as a required attribute in the table of attributes, whereas I believe it is optional.
------------------------------------------------------------------------------------------------------------------------------------",Fix for LOG4NET-56. Added support for rendering all IEnumerable types rather than just collections. Added spacial case for IDictionary to ensure that the enumerator returned will enumerate DisctionaryEntry objects even with .NET 2.0 generic collections., MODIFY DefaultRenderer.csDefaultRenderer RenderEnumerator DefaultRenderer RenderCollection DefaultRenderer RenderObject
0,LOG4NET-335,26060334da4fc07c5f768da5a1f7a647a70de42b,"Lost the ability to monitor changes to logger config files when you call ConfigureAndWatch multiple times with different Config File Names - worked fine on 1.2.10.0 We had a class that wraps log4net that is in a shared assembly, multiple components in our application create instances to the Log 4 Net Wrapper, each component has its own log config file.

When the Log4Net wrapper class is constructed it uses log4net.Logmanager to ConfigureAndWatch the log config file passed in to it by the calling component. We recently upgraded from log4net 1.2.10.0 to 1.2.11.0 and log4net no longer detects when the log configuration file is modified. I looked at the source code fro 1.2.11.0 and it appears that it only allows one ConfigureAndWatchHandler object and if you attempt to ConfigureAndWatch more than one logger config file, the previous one is Disposed, thereby removing the ability to detect config file changes","LOG4NET-342 added the property Configured to ILog that allows to check if the repository was configured properly

Usecase:
   if (log.Configured == false) 
   { 
      throw new ConfigurationErrorsException(""Log4net failed to initialize properly.""); 
   }", MODIFY LogImpl.cs MODIFY ILog.cs
0,LOG4NET-71,5f64f8de9766f3ac66e2aec8dc62eb2439171c4f,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.",Fix for LOG4NET-73. Added code to cleanup the connection and command objects that are stored in members if the InitializeDatabaseConnection method is called multiple times., MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-74,75f0d6ef0bb353f893d1065d16e8f1bd873af8d2,"Change MemoryAppender member variables to protected The MemoryAppender is designed to hold the log events in an internal array. The appender can be subclassed, however the internal list is not available to subclasses.
This appender will be more useful if the members are protected.",Fix for LOG4NET-72. CultureInfo.GetCultureInfo is not supported on .net 1.0 and 1.1, MODIFY StringFormatTest.csStringFormatTest TestLogFormatApi_NoFatal StringFormatTest TestLogFormatApi_NoDebug StringFormatTest TestLogFormatApi_NoError StringFormatTest TestLogFormatApi_Error StringFormatTest TestLogFormatApi_NoWarn StringFormatTest TestLogFormatApi_NoInfo StringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info
1,LOG4NET-512,bd9322e06fe741c69963cb4277d74bd5c67aedbc,"Thread safety issue in Hierarchy.cs From inspecting the source code I believe there is a threading bug in the Hierarchy class.  Both of the methods Exists and GetCurrentLoggers access the internal hashtable m_ht without locking.

Impact is minor as both these methods are probably rarely called by third party code, and since they do not modify state, the worst that can happen is an unexpected exception.","LOG4NET-512 thread-safety fix for Hierarchy

Patch by @JJoe2", MODIFY Hierarchy.csHierarchy GetCurrentLoggers Hierarchy Clear Hierarchy Exists
1,LOG4NET-495,17b09952215b8d43f52b6d411b74218429f8b595,"Error when BufferSize is >1, parameter already defined Downloaded the subject revision 1714197 in order to get the ADONetAppender_SqlServer appender to work as this revision corrected a problem. The appender began to work. However if the BufferSize was increased to >1 an error was reported that the parameter @log_date was already defined.

The error appears to be in SendBuffer. Because the IDbCommand dbCmd is being reused inside the foreach (LoggingEvent e in Events), each time the param.Prepare(dbCmd) is called for the same appender it will attempt to add a parameter that has already been added.

My local solution was to clear the commands parameter list prior to adding the preparing the paramters:
   foreach (LoggingEvent e in events)
                    {
                            dbCmd.Parameters.Clear(); //*****added this line*****

                        // Set the parameter values
                        foreach (AdoNetAppenderParameter param in m_parameters)
                        {
                            param.Prepare(dbCmd);
                            param.FormatValue(dbCmd, e);
                        }

                        // Execute the query
                        dbCmd.ExecuteNonQuery();
                    }


",LOG4NET-495: added buffering test for the AdoNetAppender, MODIFY AdoNetAppenderTest.csAdoNetAppenderTest NoBufferingTest AdoNetAppenderTest BufferingTest
0,LOG4NET-310,73bdae467e39a9082d1a6dad3d2d5d26995b2a95,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Race-Condition via shared StringBuilder in ReusableStringWriter.   LOG4NET-212, MODIFY AppenderSkeleton.csAppenderSkeleton RenderLoggingEvent MODIFY PatternConverter.csPatternConverter Format
0,LOG4NET-2,674ee22c3559786e2f28f0e84e4670d46f72a791,"Configurator should report errors I understand that you do not want to throw exceptions
from within the logging methods, as a failure in log4net
would make the hosting app fail.

However, I think it is necessary that DOMConfigurator
throws exceptions. If a failure occurs at that point, for
example due to a malformed configuration file, I believe
the hosting app would in most cases like to know. Even
if it doesn't, it could easily just swallow any exceptions.

In my case, I have a Windows Service app that will just
quit logging if there is an error in the configuration file.
That makes the logging mechanism rather more fragile
than I would like.

Tor Hovland - torhovl

---

I completely agree.  I suggest that you take an additional
step and provide an additional mechanism, perhaps a
ValidateLoggers() method which operates like a standard
logging call, but is capable of throwing exceptions or
providing another form of feedback which would allow the
caller to diagnose bad configurations.  The configuration
file can be well-formed, but logging can still fail for any
number of reasons.

Most applications that provide a logging mechanism employ a
'start-up banner' log entry at an INFO level.  This would be
a great time to detect any problems with the logging system
itself.  I currently have a project deployed at a customer
site and despite a well formed config file... no logging is
taking place.  I don't know why, and there does not seem to
be a simple way to  diagnose the problem.

Ben Newman - benjamin91",Fix for LOG4NET-88. Added ConnectionStringName and AppSettingsKey properties to make it easier to use connection strings stored in well-known locations., MODIFY AdoNetAppender.csAdoNetAppender ResolveConnectionString AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-475,2ce45ddd39877f2955ce645ba01b9e9389b03fd6,"Cannot add appender in Log4net at runtime I am trying to write a custom appender that rolls over daily, as well as on a size limit, and cleans up after itself in the process. I wrote the implementation using the AppenderSkeleton as a base class, then attempted to write a unit test to test the appender functionality. I do the following:

            DailyRollingFileAppender appender = new DailyRollingFileAppender();
            appender.RollOverOnSize = true;
            appender.RollOverDaily = true; //dont think I can test this
            appender.MaxFileSizeBytes = 1024;
            appender.RolloverDayCount = 1;
            appender.RollOverOnSize = true;
            appender.LoggingDirectory = Path.Combine(Directory.GetCurrentDirectory(), ""TestLogFolder"");
            appender.LogFileName = ""TestLogFileName"";
            appender.DateTimeFormatString = ""YYYY-MM-DD-hh-mm-ss"";
            appender.Cleanup = true;
            appender.Layout = new PatternLayout();
            appender.MaxNumberOfFiles = 10;
            appender.Name = ""testAppender"";

            //lets write some crappy log messages
            byte[] bytes = new byte[1050];

            Random rnd = new Random();
            rnd.NextBytes(bytes);

            ILog log = LogManager.GetLogger(""LoggerName"");
            Logger logger = (Logger)log.Logger;
            logger.AddAppender(appender);

            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), new Exception());
            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), null);

The code is based on the only examples I can find of people adding appenders to loggers at runtime, which you would want to do for a unit test. The issue is that the Logger instance I get from the call to ILog.Logger in the code above as a collection of appenders of type ReadOnlyAppenderCollection. The code silently consumes the exception it throws internally and never actually adds the appender to the collection. Can/How do I add an appender to a logger at runtime in the manner described above, so I can appropriately test that it functions. ","LOG4NET-484: fix object disposed exception

This is a modified version of the patch supplied by nn1436401 at gmail dot com.", MODIFY FileAppender.csFileAppender LockingStream Seek FileAppender LockingStream LockingStream FileAppender MinimalLock OpenFile FileAppender LockingStream AssertLocked FileAppender ExclusiveLock AcquireLock FileAppender FileAppender FileAppender InterProcessLock ReleaseLock FileAppender ActivateOptions FileAppender InterProcessLock OpenFile FileAppender ConvertToFullPath FileAppender InterProcessLock AcquireLock FileAppender Reset FileAppender LockingStream BeginWrite FileAppender LockingModelBase CreateStream FileAppender LockingStream ReadByte FileAppender ExclusiveLock ReleaseLock FileAppender LockingModelBase CloseStream FileAppender Append FileAppender LockingStream Close FileAppender SafeOpenFile FileAppender LockingStream AcquireLock FileAppender WriteHeader FileAppender LockingStream Write FileAppender MinimalLock ReleaseLock FileAppender CloseWriter FileAppender LockingStream SetLength FileAppender PrepareWriter FileAppender LockingStream Flush FileAppender WriteFooter FileAppender LockingStream Dispose FileAppender SetQWForFiles FileAppender FileAppender FileAppender LockingStream ReleaseLock FileAppender InterProcessLock CloseFile FileAppender LockingStream LockStateException LockStateException FileAppender OpenFile FileAppender Append FileAppender LockingStream Read FileAppender ExclusiveLock CloseFile FileAppender MinimalLock AcquireLock FileAppender SetQWForFiles FileAppender FileAppender FileAppender MinimalLock CloseFile FileAppender LockingStream BeginRead FileAppender CloseFile FileAppender LockingStream EndWrite FileAppender ExclusiveLock OpenFile FileAppender LockingStream EndRead FileAppender LockingStream WriteByte MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestInterProcessLockRoll RollingFileAppenderTest CreateLogger RollingFileAppenderTest CreateLogger
0,LOG4NET-129,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-49,9e1ead9259bca8cc9b20678810d5703e5166fb16,"CountingQuietTextWriter does not count strings written with WriteLine The CountingQuietTextWriter overrides Write(String) to count the chars written. However it should also override Write(Char) and Write(Char[],int,int).

WriteLine(String) calls Write(Char[],int,int) and therefore the CountingQuietTextWriter is not counting these strings, which are written to the output writer.",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-158,a233bcb1bd3b771cf8bdf9c011f639f341d0a4a7,"XMLConfigurator.ConfigureAndWatch() leaks resources if called multiple times If XMLConfigurator.ConfigureAndWatch() is called multiple times within an AppDomain, each time it is called it leaks a Win32 file  handle (possibly from a FileSystemWatcher object not being disposed?) to the folder containing the previous configuration file it was watching.

Desired behavior would be to release the handle to the folder containing the previous configuration file.",Fix for LOG4NET-168. Add ReplyTo property to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-215,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-206,13e4ce6d0e1d9969e20a84d31f824d020eb64e04,"Unable to build for release version with Visual Studio 2005 I am trying to build log4net.dll using Visual Studio 2005. When I try to build for release I get this error

Error	5	Cryptographic failure while signing assembly 'C:\MyProjects\incubating-log4net-1.2.10\log4net-1.2.10\src\obj\Release\log4net.dll' -- 'Error reading key file '..\..\..\log4net.snk' -- The system cannot find the file specified. '	log4net

Works fine for debug version.
",Fix for LOG4NET-193. Add .NET 2.0 and Compact Framework 2.0 to list of supported frameworks., MODIFY framework-support.xml MODIFY introduction.xml
0,LOG4NET-76,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-313,451cce90f726c70f60f81848ff75413efb4e3e34,"Document %stacktrace and %stacktracedetail There currently only is class-level documentation on %stacktrace and no documentation on %stacktracedetail outside of the StackTraceDetailPatternConverter class at all.  Need to update PatternLayout as well as the site.
",fix bounds-checks in NamedPatternConverter.  LOG4NET-215, MODIFY NamedPatternConverter.csNamedPatternConverter Convert MODIFY PatternLayoutTest.csPatternLayoutTest MessageAsNamePatternConverter GetFullyQualifiedName PatternLayoutTest NamedPatternConverterWithPrecision2ShouldStripLessLeadingStuffIfPresent PatternLayoutTest NamedPatternConverterWithoutPrecisionShouldReturnFullName PatternLayoutTest NamedPatternConverterWithPrecision1ShouldStripLeadingStuffIfPresent
0,LOG4NET-243,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
1,LOG4NET-95,c6956a36942591b93ed3ec34d8a7316d09e1421b,"Level.CompareTo() may result a wrong Value -> sorting of Levels does not work I want to show a sorted list of available Levels.
The sort routine uses Level.Compare(Level l, Level r).
The result might be wrong when comparing ALL to another Level, because there is an overflow when just subtracting the m_levelValue.

try to call the integer compare method:
Level.cs:
		public static int Compare(Level l, Level r)
		{
			...
                        //orig: return l.m_levelValue - r.m_levelValue;  -> bug when int overflow
			return l.m_levelValue.CompareTo(r.m_levelValue);
		}

hope this helps.

best regards, Bernd.",Fix for LOG4NET-95: Replaced subtraction operator used to compare internal Level values with System.Int32's CompareTo to avoid possible overflow issues. All tests continue to pass., MODIFY Level.csLevel Compare
0,LOG4NET-38,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-113,797187e9c9b195a4b6ce93365192e514ba3d7207,"[PATCH] SystemInfo.GetTypeFromString() raises NotSupportedException BUG:
Calling the GetTypeFromString(string, bool, bool) method in .NET CF 2.0 SP1 on Windows CE 4.2 raises a NotSupportedException if the supplied typeName parameter contains a comma ("","") and both boolean values are ""true"", i.e. when specifying a type and the including assembly in the log4net XML configuration.
The exception stems from the overloaded Type.GetType method that takes three parameters. When using the two parameter Type.GetType method, everything works fine.

Steps to reproduce:
On the described environment configure e.g. an Appender and supply the assembly name in the ""type"" attribute.

PATCH:
The patch simply uses the two parameter GetType overload for all NETCF frameworks instead of only for NETCF_1_0.
","LOG4NET-114: Support unit tests on .NET 1.1, 2.0, Mono 2.0", MODIFY prerequisites.txt MODIFY nant.build
0,LOG4NET-376,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-383,0b5dce128eb255fd55ad23421745011db7b700bb,"Log4Net.Error throws VerificationException - Operation could destabilize the runtime We are running into this issue when we log errors/fatal message using log4net. 

> System.Security.VerificationException: Operation could destabilize the
> runtime.    at log4net.Core.LogImpl.Fatal(Object message, Exception
> exception)

Strangely this happens only when we log as Error/Fatal, Info and Debug messages log perfectly fine. Because of this exception, the real exceptions are getting masked and its making it very hard for us to debug in deployed environments. 

I have tried searching online but to no avail. Any help is appreciated.

Environment details:

    IIS 7.5 / Win 2008 R2
    .Net 4.0
    MVC3 and WCF applications

Here is the logging configuration-
 

       <?xml version=""1.0"" encoding=""utf-8"" ?>
        <configuration>
          <configSections>
            <section name=""log4net"" type=""log4net.Config.Log4NetConfigurationSectionHandler,   log4net""/>
          </configSections>  
          <log4net>
          <appender name=""RollingLogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
            <file value=""C:\Logs\ApplicationServices.log"" />
            <staticLogFileName value=""true"" />
            <appendToFile value=""true"" />
            <datePattern value=""yyyyMMdd"" />
            <rollingStyle value=""Date"" />
            <filter type=""log4net.Filter.LevelRangeFilter"">
            <acceptOnMatch value=""true"" />
            <levelMin value=""DEBUG"" />
            <levelMax value=""FATAL"" />
            </filter>
            <layout type=""log4net.Layout.PatternLayout"">      
              <conversionPattern value=""${COMPUTERNAME} %date %-5level %class.%method - %message%newline""/>
            </layout>
          </appender>
          <root>
            <level value=""DEBUG""/>
            <appender-ref ref=""RollingLogFileAppender"" />
          </root>
        </log4net>
        </configuration>
",LOG4NET-71 move log4net's sources to a subdirectory, MODIFY log4net.build MODIFY log4net.include RENAME AdoNetAppender.cs RENAME AnsiColorTerminalAppender.cs RENAME AppenderCollection.cs RENAME AppenderSkeleton.cs RENAME AspNetTraceAppender.cs RENAME BufferingAppenderSkeleton.cs RENAME BufferingForwardingAppender.cs RENAME ColoredConsoleAppender.cs RENAME ConsoleAppender.cs RENAME DebugAppender.cs RENAME EventLogAppender.cs RENAME FileAppender.cs RENAME ForwardingAppender.cs RENAME IAppender.cs RENAME IBulkAppender.cs RENAME LocalSyslogAppender.cs RENAME ManagedColoredConsoleAppender.cs RENAME MemoryAppender.cs RENAME NetSendAppender.cs RENAME OutputDebugStringAppender.cs RENAME RemoteSyslogAppender.cs RENAME RemotingAppender.cs RENAME RollingFileAppender.cs RENAME SmtpAppender.cs RENAME SmtpPickupDirAppender.cs RENAME TelnetAppender.cs RENAME TextWriterAppender.cs RENAME TraceAppender.cs RENAME UdpAppender.cs RENAME AssemblyInfo.cs RENAME AssemblyVersionInfo.cpp RENAME AssemblyVersionInfo.cs RENAME AssemblyVersionInfo.js RENAME AssemblyVersionInfo.vb RENAME AliasDomainAttribute.cs RENAME AliasRepositoryAttribute.cs RENAME BasicConfigurator.cs RENAME ConfiguratorAttribute.cs RENAME DOMConfigurator.cs RENAME DOMConfiguratorAttribute.cs RENAME DomainAttribute.cs RENAME Log4NetConfigurationSectionHandler.cs RENAME PluginAttribute.cs RENAME RepositoryAttribute.cs RENAME SecurityContextProviderAttribute.cs RENAME XmlConfigurator.cs RENAME XmlConfiguratorAttribute.cs RENAME CompactRepositorySelector.cs RENAME DefaultRepositorySelector.cs RENAME ErrorCode.cs RENAME ExceptionEvaluator.cs RENAME IAppenderAttachable.cs RENAME IErrorHandler.cs RENAME IFixingRequired.cs RENAME ILogger.cs RENAME ILoggerWrapper.cs RENAME IOptionHandler.cs RENAME IRepositorySelector.cs RENAME ITriggeringEventEvaluator.cs RENAME Level.cs RENAME LevelCollection.cs RENAME LevelEvaluator.cs RENAME LevelMap.cs RENAME LocationInfo.cs RENAME LogException.cs RENAME LogImpl.cs RENAME LoggerManager.cs RENAME LoggerWrapperImpl.cs RENAME LoggingEvent.cs RENAME MethodItem.cs RENAME SecurityContext.cs RENAME SecurityContextProvider.cs RENAME StackFrameItem.cs RENAME TimeEvaluator.cs RENAME WrapperMap.cs RENAME AbsoluteTimeDateFormatter.cs RENAME DateTimeDateFormatter.cs RENAME IDateFormatter.cs RENAME Iso8601DateFormatter.cs RENAME SimpleDateFormatter.cs RENAME DenyAllFilter.cs RENAME FilterDecision.cs RENAME FilterSkeleton.cs RENAME IFilter.cs RENAME LevelMatchFilter.cs RENAME LevelRangeFilter.cs RENAME LoggerMatchFilter.cs RENAME MdcFilter.cs RENAME NdcFilter.cs RENAME PropertyFilter.cs RENAME StringMatchFilter.cs RENAME GlobalContext.cs RENAME ILog.cs RENAME DynamicPatternLayout.cs RENAME ExceptionLayout.cs RENAME ILayout.cs RENAME IRawLayout.cs RENAME Layout2RawLayoutAdapter.cs RENAME LayoutSkeleton.cs RENAME AppDomainPatternConverter.cs RENAME AspNetCachePatternConverter.cs RENAME AspNetContextPatternConverter.cs RENAME AspNetPatternConverter.cs RENAME AspNetRequestPatternConverter.cs RENAME AspNetSessionPatternConverter.cs RENAME DatePatternConverter.cs RENAME ExceptionPatternConverter.cs RENAME FileLocationPatternConverter.cs RENAME FullLocationPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LevelPatternConverter.cs RENAME LineLocationPatternConverter.cs RENAME LoggerPatternConverter.cs RENAME MessagePatternConverter.cs RENAME MethodLocationPatternConverter.cs RENAME NamedPatternConverter.cs RENAME NdcPatternConverter.cs RENAME PatternLayoutConverter.cs RENAME PropertyPatternConverter.cs RENAME RelativeTimePatternConverter.cs RENAME StackTraceDetailPatternConverter.cs RENAME StackTracePatternConverter.cs RENAME ThreadPatternConverter.cs RENAME TypeNamePatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PatternLayout.cs RENAME RawLayoutConverter.cs RENAME RawPropertyLayout.cs RENAME RawTimeStampLayout.cs RENAME RawUtcTimeStampLayout.cs RENAME SimpleLayout.cs RENAME XMLLayout.cs RENAME XMLLayoutBase.cs RENAME XmlLayoutSchemaLog4j.cs RENAME Log4netAssemblyInfo.cs RENAME LogManager.cs RENAME LogicalThreadContext.cs RENAME MDC.cs RENAME NDC.cs RENAME DefaultRenderer.cs RENAME IObjectRenderer.cs RENAME RendererMap.cs RENAME IPlugin.cs RENAME IPluginFactory.cs RENAME PluginCollection.cs RENAME PluginMap.cs RENAME PluginSkeleton.cs RENAME RemoteLoggingServerPlugin.cs RENAME ConfigurationChangedEventArgs.cs RENAME DefaultLoggerFactory.cs RENAME Hierarchy.cs RENAME ILoggerFactory.cs RENAME Logger.cs RENAME LoggerKey.cs RENAME ProvisionNode.cs RENAME RootLogger.cs RENAME XmlHierarchyConfigurator.cs RENAME IBasicRepositoryConfigurator.cs RENAME ILoggerRepository.cs RENAME IXmlRepositoryConfigurator.cs RENAME LoggerRepositorySkeleton.cs RENAME ThreadContext.cs RENAME AppenderAttachedImpl.cs RENAME CompositeProperties.cs RENAME ContextPropertiesBase.cs RENAME ConverterInfo.cs RENAME CountingQuietTextWriter.cs RENAME CyclicBuffer.cs RENAME EmptyCollection.cs RENAME EmptyDictionary.cs RENAME FormattingInfo.cs RENAME GlobalContextProperties.cs RENAME ILogExtensions.cs RENAME LevelMapping.cs RENAME LevelMappingEntry.cs RENAME LogLog.cs RENAME LogicalThreadContextProperties.cs RENAME NativeError.cs RENAME NullDictionaryEnumerator.cs RENAME NullEnumerator.cs RENAME NullSecurityContext.cs RENAME OnlyOnceErrorHandler.cs RENAME OptionConverter.cs RENAME PatternConverter.cs RENAME PatternParser.cs RENAME PatternString.cs RENAME AppDomainPatternConverter.cs RENAME DatePatternConverter.cs RENAME EnvironmentFolderPathPatternConverter.cs RENAME EnvironmentPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LiteralPatternConverter.cs RENAME NewLinePatternConverter.cs RENAME ProcessIdPatternConverter.cs RENAME PropertyPatternConverter.cs RENAME RandomStringPatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PropertiesDictionary.cs RENAME PropertyEntry.cs RENAME ProtectCloseTextWriter.cs RENAME QuietTextWriter.cs RENAME ReadOnlyPropertiesDictionary.cs RENAME ReaderWriterLock.cs RENAME ReusableStringWriter.cs RENAME SystemInfo.cs RENAME SystemStringFormat.cs RENAME TextWriterAdapter.cs RENAME ThreadContextProperties.cs RENAME ThreadContextStack.cs RENAME ThreadContextStacks.cs RENAME Transform.cs RENAME BooleanConverter.cs RENAME ConversionNotSupportedException.cs RENAME ConverterRegistry.cs RENAME EncodingConverter.cs RENAME IConvertFrom.cs RENAME IConvertTo.cs RENAME IPAddressConverter.cs RENAME PatternLayoutConverter.cs RENAME PatternStringConverter.cs RENAME TypeConverter.cs RENAME TypeConverterAttribute.cs RENAME WindowsSecurityContext.cs RENAME log4net.vs2008.csproj RENAME log4net.vs2008.sln RENAME log4net.vs2010.csproj RENAME log4net.vs2010.sln MODIFY nant.build MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
1,LOG4NET-275,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
1,LOG4NET-114,3e9b008d60aff3552999d14adebdda8ae687f026,"Unit tests only support .NET 1.0 tests/nant.build only supports running the unit tests on .NET 1.0, but supports compilation on .NET 1.1 and .NET 2.0.  Mono is not supported for either test compilation or running.","LOG4NET-114. Resolved some line ending issues in the tests. Tests were hard coded to expect \r\n, changed to use Environment.NewLine.", MODIFY RollingFileAppenderTest.csRollingFileAppenderTest VerifyRolling RollingFileAppenderTest TestRollingCountUpInfiniteBackups RollingFileAppenderTest TestRollingCountUpZeroBackups RollingFileAppenderTest TestRollingCountUpFixedBackups RollingFileAppenderTest TestRollingCountDownInfiniteBackups RollingFileAppenderTest TestRollingCountDownFixedBackups RollingFileAppenderTest TestRollingCountDownZeroBackups RollingFileAppenderTest GetTestMessage MODIFY StringFormatTest.csStringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info StringFormatTest TestLogFormatApi_Error MODIFY XmlLayoutTest.csXmlLayoutTest CreateEventNode XmlLayoutTest CreateEventNode
0,LOG4NET-126,013cdb8fa04e3a3f4bf0543c90277de6a217b627,"Links on the log4net Examples page do not work, including the overview link explaining why the other links do not work The page at

http://logging.apache.org/log4net/release/example-apps.html

is one of the first pages that new users will visit.

The Overview section at the top of the page explains that none of the links given for examples, such as

http://logging.apache.org/examples/mono/1.0/Tutorials/ConsoleApp/cs

work, which is a shame as they would be a very handy reference. 

I skipped past this explanation looking for an example for SMTPAppender. It was only when I realised that none of the links were working that I scrolled back to the top of the page and saw the Overview section.


The Overview section gives a link to the release download, it gives

http://logging.apache.org/log4net/downloads.html

which also doesn't work. it should be 

http://logging.apache.org/log4net/download.html


Fixing these links would give a far better impression to new users.

Cheers

Brian

",Fix for LOG4NET-128. Explain the comma/semicolon differences between various versions of the Framework., MODIFY SmtpAppender.cs
0,LOG4NET-283,3ccf8e704ee310c3e7c42665b17b15297fed0358,"OnlyOnceErrorHandler is not subclass-friendly If you ever try to use the ErrorHandler attribute with a custom error handler, it won't write out the messages.  For example:

  <appender name=""Database_Appender"" type=""log4net.Appender.AdoNetAppender"">
   <errorHandler type=""CHO.Next.Global.LogWriterErrorHandler, CHO.Next.Global"" />

Where the class is defined as:

    public class LogWriterErrorHandler : OnlyOnceErrorHandler
    {
        
        public new void Error(string message)
        {
            Error(message, null);
        }
        public new void Error(string message, Exception e)
        {
            Error(message, e, ErrorCode.GenericFailure);
        }
        public new void Error(string message, Exception e, ErrorCode errorCode)
        {
          // write to a file here
         }
     }
     
This was specified as a fix on a few posts like this http://www.mail-archive.com/log4net-user@logging.apache.org/msg04378.html and there hasn't been anything to correct it.

The reason this won't work is that Error is not virtual.  Although the LogWriterErrorHandler is instantiated and the constructor is called, when the appender makes a call to this.ErrorHandler.Error, it calls the base class of OnlyOnceErrorHandler and not LogWriterErrorHandler.  

I would recommend you make the Error methods in AppenderSkeleton virtual so that they can be overriden.  Otherwise, what is the value of even having the ErrorHandler attribute available on the appender?

",a PaternLayout subclass that re-evaluates header and footer on each call.  Submitted by Roy Chastain.  LOG4NET-316, ADD DynamicPatternLayout.csDynamicPatternLayout DynamicPatternLayout DynamicPatternLayout DynamicPatternLayout MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj ADD DynamicPatternLayoutTest.csDynamicPatternLayoutTest NewPatternLayout DynamicPatternLayoutTest NewPatternLayout MODIFY PatternLayoutTest.csPatternLayoutTest NamedPatternConverterWithPrecision2ShouldStripLessLeadingStuffIfPresent PatternLayoutTest TestStackTracePattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TestAddingCustomPattern PatternLayoutTest TestExceptionPattern PatternLayoutTest NamedPatternConverterWithPrecision1ShouldStripLeadingStuffIfPresent PatternLayoutTest NewPatternLayout PatternLayoutTest NamedPatternConverterWithoutPrecisionShouldReturnFullName PatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest NewPatternLayout MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-95,aaf4127a35bd1f74f897871f834c3c2bab1f52bb,"Level.CompareTo() may result a wrong Value -> sorting of Levels does not work I want to show a sorted list of available Levels.
The sort routine uses Level.Compare(Level l, Level r).
The result might be wrong when comparing ALL to another Level, because there is an overflow when just subtracting the m_levelValue.

try to call the integer compare method:
Level.cs:
		public static int Compare(Level l, Level r)
		{
			...
                        //orig: return l.m_levelValue - r.m_levelValue;  -> bug when int overflow
			return l.m_levelValue.CompareTo(r.m_levelValue);
		}

hope this helps.

best regards, Bernd.","Changed Cache, Context, and Request converters to output all of their key/value pairs if the Option property is not set. Added overload to PatternConverter.WriteDictionary to accept an IDictionaryEnumerator to allow the AspNetCachePatternConverter to send its contents (Cache.GetEnumerator()) to WriteDictionary to be auto-formatted. LOG4NET-87.", MODIFY AspNetCachePatternConverter.csAspNetCachePatternConverter Convert MODIFY AspNetContextPatternConverter.csAspNetContextPatternConverter Convert MODIFY AspNetRequestPatternConverter.csAspNetRequestPatternConverter Convert MODIFY PatternConverter.csPatternConverter WriteDictionary PatternConverter WriteDictionary
0,LOG4NET-141,d9cc0bb25bdf4615422bf9f110012ebd45314157,Add CreateConnection method to AdoNetAppender to allow subclasses to have control of IDbConnection. The IDbConnection is created in the private method InitializeDatabaseConnection. Use the Connection property to set the connection object does not work when a reconnect is required. Add a CreateConnection method to allow sub-classes that handle creating their own connection.,Test for LOG4NET-28 demonstrating how to insert NULL values using both an xml configuration and progmatic configuration., MODIFY AdoNetAppenderTest.csAdoNetAppenderTest NullPropertyProgmaticConfig AdoNetAppenderTest NullPropertyXmlConfig
0,LOG4NET-70,5f64f8de9766f3ac66e2aec8dc62eb2439171c4f,CoreDll.dll referenced with different capitalisation The CoreDll.dll is referenced as both CoreDll.dll and coredll.dll. This has no effect on functionality but we should be consistant and use CoreDll.dll.,Fix for LOG4NET-73. Added code to cleanup the connection and command objects that are stored in members if the InitializeDatabaseConnection method is called multiple times., MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-95,0ef4194ecf833aa255b0996ec8e41230a3039e3f,"Level.CompareTo() may result a wrong Value -> sorting of Levels does not work I want to show a sorted list of available Levels.
The sort routine uses Level.Compare(Level l, Level r).
The result might be wrong when comparing ALL to another Level, because there is an overflow when just subtracting the m_levelValue.

try to call the integer compare method:
Level.cs:
		public static int Compare(Level l, Level r)
		{
			...
                        //orig: return l.m_levelValue - r.m_levelValue;  -> bug when int overflow
			return l.m_levelValue.CompareTo(r.m_levelValue);
		}

hope this helps.

best regards, Bernd.",Added missing documentation for ASP.Net related PatternConverters. LOG4NET-87., MODIFY AspNetCachePatternConverter.csAspNetCachePatternConverter Convert AspNetCachePatternConverter Convert MODIFY AspNetContextPatternConverter.cs MODIFY AspNetPatternConverter.cs MODIFY AspNetRequestPatternConverter.cs MODIFY AspNetSessionPatternConverter.csAspNetSessionPatternConverter Convert
0,LOG4NET-38,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-388,c70348a6dba2c6c27a3e64e2ef7ac8189ce978af,"[PATCH] NotSupportedException is thrown in SystemInfo.AssemblyLocationInfo for dynamic assemblies For dynamic assemblies ""Location"" property shouldn't be used (http://msdn.microsoft.com/en-us/library/system.reflection.assembly.location.aspx).
Therefore in log4net.Util.SystemInfo we can test if assembly is dynamic and in result avoid exception.

Exception is very annoying and popular with NHibernate 3.3.3.4001.

I have added both fix and test.",LOG4NET-218 fixed some tests to work again because of culture trouble, MODIFY RollingFileAppenderTest.csRollingFileAppenderTest SetUp RollingFileAppenderTest TearDown MODIFY StringFormatTest.csStringFormatTest TearDown StringFormatTest SetUp MODIFY PatternLayoutTest.csPatternLayoutTest SetUp PatternLayoutTest TestStackTracePattern PatternLayoutTest TearDown MODIFY XmlLayoutTest.csXmlLayoutTest BracketsInStackTracesAreEscapedProperly XmlLayoutTest SetUp XmlLayoutTest TearDown MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-117,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-275,09f7293056e8abf36655537318384e9bd0ff5c9e,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
1,LOG4NET-56,635cadac4e548c0a12e69544e8e932e69e39a2a1,Support rendering IEnumerator objects as well as ICollections Some objects that use IDictionary objects expose an IDictionaryEnumerator instead of the underlying IDictionary. HttpRuntime.Cache.GetEnumerator() is one such object.,Fix for LOG4NET-56. Added support for rendering all IEnumerable types rather than just collections. Added spacial case for IDictionary to ensure that the enumerator returned will enumerate DisctionaryEntry objects even with .NET 2.0 generic collections., MODIFY DefaultRenderer.csDefaultRenderer RenderEnumerator DefaultRenderer RenderCollection DefaultRenderer RenderObject
0,LOG4NET-243,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-106,6b91b595de6654532a9614e0890c8346eb1487a1,"TraceAppender : Add switch to disable using logger name as trace category TraceAppender now always put logger name as trace category when writing to System.Diagnostics.Trace.Write
ie. :
System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);

This resulted in logger's name appearing twice in Trace logs if once use/share the same conversion for both file-based and trace appenders, eg.
""%date [%thread] %-5level %logger - %message%""

It would be nice to have a settable property on TraceAppender to disable using logger's name as trace category, ie. :

public bool UseLoggerNameAsTraceCategory
{
get; set;
}

...
if (m_useLoggerNameAsTraceCategory)
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);
}
else
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), null);
}





","Fix for LOG4NET-96. Added EnabledDate, ErrorCode, ErrorMessage, and Exception properties to track when an OnlyOnceErrorHandler becomes active. Added Reset method which disables the error handler thus allowing it to become active again.", MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler if OnlyOnceErrorHandler Reset OnlyOnceErrorHandler Error OnlyOnceErrorHandler if OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error
1,LOG4NET-311,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-310,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-60,186421082617e3383b52c97153fc31b3ee8d2982,"Bug in RollingFileAppender.cs causing failure to timely roll files on monthly interval code in said file looks like this

				case RollPoint.TopOfMonth:
					current = current.AddMilliseconds(-current.Millisecond);
					current = current.AddSeconds(-current.Second);
					current = current.AddMinutes(-current.Minute);
					current = current.AddHours(-current.Hour);
					current = current.AddMonths(1);
					break;

i belive it should look something like this

				case RollPoint.TopOfMonth:
					current = current.AddMilliseconds(-current.Millisecond);
					current = current.AddSeconds(-current.Second);
					current = current.AddMinutes(-current.Minute);
					current = current.AddHours(-current.Hour);
					current = current.AddDays(1 - current.Day);      // this line seems to be needed
					current = current.AddMonths(1);
					break;



also in a separate issue, since there is no RollPoint.TopOfYear, this comment in another part of the code seems wrong:

				//is the new file name equivalent to the 'current' one
				//something has gone wrong if we hit this -- we should only
				//roll over if the new file will be different from the old
				string dateFormat = m_now.ToString(m_datePattern, System.Globalization.DateTimeFormatInfo.InvariantInfo);
				if (m_scheduledFilename.Equals(File + dateFormat)) 
				{
					ErrorHandler.Error(""Compare "" + m_scheduledFilename + "" : "" + File + dateFormat);
					return;
				}

if the date pattern specifies only the year (rolling yearly), then i think this ""error"" will be triggered incorrectly 11 times a year. it's fine not to roll, but reporting an error is inappropriate.
",Fixed LOG4NET-63. Fixed typos and broken links in documentation., MODIFY FileAppender.csFileAppender LockingStream EndWrite MODIFY RollingFileAppender.cs MODIFY PatternLayout.cs MODIFY faq.xml MODIFY configuration.xml
0,LOG4NET-60,635cadac4e548c0a12e69544e8e932e69e39a2a1,"Bug in RollingFileAppender.cs causing failure to timely roll files on monthly interval code in said file looks like this

				case RollPoint.TopOfMonth:
					current = current.AddMilliseconds(-current.Millisecond);
					current = current.AddSeconds(-current.Second);
					current = current.AddMinutes(-current.Minute);
					current = current.AddHours(-current.Hour);
					current = current.AddMonths(1);
					break;

i belive it should look something like this

				case RollPoint.TopOfMonth:
					current = current.AddMilliseconds(-current.Millisecond);
					current = current.AddSeconds(-current.Second);
					current = current.AddMinutes(-current.Minute);
					current = current.AddHours(-current.Hour);
					current = current.AddDays(1 - current.Day);      // this line seems to be needed
					current = current.AddMonths(1);
					break;



also in a separate issue, since there is no RollPoint.TopOfYear, this comment in another part of the code seems wrong:

				//is the new file name equivalent to the 'current' one
				//something has gone wrong if we hit this -- we should only
				//roll over if the new file will be different from the old
				string dateFormat = m_now.ToString(m_datePattern, System.Globalization.DateTimeFormatInfo.InvariantInfo);
				if (m_scheduledFilename.Equals(File + dateFormat)) 
				{
					ErrorHandler.Error(""Compare "" + m_scheduledFilename + "" : "" + File + dateFormat);
					return;
				}

if the date pattern specifies only the year (rolling yearly), then i think this ""error"" will be triggered incorrectly 11 times a year. it's fine not to roll, but reporting an error is inappropriate.
",Fix for LOG4NET-56. Added support for rendering all IEnumerable types rather than just collections. Added spacial case for IDictionary to ensure that the enumerator returned will enumerate DisctionaryEntry objects even with .NET 2.0 generic collections., MODIFY DefaultRenderer.csDefaultRenderer RenderEnumerator DefaultRenderer RenderCollection DefaultRenderer RenderObject
0,LOG4NET-17,9e1ead9259bca8cc9b20678810d5703e5166fb16,"Line-wrapping Appender Layouts I think a line-wrapping layout, or a line-wrapping version
or extension of one or more of the current layouts (or a
way to decorate or extend one of the current layouts....)
would be very useful. Such a layout could take a
threshold that is the number of chars that is the
maximum length for a line, as well as an indentation
amount for leading space characters for the indented
lines. I'm sure one could easily imagine more
complicated things it could do....

Given time, I might be interested in contributing to such
an addition.

regards,

carl",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-214,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-25,68a31477786920c4670fa05845f935fcff0e7a71,"RollingFileAppender can fail if RollOverIfDateBoundaryCrossing required RollingFileAppender fails if RollOverIfDateBoundaryCrossing required and current directory is not ApplicationBase directory.

RollOverIfDateBoundaryCrossing is called before the base class (FileAppender) ActivateOptions method is called. Therefore the File property has not yet been converted to a fully qualified path. If the current directory is not the ApplicationBase directory (e.g. when running under ASP.NET) then the RollFile call will fail with the message ""Source does not exist"" in the internal debug log.",Fix LOG4NET-24. Programmatic flush of BufferingAppenderSkeleton buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton Append
0,LOG4NET-241,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-117,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-212,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-81,253fd40091eb66756f90a1afcb4bc5c043ccc9d4,"LoggerRepositorySkeleton's OnConfigurationChanged method always raises its event with EventArgs.Empty instead of passing through its EventArgs parameter. This code:

protected virtual void OnConfigurationChanged(EventArgs e)
{
 if (e == null)
 {
  e = EventArgs.Empty;
 }

 LoggerRepositoryConfigurationChangedEventHandler handler = m_configurationChangedEvent;
 if (handler != null)
 {
  handler(this, EventArgs.Empty);
 }
}

should be changed to match the other event handlers in the class:

protected virtual void OnConfigurationChanged(EventArgs e)
{
 if (e == null)
 {
  e = EventArgs.Empty;
 }

 LoggerRepositoryConfigurationChangedEventHandler handler = m_configurationChangedEvent;
 if (handler != null)
 {
  handler(this, e); // do not always pass in EventArgs.Empty
 }
}",Fix for LOG4NET-79. Added catch handler for SecurityException in LogicalThreadContextProperties GetProperties method. This is caused by a LinkDemand for Infrastructure permission on the CallContext.GetProperties method., MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties SetCallContextData LogicalThreadContextProperties GetCallContextData LogicalThreadContextProperties GetProperties
1,LOG4NET-93,3fcb26f06ca6b56db29f9b03fbf1d1cbea5016df,"Typos for node name in tutorial, excess quote, invalid XML log4net-1.2.10\examples\net\1.1\Tutorials\ConsoleApp\js\src

App.config

Line 42

<geader should be <header

Line  86

<commandText"" value="" should be <commandText value=""

Line 93

</param> should be </layout>


Suggest the build process should validate all example config files against the schema or DTD.

Patched file attached.

","Fix for LOG4NET-93. Typos for node name in tutorial, excess quote, invalid XML from David McNeill.", MODIFY App.config
1,LOG4NET-172,6d61970a1a37a3727fed50f48e78336d8edea23b,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.",LOG4NET-172 add VS project files for WebServiceAppender example, ADD WebServiceAppender.csproj MODIFY cs-examples.sln
0,LOG4NET-52,4d1b0c824d6c189b8da52c726d2b906c966a081c,"Allow XML configurator to set properties of type Object Currently the XML config parse cannot set string values on properties of type object. 
It is possible to force the parser to do this by explicitly setting the type on the element, e.g. <foo type=""System.String"" value=""test"" />.
It would be more natural if this explicit type was not required.","Fix for LOG4NET-50 Process.StartTime hangs on some systems
Changed to store the time the library is loaded rather than looking up the start time for the current process.", MODIFY SystemInfo.csSystemInfo if
0,LOG4NET-354,28a63b970d0a7d43f0adeaf7807fd943e35472d6,"E-mail encoding configuration setting for SmtpAppender It would be nice if we could specify body transfer encoding and subject encoding in SmtpAppender (via configuration settings).
All unicode characters are rendered as question marks, because SmtpAppender uses the default settings:

Content-Type: text/plain;charset=""iso-8859-1""
Content-Transfer-Encoding: 7bit",LOG4NET-316 added a configuration example that explains the usage of DynamicPatternLayout, MODIFY config-examples.xml
0,LOG4NET-310,d78a5f8331dad60de277fecda43205412ccb464a,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
1,LOG4NET-90,d5af0ed54223baf8d96d798f745d16680ee737c3,"update config documentation (remove typo) http://logging.apache.org/log4net/release/config-examples.html#adonetappender-o9

contains ""pParameterName "" >> should be ""parameterName """,Fix for LOG4NET-90. Correct typo (pParameterName should be parameterName) in xdoc documentation., MODIFY config-examples.xml
0,LOG4NET-167,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-153,289a3f2a030c75e6fb0912f2c0c22021848d587c,"Make it easier to configure multiple appenders in code using BasicConfigurator Users wanting to configure log4net in code using more than just a single appender must cast the repository into a Hierarchy then manually add elements:

 Repository.Hierarchy.Hierarchy hierarchy = 
     (Repository.Hierarchy.Hierarchy)LogManager.GetRepository();
 hierarchy.Root.AddAppender(alpha);
 hierarchy.Root.AddAppender(beta);
 hierarchy.Configured = true;

The BasicConfigurator should make it easier to accomplish this:

 BasicConfigurator.Configure(alpha, beta);

This can be accomplished by adding an overload to Configure that accepts an params IAppender[]:

 IBasicRepositoryConfigurator.Configure(params IAppender[] appenders)",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
1,LOG4NET-316,28a63b970d0a7d43f0adeaf7807fd943e35472d6,"Provide a Layout Pattern that is re-evaluated on each use The DynamicPatternLayout is a layout pattern that is re-evaluated on each use.  It is appropriate to use instead of LayoutPattern to provide dynamic strings in headers and footers for appenders.  Datetime is an example.  Using the standard layout pattern results in the same datetime in each header and footer, while using DynamicPatternLayout results in timestamp of the header/footer creation.

Example
<layout type=""log4net.Layout.DynamicPatternLayout"">
  <param name=""Header"" value=""%newline**** Trace Opened     Local: %date{yyyy-MM-dd HH:mm:ss.fff}     UTC: %utcdate{yyyy-MM-dd HH:mm:ss.fff} ****%newline""/>
  <param name=""Footer"" value=""**** Trace Closed %date{yyyy-MM-dd HH:mm:ss.fff} ****%newline""/>
</layout>",LOG4NET-316 added a configuration example that explains the usage of DynamicPatternLayout, MODIFY config-examples.xml
0,LOG4NET-13,eb02bce2d20473bba7b2fddbad056f90651054dd,"Allow SMTPAppender to have replaceable parameters in Subject It would be helpful to be able to have parameters that
are replaced on a per-log event basis on the Subject
line for the SMTPAppender.

Example:
I have multiple web servers running a .NET web service
and all use log4net. When an error occurs, they use the
SMTPAppender to notify me. It would be very useful to
include the host name of the sender in the subject line
so that I could easily determine which web server had
an error instead of having to look into the email.

In thinking more about this it could either be the
Subject line or the From line that has replacable
parameters. Perhaps even make it so that these
properties can use the <layout> tag.

Jeremy Wiebe - jeropa",Fix for LOG4NET-45. Added constructor and property to take plugin type as a Type, MODIFY PluginAttribute.csPluginAttribute ToString PluginAttribute PluginAttribute PluginAttribute CreatePlugin PluginAttribute PluginAttribute PluginAttribute PluginAttribute
1,LOG4NET-341,8d38538aadae55824e5059583e8a3a4a85d97f6d,"RemotingAppender Error I have a solution with a console application (.Net 4 and log4net v1.2.11) which implement the Remoting sink - server side. And a WPF or WindowsForms application - client side. The framework version on the client side doesn't matter. But the log4net version is different. On v1.2.10 anything is ok. When I reference the client with v1.2.11 throw this error: 

log4net:ERROR [RemotingAppender] ErrorCode: GenericFailure. Failed in SendBufferCallback
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileNotFoundException: Could not load file or assembly 'WpfTestApplication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Das System kann die angegebene Datei nicht finden.
   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)
   at System.Reflection.Assembly.Load(String assemblyString)
   at System.Runtime.Serialization.FormatterServices.LoadAssemblyFromString(String assemblyName)
   at System.Reflection.MemberInfoSerializationHolder..ctor(SerializationInfo info, StreamingContext context)
   --- End of inner exception stack trace ---

Server stack trace: 
   at System.RuntimeMethodHandle._SerializationInvoke(IRuntimeMethodInfo method, Object target, SignatureStruct& declaringTypeSig, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.CompleteISerializableObject(Object obj, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.FixupSpecialObject(ObjectHolder holder)
   at System.Runtime.Serialization.ObjectManager.DoFixups()
   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Remoting.Channels.CoreChannel.DeserializeBinaryRequestMessage(String objectUri, Stream inputStream, Boolean bStrictBinding, TypeFilterLevel securityLevel)
   at System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
   at log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(LoggingEvent[] events)
   at log4net.Appender.RemotingAppender.SendBufferCallback(Object state)
",LOG4NET-341 fix stack frame item compilation warning, MODIFY StackFrameItem.csStackFrameItem StackFrameItem
1,LOG4NET-77,de55add6883c361c9bc242d6d285ad392a1d8ed8,"A small improvement of log4net.Layout.Pattern.ExceptionPatternConverter  - added 'Option' propery support A small improvement of log4net.Layout.Pattern.ExceptionPatternConverter  - added 'Option' propery support
Example of usage:
    <appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"" >
      <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""%exception{TargetSite} - %exception{Message}%newline"" />
      </layout>
    </appender>
","Fix for LOG4NET-77. ExceptionPatternConverter now supports outputting specific information (Source, StackTace, etc.) about an Exception.", MODIFY ExceptionPatternConverter.csExceptionPatternConverter ExceptionPatternConverter ExceptionPatternConverter Convert MODIFY PatternLayoutTest.csPatternLayoutTest TestExceptionPattern
0,LOG4NET-371,2f3bb2d6736c90407b942e053d63916e16dac66e,"Log with formatting doesn't call custom renderers (IObjectRenderer) If I log an object using ILog.Info(myObject), myObjectRenderer is used. If I use ILog.InfoFormat(""my object is: {0}"", myObject) then the default renderer is used.

I spent hours trying to figure out why the default renderer was being used and then on a whim I used the non-formatted log method and everything worked correctly. At the very least I would like the documentation for this feature to specify that only the non-formatted logging methods make use of custom renderers.",LOG4NET-342 added a FAQ entry that describes how to check if the repository was configured and how one can enumerate the configuration messages, MODIFY faq.xml
0,LOG4NET-455,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,LogicalThreadContext does not flow correctly through async/await  This ticket accompanies github pull request #12 https://github.com/apache/log4net/pull/12,LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-65,974427fe43314c80595bb726862f5dfb02b15abd,"Unhandled SecurityException exception for FileIOPermission while loading configuration file If the calling application does not have the PathDiscovery FileIOPermission a SecurityException is generated from the XmlConfiguratorAttribute.Configure method. This is called from the first LoggerManager.GetLogger in a calling assembly.

The exception should be caught as we may potentially be injecting this exception into user code's class initialisation phase which the user would find unexpected.

An example stack trace for the exception is:

[SecurityException: Request for the permission of type 'System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' failed.]
   System.Security.CodeAccessSecurityEngine.Check(Object demand, StackCrawlMark& stackMark, Boolean isPermSet) +0
   System.Security.CodeAccessPermission.Demand() +59
   System.AppDomainSetup.VerifyDir(String dir, Boolean normalize) +110
   System.AppDomain.get_BaseDirectory() +61
   log4net.Util.SystemInfo.get_ApplicationBaseDirectory() +31
   log4net.Config.XmlConfiguratorAttribute.Configure(Assembly sourceAssembly, ILoggerRepository targetRepository) +30
   log4net.Core.DefaultRepositorySelector.ConfigureRepository(Assembly assembly, ILoggerRepository repository) +314
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType, String repositoryName, Boolean readAssemblyAttributes) +532
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType) +42
   log4net.Core.DefaultRepositorySelector.GetRepository(Assembly repositoryAssembly) +80
   log4net.Core.LoggerManager.GetLogger(Assembly repositoryAssembly, String name) +132
   log4net.LogManager.GetLogger(Assembly repositoryAssembly, String name) +30
   log4net.LogManager.GetLogger(String name) +34
","Fix for LOG4NET-58 Support clean build on .NET 2.0.
Updates to work around obsolete warning messages from the MS .NET 2.0 compiler.", MODIFY log4net.build MODIFY EventLogAppender.csEventLogAppender ActivateOptions EventLogAppender CreateEventSource MODIFY SmtpAppender.csSmtpAppender SendBuffer MODIFY XmlConfigurator.csXmlConfigurator Configure XmlConfigurator Configure MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository MODIFY LevelMap.cs MODIFY LoggerManager.csLoggerManager LoggerManager MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator Configure MODIFY LogLog.csLogLog LogLog MODIFY SystemInfo.csSystemInfo GetAppSetting SystemInfo CreateCaseInsensitiveHashtable SystemInfo SystemInfo MODIFY IPAddressConverter.csIPAddressConverter ConvertFrom MODIFY RemotingAppenderTest.csRemotingAppenderTest RegisterRemotingServerChannel MODIFY XmlLayoutTest.csXmlLayoutTest createEventNode XmlLayoutTest createEventNode
0,LOG4NET-212,8abe90a8efc15a0770dfa9253d54d18c891cec65,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
1,LOG4NET-331,17fa2d8992fc0ca6eecb5c23ab452b0802aaed5d,"AdoNetAppender errors when writing Asp.net item when Request object is null When using AdoNetAppender, with a conversion pattern of '%aspnet-request{REMOTE_ADDR}', and I attempt to write a log entry during the Application_Start event, it throws an error (internally) and stops working. The error refers to ""...Request is not available in this context.."" which makes sense because its only in the Application_Start event. However the appender should accommodate this situation and log null, not throw an error. The RollingFileAppender, for instance,  handles this gracefully.",LOG4NET-331 gracefully handle IIS7 integrated mode's behavior when request is not available (other modes and versions simply return null for the request property), MODIFY AspNetRequestPatternConverter.csAspNetRequestPatternConverter Convert
0,LOG4NET-214,54493ed542fa2c3ab36809f1b5a65b8daa97d1ae,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",Deal with SecurityException in EventLogAppender more gracefully.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY EventLogAppenderTest.csEventLogAppenderTest ActivateOptionsDisablesAppenderIfSourceDoesntExist EventLogAppenderTest TestGetEntryTypeForExistingApplicationName EventLogAppenderTest TestGetEntryType
0,LOG4NET-215,3906958b6efc70f61cb897ceb3b4f15ea6146b14,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Fix for LOG4NET-154. Added StackTracePatternConverter that outputs the methods called before the log message., ADD StackTracePatternConverter.csStackTracePatternConverter ActivateOptions StackTracePatternConverter Convert
1,LOG4NET-495,5f4c6b6c3a61b77f4bffa8e3bd8041fd6fb86068,"Error when BufferSize is >1, parameter already defined Downloaded the subject revision 1714197 in order to get the ADONetAppender_SqlServer appender to work as this revision corrected a problem. The appender began to work. However if the BufferSize was increased to >1 an error was reported that the parameter @log_date was already defined.

The error appears to be in SendBuffer. Because the IDbCommand dbCmd is being reused inside the foreach (LoggingEvent e in Events), each time the param.Prepare(dbCmd) is called for the same appender it will attempt to add a parameter that has already been added.

My local solution was to clear the commands parameter list prior to adding the preparing the paramters:
   foreach (LoggingEvent e in events)
                    {
                            dbCmd.Parameters.Clear(); //*****added this line*****

                        // Set the parameter values
                        foreach (AdoNetAppenderParameter param in m_parameters)
                        {
                            param.Prepare(dbCmd);
                            param.FormatValue(dbCmd, e);
                        }

                        // Execute the query
                        dbCmd.ExecuteNonQuery();
                    }


",LOG4NET-495: added buffering website test for the AdoNetAppender, MODIFY AdoNetAppenderTest.csAdoNetAppenderTest BufferingWebsiteExample AdoNetAppenderTest WebsiteExample
0,LOG4NET-143,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-344,3fb279c8c87d3a1d5808f1e9504185673e35c78f,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",LOG4NET-343 exception if logger name is '.', MODIFY Hierarchy.csHierarchy UpdateParents MODIFY Hierarchy.csHierarchy AddingMultipleAppenders2 Hierarchy LoggerNameCanConsistOfASingleDot Hierarchy LoggerNameCanConsistOfASingleNonDot Hierarchy SetRepositoryPropertiesInConfigFile Hierarchy LoggerNameCanContainSequenceOfDots
0,LOG4NET-215,b9c24915eadbbb665778ef42524fd74d99eb969a,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-275,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-214,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-187,1874be5bbe7166a70b930e2df6887d84c86dd4d8,Add a Trace level with isTraceEnabled. I am adding a simple patch for a trace level logging.,merge fix for LOG4NET-376 from 1.2.x branch, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-371,95824fd8b68cefb8975bec151156f3d76fc1b981,"Log with formatting doesn't call custom renderers (IObjectRenderer) If I log an object using ILog.Info(myObject), myObjectRenderer is used. If I use ILog.InfoFormat(""my object is: {0}"", myObject) then the default renderer is used.

I spent hours trying to figure out why the default renderer was being used and then on a whim I used the non-formatted log method and everything worked correctly. At the very least I would like the documentation for this feature to specify that only the non-formatted logging methods make use of custom renderers.",LOG4NET-386 added a method in ThreadContextProperties to retrieve the property keys, MODIFY ThreadContextProperties.csThreadContextProperties GetKeys
1,LOG4NET-388,8d52c980e820dc70816bc56743d6ab4e56dcf1c8,"[PATCH] NotSupportedException is thrown in SystemInfo.AssemblyLocationInfo for dynamic assemblies For dynamic assemblies ""Location"" property shouldn't be used (http://msdn.microsoft.com/en-us/library/system.reflection.assembly.location.aspx).
Therefore in log4net.Util.SystemInfo we can test if assembly is dynamic and in result avoid exception.

Exception is very annoying and popular with NHibernate 3.3.3.4001.

I have added both fix and test.","LOG4NET-388 fixed a NotSupportedException thrown in SystemInfo when encountering a dynamic assembly

Kudos to Piotr Westfalewicz for working out the patch.", MODIFY SystemInfo.csSystemInfo AssemblyLocationInfo MODIFY SystemInfoTest.csSystemInfoTest GetAssemblyLocationInfoMethodCall SystemInfoTest TestAssemblyLocationInfoMethod SystemInfoTest TestAssemblyLocationInfoDoesNotThrowNotSupportedExceptionForDynamicAssembly
0,LOG4NET-71,75f0d6ef0bb353f893d1065d16e8f1bd873af8d2,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.",Fix for LOG4NET-72. CultureInfo.GetCultureInfo is not supported on .net 1.0 and 1.1, MODIFY StringFormatTest.csStringFormatTest TestLogFormatApi_NoFatal StringFormatTest TestLogFormatApi_NoDebug StringFormatTest TestLogFormatApi_NoError StringFormatTest TestLogFormatApi_Error StringFormatTest TestLogFormatApi_NoWarn StringFormatTest TestLogFormatApi_NoInfo StringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info
0,LOG4NET-376,61ca3990f6a28245ab78273480ee74891d9564b2,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




","LOG4NET-447 provide a PopAllEvents method for thread-safe access to
MemoryAppender

Patch by  Gregory Babski", ADD MemoryAppenderTest.csMemoryAppenderTest LogMessages MemoryAppenderTest TestThreadSafety MODIFY MemoryAppender.csMemoryAppender PopAllEvents
0,LOG4NET-341,78c420aea76cb9c7cded0d7205fc28fe67c840db,"RemotingAppender Error I have a solution with a console application (.Net 4 and log4net v1.2.11) which implement the Remoting sink - server side. And a WPF or WindowsForms application - client side. The framework version on the client side doesn't matter. But the log4net version is different. On v1.2.10 anything is ok. When I reference the client with v1.2.11 throw this error: 

log4net:ERROR [RemotingAppender] ErrorCode: GenericFailure. Failed in SendBufferCallback
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileNotFoundException: Could not load file or assembly 'WpfTestApplication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Das System kann die angegebene Datei nicht finden.
   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)
   at System.Reflection.Assembly.Load(String assemblyString)
   at System.Runtime.Serialization.FormatterServices.LoadAssemblyFromString(String assemblyName)
   at System.Reflection.MemberInfoSerializationHolder..ctor(SerializationInfo info, StreamingContext context)
   --- End of inner exception stack trace ---

Server stack trace: 
   at System.RuntimeMethodHandle._SerializationInvoke(IRuntimeMethodInfo method, Object target, SignatureStruct& declaringTypeSig, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.CompleteISerializableObject(Object obj, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.FixupSpecialObject(ObjectHolder holder)
   at System.Runtime.Serialization.ObjectManager.DoFixups()
   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Remoting.Channels.CoreChannel.DeserializeBinaryRequestMessage(String objectUri, Stream inputStream, Boolean bStrictBinding, TypeFilterLevel securityLevel)
   at System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
   at log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(LoggingEvent[] events)
   at log4net.Appender.RemotingAppender.SendBufferCallback(Object state)
","LOG4NET-378 fixed a problem where rolled log files get overwritten when the application is restarted

The cause is that InitializeFromOneFile() does not succesfully detect the filenames.", MODIFY RollingFileAppender.csRollingFileAppender InitializeFromOneFile
0,LOG4NET-311,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-205,5c023f6a22bfb93873a5ce0d6f5ac7e7275e2914,"Allow filtering by Identity / UserName / ThreadName and Domain Background :
See thread named PropertyFilter ( http://mail-archives.apache.org/mod_mbox/logging-log4net-user/200903.mbox/browser )

By default, there's no way to filter by those LoggingEvent properties.
I want to avoid extra code to do that (by adding a property programmatically or implementing a custom IFilter)

I see 2 solutions :

 - LoggingEvent.LookupProperty should be able to resolve internal keys like ""log4net:Identity"", ""log4net:UserName"", etc... (Note that It already works for ""log4net:HostName"" added by GlobalContext's static constructor). Then we can use the PropertyFilter.

- Add a IFilter implementation for each property like it's done for the LoggerName and  Level properties.","LOG4NET-205 fixed LoggingEvent to put the UserNameProperty and the IdentityProperty into the composite properties dictionary

This way the PropertyFilter can look up and filter by UserName and Identity.", MODIFY LoggingEvent.csLoggingEvent CreateCompositeProperties
0,LOG4NET-38,d78a5f8331dad60de277fecda43205412ccb464a,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
1,LOG4NET-70,0c1e5b73df05f9bc2daac0bb324a3080bbd2b400,CoreDll.dll referenced with different capitalisation The CoreDll.dll is referenced as both CoreDll.dll and coredll.dll. This has no effect on functionality but we should be consistant and use CoreDll.dll.,Fix for LOG4NET-70. Changed reference from coredll.dll to CoreDll.dll, MODIFY SystemInfo.cs
0,LOG4NET-172,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-38,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-232,a06839a335c7f13c865ee4bfb30982f67a2a63b9,"Use ReaderWriterLockSlim instead of ReaderWriterLock. ReaderWriterLock should be replaced with ReaderWriterLockSlim according to Microsoft for performance and simplification reasons.

MSDN: http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock.aspx

The .NET Framework has two reader-writer locks, ReaderWriterLockSlim and ReaderWriterLock. ReaderWriterLockSlim is recommended for all new development. ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlim avoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than ReaderWriterLock. ",LOG4NET-354 added a configuration option that allows to configure the subject and body encoding, MODIFY SmtpAppender.csSmtpAppender SendEmail
1,LOG4NET-292,80f2330f7e88ef2c94a856825850bedb4a24608d,"Managed ColoredConsoleAppender for .NET2/Mono. The original ColoredConsoleAppender was written before the .NET framework (and Mono) had built-in support for console colors so it was written using Win32 API calls. The AnsiColorTerminalAppender, while it works, isn't understood by the Windows command prompt so there's no console appender that works on both environments.

I'm attaching a replacement for both classes that uses the new (.NET 2) console colors and works on both platforms. It is based on the existing ColoredConsoleAppender. The color mapping values are not compatible with the previous version since this one uses the standard .NET 2 ConsoleColor enumeration values.",ColoredConsoleAppender using Console.ForegroundColor on .NET 2.0+.  LOG4NET-292.  Submitted by Pavlos Touboulidis, MODIFY pom.xml ADD ManagedColoredConsoleAppender.csManagedColoredConsoleAppender Append ManagedColoredConsoleAppender AddMapping ManagedColoredConsoleAppender ActivateOptions ManagedColoredConsoleAppender if ManagedColoredConsoleAppender ManagedColoredConsoleAppender MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj
0,LOG4NET-486,2ce45ddd39877f2955ce645ba01b9e9389b03fd6,"Rolling File Appender with 'maxSizeRollBackups' and 'datePattern' does not detect existing logs initially Rolling file appender with 'maxSizeRollBackups' set to a positive number tries to initialise by looking at existing log files to continue the rolling sequence and set 'm_curSizeRollBackups' to its correct value but the base filename format is wrong.

In method GetWildcardPatternForFile with m_preserveLogFileNameExtension true it should construct a wildcard pattern but the 'baseFileName' is not enough to fully identify the log file when 'datePattern' is also specified.

For example: -

With log files such as: -

MyLogFile_2015-10-27.1.log
MyLogFile_2015-10-27.2.log

the pattern created is 'MyLogFile.*.log'

The date pattern is missing and as a result no log files are found and historical log files get overwritten rather than rolled over.

A quick fix I'm using is to remove the '.' from the literal "".*"" in the wildcard. This allows the OS to identify the log files. Later code makes a fuller check of the exact log file format and therefore this may be safe but I would think it needs more validation and testing to be sure this works under all circumstances.","LOG4NET-484: fix object disposed exception

This is a modified version of the patch supplied by nn1436401 at gmail dot com.", MODIFY FileAppender.csFileAppender LockingStream Seek FileAppender LockingStream LockingStream FileAppender MinimalLock OpenFile FileAppender LockingStream AssertLocked FileAppender ExclusiveLock AcquireLock FileAppender FileAppender FileAppender InterProcessLock ReleaseLock FileAppender ActivateOptions FileAppender InterProcessLock OpenFile FileAppender ConvertToFullPath FileAppender InterProcessLock AcquireLock FileAppender Reset FileAppender LockingStream BeginWrite FileAppender LockingModelBase CreateStream FileAppender LockingStream ReadByte FileAppender ExclusiveLock ReleaseLock FileAppender LockingModelBase CloseStream FileAppender Append FileAppender LockingStream Close FileAppender SafeOpenFile FileAppender LockingStream AcquireLock FileAppender WriteHeader FileAppender LockingStream Write FileAppender MinimalLock ReleaseLock FileAppender CloseWriter FileAppender LockingStream SetLength FileAppender PrepareWriter FileAppender LockingStream Flush FileAppender WriteFooter FileAppender LockingStream Dispose FileAppender SetQWForFiles FileAppender FileAppender FileAppender LockingStream ReleaseLock FileAppender InterProcessLock CloseFile FileAppender LockingStream LockStateException LockStateException FileAppender OpenFile FileAppender Append FileAppender LockingStream Read FileAppender ExclusiveLock CloseFile FileAppender MinimalLock AcquireLock FileAppender SetQWForFiles FileAppender FileAppender FileAppender MinimalLock CloseFile FileAppender LockingStream BeginRead FileAppender CloseFile FileAppender LockingStream EndWrite FileAppender ExclusiveLock OpenFile FileAppender LockingStream EndRead FileAppender LockingStream WriteByte MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestInterProcessLockRoll RollingFileAppenderTest CreateLogger RollingFileAppenderTest CreateLogger
0,LOG4NET-38,b9c24915eadbbb665778ef42524fd74d99eb969a,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-378,d68a3ab28f137926263ba0e502abd77b3caeb70b,"Rolling log file is overwritten when application is restarted My server process uses log files which roll on date and file size (4MB). 
When I restart the server and there are already more than 1 log files for the current date, the 2nd segment gets overwritten and the 3rd, 4th, ... may get overwritten later, when #2 is filled up again.
I'm using version 1.2.11, which I can't select in the ""Affects Version"" combo box.

e.g. 
flotto.20130527.0.log = 4MB
flotto.20130527.1.log = 0MB (just got overwritten when the server was restarted)
flotto.20130527.2.log = 4MB (still contains original data but will be overwritten too as soon as #1 fills up)
flotto.20130527.3.log = 4MB (same as above)


The configuration in MyServer.exe.config looks like this:
<log4net>
    <appender name=""LogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
      <file value=""flotto.log"" />
      <appendToFile value=""true"" />
      <encoding>utf-8</encoding>
      <preserveLogFileNameExtension value=""true""/>
      <rollingStyle value=""Composite"" />
      <staticLogFileName value=""false"" />
      <datePattern value="".yyyyMMdd""/>
      <countDirection value=""1""/>
      <maximumFileSize value=""4MB"" />
      <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""%date [%-7thread] %-5level %-35logger - %message%newline"" />
      </layout>
    </appender>
    <root>
      <level value=""INFO"" />
      <appender-ref ref=""LogFileAppender""/>
    </root>
    <logger name=""Flotto.FlottoService"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.TcpServer"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.UdpBroadcastReceiver"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.GpsTrackerGprsServer"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.TrackerManager"">
      <!--<level value=""INFO""/>-->
    </logger>
  </log4net>
",LOG4NET-341 fix location info to not contain a reference to StackFrame any more, MODIFY LocationInfo.csLocationInfo LocationInfo ADD MethodItem.csMethodItem MethodItem MethodItem MethodItem MethodItem GetMethodParameterNames MethodItem MethodItem MethodItem MethodItem ADD StackFrameItem.csStackFrameItem StackFrameItem MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate MODIFY StackTraceDetailPatternConverter.csStackTraceDetailPatternConverter GetMethodInformation StackTraceDetailPatternConverter GetMethodParameterNames StackTraceDetailPatternConverter GetMethodInformation MODIFY StackTracePatternConverter.csStackTracePatternConverter GetMethodInformation StackTracePatternConverter Convert StackTracePatternConverter GetMethodInformation MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj
0,LOG4NET-56,186421082617e3383b52c97153fc31b3ee8d2982,Support rendering IEnumerator objects as well as ICollections Some objects that use IDictionary objects expose an IDictionaryEnumerator instead of the underlying IDictionary. HttpRuntime.Cache.GetEnumerator() is one such object.,Fixed LOG4NET-63. Fixed typos and broken links in documentation., MODIFY FileAppender.csFileAppender LockingStream EndWrite MODIFY RollingFileAppender.cs MODIFY PatternLayout.cs MODIFY faq.xml MODIFY configuration.xml
0,LOG4NET-11,6586b155fe474144ba918de90e9769780234a1e5,"Add Flush command to API While using Buffering is a wonderful way to help improve
performance, I would like the ability to programatically
tell the current ILog object to flush any buffers that
exist on the appenders that I've been logging to so that
I can get any messages that I've sent rather than
waiting for the buffer to fill up.

Thus, one might be able to do the following:

""log.Flush();""

and then any messages sent to that ILog object would
be processed.

Kevin Conroy - kmconroy

----

I vote for this one too!

dcazzulino",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-43,9e1ead9259bca8cc9b20678810d5703e5166fb16,"Specifying an empty string as a property in the config file results in an error Specifying an empty string as a property (either as <property/> or <property></property>) results in the following:

log4net:ERROR XmlHierarchyConfigurator: Failed to construct object of type [System.String] Exception: System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeType.CreateInstanceImpl(Boolean publicOnly)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint) in S:\local\log4net-cvs\logging-log4net\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs:line 924",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-128,a233bcb1bd3b771cf8bdf9c011f639f341d0a4a7,"Either documentation is incorrect or a bug in SmtpAppender Sending the mails via SmtpAppender to more than one receipient fails as described in the documentation. The documentation says that all receipients should be added semicolon-separated. This fails, but adding the receipients comma-separated works. So, either the documentaion is incorrect or this is a bug.",Fix for LOG4NET-168. Add ReplyTo property to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-202,56a2e146e21ff4737e1ff3ec308810e667873947,"AdoNetAppenderParameter.Size Property is not optional The AdoNetAppenderParameter.Size page (http://logging.apache.org/log4net/release/sdk/log4net.Appender.AdoNetAppenderParameter.Size.html) says ""This property is optional. If not specified the ADO.NET provider will attempt to infer the size from the value.""

However, I just got the following exception in the log4net internal debug trace, with the following parameter (maps to a VARCHAR(MAX)):

<parameter>
      <parameterName value=""@exception"" />
      <dbType value=""String"" />
      <layout type=""log4net.Layout.ExceptionLayout"" />
</parameter>

log4net:ERROR [AdoNetAppender] Could not prepare database command [INSERT INTO ....]
System.InvalidOperationException: SqlCommand.Prepare method requires all variable length parameters to have an explicitly set non-zero Size.
   at System.Data.SqlClient.SqlParameter.Prepare(SqlCommand cmd)
   at System.Data.SqlClient.SqlCommand.Prepare()
   at log4net.Appender.AdoNetAppender.InitializeDatabaseCommand()

This would suggest the Size parameter cannot be null.",LOG4NET-370 fix RemoteSyslogAppender to log only characters that are valid as of RFC http://www.ietf.org/rfc/rfc3164.txt, MODIFY RemoteSyslogAppender.csRemoteSyslogAppender Append
0,LOG4NET-129,d78a5f8331dad60de277fecda43205412ccb464a,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-205,1e8b33af3276005577134150eef461704eb97c89,"Allow filtering by Identity / UserName / ThreadName and Domain Background :
See thread named PropertyFilter ( http://mail-archives.apache.org/mod_mbox/logging-log4net-user/200903.mbox/browser )

By default, there's no way to filter by those LoggingEvent properties.
I want to avoid extra code to do that (by adding a property programmatically or implementing a custom IFilter)

I see 2 solutions :

 - LoggingEvent.LookupProperty should be able to resolve internal keys like ""log4net:Identity"", ""log4net:UserName"", etc... (Note that It already works for ""log4net:HostName"" added by GlobalContext's static constructor). Then we can use the PropertyFilter.

- Add a IFilter implementation for each property like it's done for the LoggerName and  Level properties.",LOG4NET-342 fixed typos introduced with the prior commit, MODIFY faq.xml
0,LOG4NET-490,183fd72e56c22f3e72ac1751c5d79aa8139205bd,"InterProcessLock Tests fail The tests in question are:

* TestInterProcessLockRoll
* TestInterProcessLockUnlocks

This is actually quite bad and proves that my last attempt to introduce something that just works failed miserably. At first glance the trouble comes from the interaction with the base classes. One thing I noted is that the base class tries to write a footer when the file gets closed. But in the case of the rolling file appender the file is no longer there when this happens. Another example is that due to the error logs I'm writing the test finally noticed that the locks are acquired and released in bad order and thus result in bad behaviour.

But these are just two examples from a bunch of issues that still have to be worked out.",port fix for LOG4NET-462 from 1.3 branch, MODIFY ReadOnlyPropertiesDictionary.csReadOnlyPropertiesDictionary GetObjectData
0,LOG4NET-45,6de62c784acb8c0499ea3b7b84b34bff956a4e6a,"PluginAttribute does not allow plugin type to be specified as a Type, only as a string The PluginAttribute currently allows the plugin type to be specified as a string, for example:

[assembly: log4net.Config.Plugin(""log4net.Plugin.RemoteLoggingServerPlugin,log4net"")]

it should be possible to specify this as a type, for example:

[assembly: log4net.Config.Plugin(typeof(log4net.Plugin.RemoteLoggingServerPlugin))]",Fix for LOG4NET-11. Added a Flush(true) method that will flush the lossy buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Flush MODIFY CyclicBuffer.csCyclicBuffer PopAll CyclicBuffer Clear
1,LOG4NET-21,f60237cff8d748f99a137e96e88ac64e6b83dc80,"RemotingAppender fails once NDC becomes empty If an NDC, or any form of Context.Stack, is set on the current thread and then becomes empty the RemotingAppender will fail. This is caused by the LoggingEvent Properties failing to serialise due to an unexpected null value in the properties map.

The issue is caused by the GetObjectData method of log4net.Util.ReadOnlyPropertiesDictionary not coping with null values.

Issue reported by Sam Smoot.",Added unit test to demonstrate issue LOG4NET-21 from Sam Smoot, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestRemotedMessageNdcPushPop TestService Test Dal Test RemotingAppenderTest TestFullFix RemotingAppenderTest RemoteLoggingSinkImpl Reset Feature Test RemotingAppenderTest RemoteLoggingSinkImpl LogEvents RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestNestedNdc
1,LOG4NET-343,3fb279c8c87d3a1d5808f1e9504185673e35c78f,"ArgumentOutOfRangeException in log4net hierarchy on ""."" logger name While configuring a logger with name ""."", however wrong it may be, I stampled on uncaught exception.
""Index was out of range. Must be non-negative and less than the size of the collection.
Parameter name: startIndex""
The problem code is at the first executable code line of UpdateParents(Logger log) method
of log4net.Repository.Hierarchy.Hierarchy class.

I am sure there is an easy fix.",LOG4NET-343 exception if logger name is '.', MODIFY Hierarchy.csHierarchy UpdateParents MODIFY Hierarchy.csHierarchy AddingMultipleAppenders2 Hierarchy LoggerNameCanConsistOfASingleDot Hierarchy LoggerNameCanConsistOfASingleNonDot Hierarchy SetRepositoryPropertiesInConfigFile Hierarchy LoggerNameCanContainSequenceOfDots
0,LOG4NET-311,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
1,LOG4NET-114,797187e9c9b195a4b6ce93365192e514ba3d7207,"Unit tests only support .NET 1.0 tests/nant.build only supports running the unit tests on .NET 1.0, but supports compilation on .NET 1.1 and .NET 2.0.  Mono is not supported for either test compilation or running.","LOG4NET-114: Support unit tests on .NET 1.1, 2.0, Mono 2.0", MODIFY prerequisites.txt MODIFY nant.build
0,LOG4NET-310,56357bef38685f4521b5a9743dad54770f6258a5,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",TryParse has been introduced in .NET 2.0.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-214,73a4921de015d4262273055b04ea37206a224038,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-214,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-214,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-335,a06839a335c7f13c865ee4bfb30982f67a2a63b9,"Lost the ability to monitor changes to logger config files when you call ConfigureAndWatch multiple times with different Config File Names - worked fine on 1.2.10.0 We had a class that wraps log4net that is in a shared assembly, multiple components in our application create instances to the Log 4 Net Wrapper, each component has its own log config file.

When the Log4Net wrapper class is constructed it uses log4net.Logmanager to ConfigureAndWatch the log config file passed in to it by the calling component. We recently upgraded from log4net 1.2.10.0 to 1.2.11.0 and log4net no longer detects when the log configuration file is modified. I looked at the source code fro 1.2.11.0 and it appears that it only allows one ConfigureAndWatchHandler object and if you attempt to ConfigureAndWatch more than one logger config file, the previous one is Disposed, thereby removing the ability to detect config file changes",LOG4NET-354 added a configuration option that allows to configure the subject and body encoding, MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-49,6de62c784acb8c0499ea3b7b84b34bff956a4e6a,"CountingQuietTextWriter does not count strings written with WriteLine The CountingQuietTextWriter overrides Write(String) to count the chars written. However it should also override Write(Char) and Write(Char[],int,int).

WriteLine(String) calls Write(Char[],int,int) and therefore the CountingQuietTextWriter is not counting these strings, which are written to the output writer.",Fix for LOG4NET-11. Added a Flush(true) method that will flush the lossy buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Flush MODIFY CyclicBuffer.csCyclicBuffer PopAll CyclicBuffer Clear
0,LOG4NET-311,8abe90a8efc15a0770dfa9253d54d18c891cec65,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-342,95824fd8b68cefb8975bec151156f3d76fc1b981,"Add a way to prevent silent failure I spent most of the day trying to find out why logging is not working on my dev system but not on test. There should be a way to force error reporting by throwing (possibly unhandled) exceptions. This could be done by adding a required flag to the appenders and another flag that requires a least one working appender.

I am not sure about a good way to implement this, I would just love it if my favourite tool to end silent failure could stop failing silently. 

",LOG4NET-386 added a method in ThreadContextProperties to retrieve the property keys, MODIFY ThreadContextProperties.csThreadContextProperties GetKeys
0,LOG4NET-214,e1c9c3b7bb26b3564062859a86b38b793048548a,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-214,8abe90a8efc15a0770dfa9253d54d18c891cec65,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-129,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-297,d78a5f8331dad60de277fecda43205412ccb464a,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-143,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-475,4fc3185acbb8d2f734b1a6b578b33d924fa25c98,"Cannot add appender in Log4net at runtime I am trying to write a custom appender that rolls over daily, as well as on a size limit, and cleans up after itself in the process. I wrote the implementation using the AppenderSkeleton as a base class, then attempted to write a unit test to test the appender functionality. I do the following:

            DailyRollingFileAppender appender = new DailyRollingFileAppender();
            appender.RollOverOnSize = true;
            appender.RollOverDaily = true; //dont think I can test this
            appender.MaxFileSizeBytes = 1024;
            appender.RolloverDayCount = 1;
            appender.RollOverOnSize = true;
            appender.LoggingDirectory = Path.Combine(Directory.GetCurrentDirectory(), ""TestLogFolder"");
            appender.LogFileName = ""TestLogFileName"";
            appender.DateTimeFormatString = ""YYYY-MM-DD-hh-mm-ss"";
            appender.Cleanup = true;
            appender.Layout = new PatternLayout();
            appender.MaxNumberOfFiles = 10;
            appender.Name = ""testAppender"";

            //lets write some crappy log messages
            byte[] bytes = new byte[1050];

            Random rnd = new Random();
            rnd.NextBytes(bytes);

            ILog log = LogManager.GetLogger(""LoggerName"");
            Logger logger = (Logger)log.Logger;
            logger.AddAppender(appender);

            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), new Exception());
            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), null);

The code is based on the only examples I can find of people adding appenders to loggers at runtime, which you would want to do for a unit test. The issue is that the Logger instance I get from the call to ILog.Logger in the code above as a collection of appenders of type ReadOnlyAppenderCollection. The code silently consumes the exception it throws internally and never actually adds the appender to the collection. Can/How do I add an appender to a logger at runtime in the manner described above, so I can appropriately test that it functions. ","LOG4NET-461: refactored the AdoNetAppender

The AdoNetAppender suffered several issues. One was that a database command was
created and stored for the appenders lifetime. This caused trouble with some
database servers because those cleaned up cached prepared statements from time to
time and thus caused the appender to fail without the capability to recover. I
solved this problem by creating a database command whenever the buffer is sent,
well knowing that this costs a little more performance but is much more stable.

At this point I further took the chance to cleanup the source by replacing all
references to private member attributes with their public property mapping.
Further I added and fixed some of the documentation.

This overall cleanup is not yet complete, meaning that there is still a connection
that is being kept alive while it would be wiser to rely on proper connection
pooling and just open/close the database connection when sending the buffer. I
will raise this topic on the dev list.", MODIFY AdoNetAppender.csAdoNetAppender InitializeDatabaseConnection AdoNetAppender OnClose AdoNetAppender GetLogStatement AdoNetAppender InitializeDatabaseCommand AdoNetAppender AddParameter AdoNetAppender DiposeConnection AdoNetAppender SendBuffer AdoNetAppender CreateConnection AdoNetAppender ResolveConnectionType AdoNetAppender ResolveConnectionString AdoNetAppender AdoNetAppender AdoNetAppender ActivateOptions AdoNetAppenderParameter AdoNetAppenderParameter AdoNetAppenderParameter Prepare AdoNetAppenderParameter FormatValue AdoNetAppender SendBuffer AdoNetAppender DisposeCommand
1,LOG4NET-354,169ed0620c24fdcdca8b5e47eb81aebb41ac8859,"E-mail encoding configuration setting for SmtpAppender It would be nice if we could specify body transfer encoding and subject encoding in SmtpAppender (via configuration settings).
All unicode characters are rendered as question marks, because SmtpAppender uses the default settings:

Content-Type: text/plain;charset=""iso-8859-1""
Content-Transfer-Encoding: 7bit",LOG4NET-354 fix build errors for MONO since MONO does not implement the System.Web.Mail.MailMessage.SubjectEncoding property, MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-76,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-259,a06839a335c7f13c865ee4bfb30982f67a2a63b9,"Log4Net does not create a new tab in Chainsaw I believe the problem is in XmlLayoutSchemaLog4j, and that you need to change ""log4japp"" to ""application"".

According to the Chainsaw tutorial:
Chainsaw automatically looks inside each received LoggingEvent for a special Application property to determine which tab to route an event to. If it cannot find this property, it attempts to use a secondary property usually added via the SocketAppender or SocketHubAppender which identify the remote host of these events. If neither of these are found, Chainsaw routes events to a default ""Unknown"" tab.

Logging events generated internally by chainsaw include the following properties:
<log4j:properties>
    <log4j:data name=""application"" value=""Generator 1""/>
    <log4j:data name=""hostname"" value=""localhost""/>
    <log4j:data name=""log4jid"" value=""2""/>
    <log4j:data name=""some string"" value=""some valueGenerator 1""/>
</log4j:properties>

Logging events generated by XmlLayoutSchemaLog4j include the following properties:
<log4j:properties>
    <log4j:data name=""log4net:UserName"" value=""DOMAIN\username""/>
    <log4j:data name=""log4jid"" value=""281""/>
    <log4j:data name=""log4jmachinename"" value=""machineName""/>
    <log4j:data name=""log4net:HostName"" value=""machineName""/>
    <log4j:data name=""log4japp"" value=""Application.exe""/>
</log4j:properties>

See also: http://www.mail-archive.com/log4j-dev@jakarta.apache.org/msg05361.html

UPDATE: Documentation issue. See comments below.",LOG4NET-354 added a configuration option that allows to configure the subject and body encoding, MODIFY SmtpAppender.csSmtpAppender SendEmail
1,LOG4NET-129,8abe90a8efc15a0770dfa9253d54d18c891cec65,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-370,ee2fb50f42cdcc69cf202e8a0a28cf7c79bf77dd,"RemoteSyslogAppender doesn't properly handle newline in log message RemoteSyslogAppender sends log messages containing newline characters to syslog, however the syslog RFC 3164 states that the message portion of the syslog packet can only contain visible ASCII characters and spaces.  This causes multiline log messages to render on a single line in at least some instances.

The solution appears to be sending each line of the log message as a separate syslog packet.  I have modified RemoteSyslogAppender to support this behavior and will provide a patch file.

Here is the relevant portion of the RFC:

4.1.3 MSG Part of a syslog Packet

   The MSG part will fill the remainder of the syslog packet.  This will
   usually contain some additional information of the process that
   generated the message, and then the text of the message.  There is no
   ending delimiter to this part.  The MSG part of the syslog packet
   MUST contain visible (printing) characters.  The code set
   traditionally and most often used has also been seven-bit ASCII in an
   eight-bit field like that used in the PRI and HEADER parts.  In this
   code set, the only allowable characters are the ABNF VCHAR values
   (%d33-126) and spaces (SP value %d32).  However, no indication of the
   code set used within the MSG is required, nor is it expected.  Other
   code sets MAY be used as long as the characters used in the MSG are
   exclusively visible characters and spaces similar to those described
   above.  The selection of a code set used in the MSG part SHOULD be
   made with thoughts of the intended receiver.  A message containing
   characters in a code set that cannot be viewed or understood by a
   recipient will yield no information of value to an operator or
   administrator looking at it.

http://www.ietf.org/rfc/rfc3164.txt",LOG4NET-375 fix typo in src/Repository/Hierarchy/XmlHierarchyConfigurator.cs, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator ParseAppender
0,LOG4NET-43,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"Specifying an empty string as a property in the config file results in an error Specifying an empty string as a property (either as <property/> or <property></property>) results in the following:

log4net:ERROR XmlHierarchyConfigurator: Failed to construct object of type [System.String] Exception: System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeType.CreateInstanceImpl(Boolean publicOnly)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint) in S:\local\log4net-cvs\logging-log4net\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs:line 924","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
0,LOG4NET-11,21c34f7153387912a991692eaf1f32fe82ec9492,"Add Flush command to API While using Buffering is a wonderful way to help improve
performance, I would like the ability to programatically
tell the current ILog object to flush any buffers that
exist on the appenders that I've been logging to so that
I can get any messages that I've sent rather than
waiting for the buffer to fill up.

Thus, one might be able to do the following:

""log.Flush();""

and then any messages sent to that ILog object would
be processed.

Kevin Conroy - kmconroy

----

I vote for this one too!

dcazzulino",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-218,95824fd8b68cefb8975bec151156f3d76fc1b981,"Test StringFormatTest.TestFormatString fails The test ""StringFormatTest.TestFormatString"" fails with the following message:

NUnit.Framework.AssertionException: Test formatting error
    String lengths differ.  Expected length=272, but was length=291.
    Strings differ at index 46.
    expected: <""...ror>Exception during StringFormat: Index (zero based) must be greater ..."">
     but was: <""...ror>Exception during StringFormat: Der Index, basierend auf 0 (null), ..."">
    --------------------------------------------------^

The test seems to be dependent from the language settings of the current user",LOG4NET-386 added a method in ThreadContextProperties to retrieve the property keys, MODIFY ThreadContextProperties.csThreadContextProperties GetKeys
0,LOG4NET-129,689d3cf063d9d5a83b42bbca365e1616521f4b6e,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",LOG4NET-131: Add Cc and Bcc support to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-553,201ad1ae3ced298e77469f99e548244a7f772b06,"DebugAppender configuration should give the possibility to disable outputting loggerName as category The DebugAppender always uses the {{System.Diagnostics.Debug.Write(string,string)}} overload passing in the loggername as the category parameter.

It should be possible to omit the category parameter if having the loggername as category is not desired.

Attached is a patch implementing the desired new feature, which would be activated by configuration:
{code:xml}
<appender name=""DEBUG"" type=""log4net.Appender.DebugAppender"">
    <outputCategory value=""false""/>
    <layout type=""log4net.Layout.PatternLayout"">
	  <conversionPattern value=""%-5level: %message%newline""/>
    </layout>
  </appender>
{code}

In my patch, the outputCategory parameter defaults to true, so the behavior doesnt change unless the new configuration is used.","LOG4NET-554 Use AsyncLocal for LogicalThreadContext

Patch by Thomas Clegg.

closes #52", MODIFY log4net.tests.xproj MODIFY project.json MODIFY log4net.xproj MODIFY project.json MODIFY LoggingEvent.csLoggingEvent CreateCompositeProperties LoggingEvent if MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties GetProperties LogicalThreadContextProperties GetLogicalProperties LogicalThreadContextProperties GetCallContextData LogicalThreadContextProperties Clear LogicalThreadContextProperties Remove LogicalThreadContextProperties SetCallContextData LogicalThreadContextProperties SetLogicalProperties MODIFY PropertyPatternConverter.csPropertyPatternConverter Convert MODIFY framework-support.xml MODIFY LogicalThreadContextTest.cs MODIFY Utils.csUtils RemovePropertyFromAllContexts
1,LOG4NET-310,f51c60d914ba1ffb6ed34ae1ed275913572c4131,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Point to existing FAQ entry.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions
0,LOG4NET-143,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-143,73a4921de015d4262273055b04ea37206a224038,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
1,LOG4NET-117,b9c24915eadbbb665778ef42524fd74d99eb969a,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-460,7370904063b298c7a737768246ae016950be36a8,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-407 with TPL the code can be simplified since there will never be any concurrent AsyncAppend invocations, MODIFY AsyncAppender.csAsyncAppender AsyncAppend
0,LOG4NET-172,3db262186c8ae7aee64d6e9278bf6298ecf4e9d1,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.","Some optimizations in locking for LOG4NET-376

* remove inner lock in favor of fresh StringBuilders
* reduce extent of outer lock

also throw in generic dictionary for good measure", MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-148,26060334da4fc07c5f768da5a1f7a647a70de42b,"ThreadContext uses LocalDataStore to store ThreadSpecific data instead should be using  [ThreadStatic] variables. According to this article (http://blogs.msdn.com/junfeng/archive/2005/12/31/508423.aspx) and production issues encountered: using LocalDataStore is not a scalable approach for any web server that gets a significant amount of traffic.

The ThreadContext object should be modified to use [ThreadStatic] variables.

From the article:
The Whidbey RTM implementation of Thread.GetData/Thread.SetData has several scalability issues caused by global locks being taken. The appdomain-global lock taken in LocalDataStore.SetData is one of them. There is another global lock taken in ThreadNative::GetDomainLocalStore that is even worse since it is process-global.

The best workaround is to use [ThreadStatic] variables instead of Thread.GetData/Thread.SetData","LOG4NET-342 added the property Configured to ILog that allows to check if the repository was configured properly

Usecase:
   if (log.Configured == false) 
   { 
      throw new ConfigurationErrorsException(""Log4net failed to initialize properly.""); 
   }", MODIFY LogImpl.cs MODIFY ILog.cs
0,LOG4NET-266,b13c1fdd8d87877cdcfa6eb8c01555bf15d267b9,"AdoNetAppender does not work on a IIS 7 website using Windows authentication  When the Windows Authentication is deactivated, the AdoNetAppender works properly.

Howerver, once the Windows authentication is activated, the AdoNetAppender start working properly and then, after a few seconds, it is aborted and the following error message is retrieved:

log4net:ERROR [AdoNetAppender] Failed in DoAppend
System.ObjectDisposedException: Safe handle has been closed
   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)
   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)
   at Microsoft.Win32.Win32Native.GetTokenInformation(SafeTokenHandle TokenHandle, UInt32 TokenInformationClass, SafeLocalAllocHandle TokenInformation, UInt32 TokenInformationLength, UInt32& ReturnLength)
   at System.Security.Principal.WindowsIdentity.GetTokenInformation(SafeTokenHandle tokenHandle, TokenInformationClass tokenInformationClass)
   at System.Security.Principal.WindowsIdentity.get_User()
   at System.Security.Principal.WindowsIdentity.GetName()
   at System.Security.Principal.WindowsIdentity.get_Name()
   at log4net.Core.LoggingEvent.get_Identity()
   at log4net.Core.LoggingEvent.FixVolatileData(FixFlags flags)
   at log4net.Appender.BufferingAppenderSkeleton.Append(LoggingEvent loggingEvent)
   at log4net.Appender.AppenderSkeleton.DoAppend(LoggingEvent loggingEvent)


See below the settings of the appender. Various options (i.e. Securitycontext )  have also been tested in vain.

<appender name=""AdoNetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
		<bufferSize value=""1"" />
		  <connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
		  <connectionString value=""data source=WWWWWW;initial catalog=XXXXX;integrated security=false;persist security info=True;User ID=sa;Password=YYYYYYYY"" />
		 <commandText value=""sp_LOG_Insert""/>
		<commandType value=""StoredProcedure"" />
			<parameter>
			<parameterName value=""@DATE"" />
			<dbType value=""DateTime"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
		</parameter>
		<parameter>
			<parameterName value=""@THREAD"" />
			<dbType value=""String"" />
			<size value=""255"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%thread"" />
		</parameter>
		<parameter>
			<parameterName value=""@LEVEL"" />
			<dbType value=""String"" />
			<size value=""50"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%level"" />
		</parameter>
		<parameter>
			<parameterName value=""@LOGGER"" />
			<dbType value=""String"" />
			<size value=""255"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%logger"" />
		</parameter>
		<parameter>
			<parameterName value=""@MESSAGE"" />
			<dbType value=""String"" />
			<size value=""8000"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%message"" />
		</parameter>
	  
	</appender>

",LOG4NET-226 added catch ObjectDisposedException clause as suggested by Johannes Krackowizer and confirmed by Ron Grabowski, MODIFY LoggingEvent.csLoggingEvent if
0,LOG4NET-40,41fbb821a2c0df0ab7047ca6e4f73ab8691f2eb2,"RollingFileAppender does not limit files to MaxSizeRollBackups when CountDirection is 1 RollingFileAppender does not limit files to MaxSizeRollBackups when CountDirection is 1

When the CountDirection is positive the log files are named in ascending order. The total number of archive files should be limited to the MaxSizeRollBackups property value. The number of archive files is not limited.

An appender config that reproduces this behaviour is:

<appender name=""CountUpRollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
  <file value=""log-file-count-up-roll.txt"" />
  <rollingStyle value=""Size"" />
  <maxSizeRollBackups value=""10"" />
  <maximumFileSize value=""100"" />
  <countDirection value=""1"" />
  <staticLogFileName value=""false"" />
  <layout type=""log4net.Layout.PatternLayout"" value=""%date %-5level %logger - %message%newline"" />
</appender>",Fix LOG4NET-42: Serialised LoggingEvent does not preserve the Fix flags. Added new constructors to allow FixFlags to be passed in with the LoggingEventData, MODIFY LoggingEvent.csLoggingEvent LoggingEvent LoggingEvent LoggingEvent LoggingEvent LoggingEvent
0,LOG4NET-229,d78a5f8331dad60de277fecda43205412ccb464a,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-45,6586b155fe474144ba918de90e9769780234a1e5,"PluginAttribute does not allow plugin type to be specified as a Type, only as a string The PluginAttribute currently allows the plugin type to be specified as a string, for example:

[assembly: log4net.Config.Plugin(""log4net.Plugin.RemoteLoggingServerPlugin,log4net"")]

it should be possible to specify this as a type, for example:

[assembly: log4net.Config.Plugin(typeof(log4net.Plugin.RemoteLoggingServerPlugin))]",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-212,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-3,21c34f7153387912a991692eaf1f32fe82ec9492,"Support per event patterns in FileAppender File name If I could specify file name patter for
(Rolling)FileAppender that would be filled by the
appender prior to openning the file, I could let many
individuals run the same applikation (on terminal
server) and still log to file (not RemotingAppender or
ADONetAppernder)

I guess, pattern like &quot;rootLog%U.log&quot; would do, if
appender replaced %U with
Thread.CurrentThread.CurrentPrincipal.Identity.Name ...
Or %T with thread id and so on...

Anonymous",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
1,LOG4NET-310,54493ed542fa2c3ab36809f1b5a65b8daa97d1ae,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Deal with SecurityException in EventLogAppender more gracefully.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY EventLogAppenderTest.csEventLogAppenderTest ActivateOptionsDisablesAppenderIfSourceDoesntExist EventLogAppenderTest TestGetEntryTypeForExistingApplicationName EventLogAppenderTest TestGetEntryType
0,LOG4NET-94,3fcb26f06ca6b56db29f9b03fbf1d1cbea5016df,"Incorrect config file for ..\examples\net\1.0\Tutorials\ConsoleApp The app.config file has some errors in it...


Line 39

is...
<sppendToFile value=""true"" />

should be...
<appendToFile value=""true"" />


Line 43

is...
<geader value=""[Header]&#13;&#10;"" />

should be...
<header value=""[Header]&#13;&#10;"" />



Line 87

is...
<commandText"" value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />

should be...
<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />



Line 94

is...
</param>

should be...
</layout>


-- Jeff Hegedus:  Corrected xml below ---

<?xml version=""1.0"" encoding=""utf-8"" ?>
<!-- 
		.NET application configuration file     
		This file must have the exact same name as your application with .config appended to it. 
		
		For example if your application is ConsoleApp.exe then the config file must be ConsoleApp.exe.config. 
		It must also be in the same directory as the application. 
	-->
<configuration>
	<!-- Register a section handler for the log4net section -->
	<configSections>
		<section name=""log4net"" type=""System.Configuration.IgnoreSectionHandler"" />
	</configSections>
	<appSettings>
		<!-- To enable internal log4net logging specify the following appSettings key -->
		<!-- <add key=""log4net.Internal.Debug"" value=""true""/> -->
	</appSettings>
	<!-- This section contains the log4net configuration settings -->
	<log4net>
		<!-- Define some output appenders -->
		<appender name=""RollingLogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file value=""rolling-log.txt"" />
			<appendToFile value=""true"" />
			<maxSizeRollBackups value=""10"" />
			<maximumFileSize value=""100"" />
			<rollingStyle value=""Size"" />
			<staticLogFileName value=""true"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<appender name=""LogFileAppender"" type=""log4net.Appender.FileAppender"">
			<file value=""log-file.txt"" />
			<!-- Example using environment variables in params -->
			<!-- <file value=""${TMP}\log-file.txt"" /> -->
			<appendToFile value=""true"" />
			<!-- An alternate output encoding can be specified -->
			<!-- <encoding value=""unicodeFFFE"" /> -->
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
			<!-- Alternate layout using XML			
			<layout type=""log4net.Layout.XMLLayout"" /> -->
		</appender>
		<appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"">
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
		</appender>
		<appender name=""NetSendAppender"" type=""log4net.Appender.NetSendAppender"">
			<threshold value=""ERROR"" />
			<server value=""IN27WS024728"" />
			<recipient value=""jhegedus2"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<!-- Example of how to configure the AdoNetAppender		
		<appender name=""AdoNetAppender"" type=""log4net.Appender.AdoNetAppender"" >			
			<connectionString value=""Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"" />
			<layout type=""log4net.Layout.PatternLayout"">				
				<conversionPattern value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES ('%date','%thread','%level','%logger','%message')"" />
			</layout>
		</appender> 
		-->
		<!-- 
		<appender name=""A"" type=""log4net.Appender.ForwardingAppender"" >
			<threshold value=""WARN""/>			
			<appender-ref ref=""ConsoleAppender"" />		
		</appender>
		<appender name=""B"" type=""log4net.Appender.ForwardingAppender"" >
			<filter type=""log4net.Filter.LevelRangeFilter"">
				<levelMin value=""DEBUG""/>
				<levelMax value=""INFO""/>
			</filter>
			<appender-ref ref=""ConsoleAppender"" />
		</appender> 
		-->
		<!-- Example of how to configure the AdoNetAppender to connect to MS Access -->
		<appender name=""ADONetAppender_Access"" type=""log4net.Appender.AdoNetAppender"">
			<connectionString value=""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""1024"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Example of how to configure the AdoNetAppender to connect to MS SQL Server -->
		<appender name=""ADONetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
			<bufferSize value=""1"" />
			<connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
			<connectionString value=""data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""DateTime"" />
				<!-- 
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
				</layout> 
				-->
				<layout type=""log4net.Layout.RawTimeStampLayout"" />
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""4000"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value=""WARN"" />
			<appender-ref ref=""LogFileAppender"" />
			<appender-ref ref=""ConsoleAppender"" />
			<!-- <appender-ref ref=""ADONetAppender_SqlServer"" /> -->
			<appender-ref ref=""NetSendAppender"" />
			<!-- <appender-ref ref=""A"" /> -->
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name=""ConsoleApp.LoggingExample"">
			<!-- <appender-ref ref=""B"" /> -->
			<level value=""ALL"" />
			<appender-ref ref=""RollingLogFileAppender"" />
		</logger>
	</log4net>
</configuration>","Fix for LOG4NET-93. Typos for node name in tutorial, excess quote, invalid XML from David McNeill.", MODIFY App.config
0,LOG4NET-3,9e1ead9259bca8cc9b20678810d5703e5166fb16,"Support per event patterns in FileAppender File name If I could specify file name patter for
(Rolling)FileAppender that would be filled by the
appender prior to openning the file, I could let many
individuals run the same applikation (on terminal
server) and still log to file (not RemotingAppender or
ADONetAppernder)

I guess, pattern like &quot;rootLog%U.log&quot; would do, if
appender replaced %U with
Thread.CurrentThread.CurrentPrincipal.Identity.Name ...
Or %T with thread id and so on...

Anonymous",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-38,f51c60d914ba1ffb6ed34ae1ed275913572c4131,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",Point to existing FAQ entry.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions
0,LOG4NET-558,2781b83bd1ef3a15dd7b0f17934fdbf22a691a35,"log4net 2.0.7 and greater doesn't log %message pattern When we are updated log4net from 1.2.15 to 2.0.7 some of our customers report about wrong logging in RollingFileAppender. 
Log file looks like:
2017-03-07 05:45:23,250 [1] WARN  Driver [2017-03-07 05:45:32,718 [1] INFO  Driver [2017-03-07 05:45:36,515 [1] INFO  Driver [2017-03-07 05:45:37,843 [1] INFO  Driver [2017-03-07 05:45:37,875 [1] INFO  Driver [2017-03-07 05:45:38,125 [1] INFO  WebcashClient [2017-03-07 05:45:40,828 [7] INFO  Driver [2017-03-07 05:45:40,937 [7] INFO  Driver [2017-03-07 05:45:41,093 [7] INFO  Driver [2017-03-07 05:45:41,296 [7] INFO  Driver [2017-03-07 05:45:41,328 [7] INFO  Driver [2017-03-07 05:45:41,328 [7] INFO  Driver [2017-03-07 05:45:41,343 [7] INFO  Driver [2017-03-07 05:45:41,343 [7] INFO  Driver [2017-03-07 05:45:41,375 [7] INFO  Driver [2017-03-07 05:45:41,375 [7] INFO  Driver [2017-03-07 05:45:41,531 [7] INFO  Driver [2017-03-07 05:45:41,531 [7] INFO  Driver [2017-03-07 05:45:41,562 [6] INFO  Driver [2017-03-07 05:45:41,562 [6] INFO  Driver [2017-03-07 05:45:41,578 [6] INFO  Driver [2017-03-07 05:45:41,578 [6] INFO  Driver [2017-03-07 05:45:41,593 [6] INFO  Driver [2017-03-07 05:45:41,593 [6] INFO  Driver [2017-03-07 05:45:41,609 [6] INFO  Driver [2017-03-07 05:45:41,609 [6] INFO  Driver [2017-03-07 05:45:41,625 [6] INFO  Driver [2017-03-07 05:45:41,625 [6] INFO  Driver [2017-03-07 05:45:41,640 [1] INFO  WebcashClient [2017-03-07 05:45:41,781 [6] INFO  Driver [2017-03-07 05:45:41,781 [6] INFO  Driver [2017-03-07 05:45:41,859 [6] ...
As I understood it can't handle ""[%property{NDC}] - %message%newline"" pattern.


Appender configuration:
 <appender name=""Driver"" type=""log4net.Appender.RollingFileAppender"">
      <file value=""Driver"" />
      <appendToFile value=""true"" />
      <encoding value=""utf-8"" />
      <rollingStyle value=""Date"" />
      <datePattern value=""_yyyy-MM-dd'.log'"" />
      <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""%date [%thread] %-5level %logger [%property{NDC}] - %message%newline"" />
      </layout>
      <threshold value=""DEBUG"" />
    </appender>",TypeNamePatternConverter: added a safety net of null checks to avoid null reference exceptions [LOG4NET-559], MODIFY TypeNamePatternConverter.csTypeNamePatternConverter GetFullyQualifiedName
0,LOG4NET-229,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
1,LOG4NET-67,ea3faab25fe5f1d4dbda9f5da8dcfa6fc3d9e1b8,"CVE-2006-0743 Security vulnerability in LocalSyslogAppender Reported by Sebastian Krahmer to security@apache.org
Logged as CVE-2006-0743

The LocalSyslogAppender contains a vulnerability which could lead to memory corruption within the runtime process. This is likely to cause the application using the LocalSyslogAppender to terminate unexpectedly. In addition to a deliberate denial of service attack this fault may be caused by logging legitimate data therefore the LocalSyslogAppender must not be used even within secured environments.

Current users of the LocalSyslogAppender (from the log4net 1.2.9 release) should update their logging configuration to remove references to the LocalSyslogAppender. Alternatively users can build a new version of the log4net assembly from the head of the source code repository where this fault has been fixed.",Fix for LOG4NET-67. CVE-2006-0743 Security vulnerability in LocalSyslogAppender, MODIFY LocalSyslogAppender.csLocalSyslogAppender Append
0,LOG4NET-43,f7000163b5e88d518727fa049bef8604d25288b5,"Specifying an empty string as a property in the config file results in an error Specifying an empty string as a property (either as <property/> or <property></property>) results in the following:

log4net:ERROR XmlHierarchyConfigurator: Failed to construct object of type [System.String] Exception: System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeType.CreateInstanceImpl(Boolean publicOnly)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint) in S:\local\log4net-cvs\logging-log4net\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs:line 924",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
0,LOG4NET-74,debba6201326ec2cfb7bdd8613f12fe3d212e418,"Change MemoryAppender member variables to protected The MemoryAppender is designed to hold the log events in an internal array. The appender can be subclassed, however the internal list is not available to subclasses.
This appender will be more useful if the members are protected.","Fix for LOG4NET-72. Moved String.Format call into separate class SystemStringFormat. This class holds the format string and arguments and only performs the String.Format when its ToString method is called.
Added simple test to ensure that the String.Format methods are working correctly and error handling correctly.
Updated the tests project nant.build to copy shared libs into the build output directory.", MODIFY LogImpl.csLogImpl DebugFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl FatalFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl WarnFormat LogImpl WarnFormat ADD SystemStringFormat.csSystemStringFormat ToString SystemStringFormat StringFormatError SystemStringFormat StringFormat SystemStringFormat RenderObject SystemStringFormat SystemStringFormat SystemStringFormat RenderArray MODIFY Transform.csTransform RenderArray Transform StringFormatError Transform RenderObject Transform StringFormat MODIFY log4net.csproj ADD prerequisites.txt MODIFY nant.build ADD StringFormatTest.csStringFormatTest TestThreadPropertiesPattern MODIFY log4net.Tests.csproj
0,LOG4NET-76,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-172,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
0,LOG4NET-45,29ec33c991b1a22aeac4e67c77ebbe94b370f9d1,"PluginAttribute does not allow plugin type to be specified as a Type, only as a string The PluginAttribute currently allows the plugin type to be specified as a string, for example:

[assembly: log4net.Config.Plugin(""log4net.Plugin.RemoteLoggingServerPlugin,log4net"")]

it should be possible to specify this as a type, for example:

[assembly: log4net.Config.Plugin(typeof(log4net.Plugin.RemoteLoggingServerPlugin))]","Fix for LOG4NET-43. Handles empty string properties by creating an empty string rather than attempting to construct one.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
1,LOG4NET-32,5da72adfc37db5725c5d2606730e2dd9a6bbd1b1,"AdoNetAppender losing first entry AdoNetAppender is losing the first log entry, caused by the entry being discarded as the underlying buffer cycles for the first time.

Probable error at line 400 in BufferingAppenderSkeleton.cs:

if (discardedLoggingEvent != null && m_lossyEvaluator != null && m_lossyEvaluator.IsTriggeringEvent(discardedLoggingEvent))

If you don't give a lossy evaluator the event is discarded, regardless of whether the buffer is lossy or not.  This line should also check if the buffer is lossy, and send the discarded event if it isn't:

if (discardedLoggingEvent != null && (!m_lossy || (m_lossyEvaluator != null && m_lossyEvaluator.IsTriggeringEvent(discardedLoggingEvent))))",Fix and tests for LOG4NET-32 AdoNetAppender losing first entry, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Append ADD BufferingAppenderTest.csBufferingAppenderTest TestSetupAppender BufferingAppenderTest TestBufferSize5 BufferingAppenderTest SetupRepository MODIFY CountingAppender.csCountingAppender ResetCounter MODIFY log4net.Tests.csproj
0,LOG4NET-215,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-38,09f7293056e8abf36655537318384e9bd0ff5c9e,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-94,d5af0ed54223baf8d96d798f745d16680ee737c3,"Incorrect config file for ..\examples\net\1.0\Tutorials\ConsoleApp The app.config file has some errors in it...


Line 39

is...
<sppendToFile value=""true"" />

should be...
<appendToFile value=""true"" />


Line 43

is...
<geader value=""[Header]&#13;&#10;"" />

should be...
<header value=""[Header]&#13;&#10;"" />



Line 87

is...
<commandText"" value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />

should be...
<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />



Line 94

is...
</param>

should be...
</layout>


-- Jeff Hegedus:  Corrected xml below ---

<?xml version=""1.0"" encoding=""utf-8"" ?>
<!-- 
		.NET application configuration file     
		This file must have the exact same name as your application with .config appended to it. 
		
		For example if your application is ConsoleApp.exe then the config file must be ConsoleApp.exe.config. 
		It must also be in the same directory as the application. 
	-->
<configuration>
	<!-- Register a section handler for the log4net section -->
	<configSections>
		<section name=""log4net"" type=""System.Configuration.IgnoreSectionHandler"" />
	</configSections>
	<appSettings>
		<!-- To enable internal log4net logging specify the following appSettings key -->
		<!-- <add key=""log4net.Internal.Debug"" value=""true""/> -->
	</appSettings>
	<!-- This section contains the log4net configuration settings -->
	<log4net>
		<!-- Define some output appenders -->
		<appender name=""RollingLogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file value=""rolling-log.txt"" />
			<appendToFile value=""true"" />
			<maxSizeRollBackups value=""10"" />
			<maximumFileSize value=""100"" />
			<rollingStyle value=""Size"" />
			<staticLogFileName value=""true"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<appender name=""LogFileAppender"" type=""log4net.Appender.FileAppender"">
			<file value=""log-file.txt"" />
			<!-- Example using environment variables in params -->
			<!-- <file value=""${TMP}\log-file.txt"" /> -->
			<appendToFile value=""true"" />
			<!-- An alternate output encoding can be specified -->
			<!-- <encoding value=""unicodeFFFE"" /> -->
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
			<!-- Alternate layout using XML			
			<layout type=""log4net.Layout.XMLLayout"" /> -->
		</appender>
		<appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"">
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
		</appender>
		<appender name=""NetSendAppender"" type=""log4net.Appender.NetSendAppender"">
			<threshold value=""ERROR"" />
			<server value=""IN27WS024728"" />
			<recipient value=""jhegedus2"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<!-- Example of how to configure the AdoNetAppender		
		<appender name=""AdoNetAppender"" type=""log4net.Appender.AdoNetAppender"" >			
			<connectionString value=""Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"" />
			<layout type=""log4net.Layout.PatternLayout"">				
				<conversionPattern value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES ('%date','%thread','%level','%logger','%message')"" />
			</layout>
		</appender> 
		-->
		<!-- 
		<appender name=""A"" type=""log4net.Appender.ForwardingAppender"" >
			<threshold value=""WARN""/>			
			<appender-ref ref=""ConsoleAppender"" />		
		</appender>
		<appender name=""B"" type=""log4net.Appender.ForwardingAppender"" >
			<filter type=""log4net.Filter.LevelRangeFilter"">
				<levelMin value=""DEBUG""/>
				<levelMax value=""INFO""/>
			</filter>
			<appender-ref ref=""ConsoleAppender"" />
		</appender> 
		-->
		<!-- Example of how to configure the AdoNetAppender to connect to MS Access -->
		<appender name=""ADONetAppender_Access"" type=""log4net.Appender.AdoNetAppender"">
			<connectionString value=""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""1024"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Example of how to configure the AdoNetAppender to connect to MS SQL Server -->
		<appender name=""ADONetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
			<bufferSize value=""1"" />
			<connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
			<connectionString value=""data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""DateTime"" />
				<!-- 
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
				</layout> 
				-->
				<layout type=""log4net.Layout.RawTimeStampLayout"" />
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""4000"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value=""WARN"" />
			<appender-ref ref=""LogFileAppender"" />
			<appender-ref ref=""ConsoleAppender"" />
			<!-- <appender-ref ref=""ADONetAppender_SqlServer"" /> -->
			<appender-ref ref=""NetSendAppender"" />
			<!-- <appender-ref ref=""A"" /> -->
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name=""ConsoleApp.LoggingExample"">
			<!-- <appender-ref ref=""B"" /> -->
			<level value=""ALL"" />
			<appender-ref ref=""RollingLogFileAppender"" />
		</logger>
	</log4net>
</configuration>",Fix for LOG4NET-90. Correct typo (pParameterName should be parameterName) in xdoc documentation., MODIFY config-examples.xml
0,LOG4NET-344,24157c2a6a1ba70f80ff17fa4fdb9406cca28d09,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ","revert part of last patch for LOG4NET-376

actually the lock has two purposes (at least revision 1483378
indicates this):

* lock the table and the last formatted timestamp
* lock the writer instance

my last patch exposed the writer instance to thread-safety issues.", MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-296,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Patch for .net 4, client profile and a fix for the name resolution bug  ",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-311,451cce90f726c70f60f81848ff75413efb4e3e34,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",fix bounds-checks in NamedPatternConverter.  LOG4NET-215, MODIFY NamedPatternConverter.csNamedPatternConverter Convert MODIFY PatternLayoutTest.csPatternLayoutTest MessageAsNamePatternConverter GetFullyQualifiedName PatternLayoutTest NamedPatternConverterWithPrecision2ShouldStripLessLeadingStuffIfPresent PatternLayoutTest NamedPatternConverterWithoutPrecisionShouldReturnFullName PatternLayoutTest NamedPatternConverterWithPrecision1ShouldStripLeadingStuffIfPresent
0,LOG4NET-311,d78a5f8331dad60de277fecda43205412ccb464a,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-117,09f7293056e8abf36655537318384e9bd0ff5c9e,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-218,1e8b33af3276005577134150eef461704eb97c89,"Test StringFormatTest.TestFormatString fails The test ""StringFormatTest.TestFormatString"" fails with the following message:

NUnit.Framework.AssertionException: Test formatting error
    String lengths differ.  Expected length=272, but was length=291.
    Strings differ at index 46.
    expected: <""...ror>Exception during StringFormat: Index (zero based) must be greater ..."">
     but was: <""...ror>Exception during StringFormat: Der Index, basierend auf 0 (null), ..."">
    --------------------------------------------------^

The test seems to be dependent from the language settings of the current user",LOG4NET-342 fixed typos introduced with the prior commit, MODIFY faq.xml
0,LOG4NET-242,8400fecdd81394a86d4192889446d40678dcfb90,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-129,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
1,LOG4NET-106,428893143e64b82e22727a04a630ee6805770e84,"TraceAppender : Add switch to disable using logger name as trace category TraceAppender now always put logger name as trace category when writing to System.Diagnostics.Trace.Write
ie. :
System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);

This resulted in logger's name appearing twice in Trace logs if once use/share the same conversion for both file-based and trace appenders, eg.
""%date [%thread] %-5level %logger - %message%""

It would be nice to have a settable property on TraceAppender to disable using logger's name as trace category, ie. :

public bool UseLoggerNameAsTraceCategory
{
get; set;
}

...
if (m_useLoggerNameAsTraceCategory)
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);
}
else
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), null);
}





",Fix for LOG4NET-106. Allow category to be set on TraceAppender and AspNetTraceAppender., MODIFY AspNetTraceAppender.csAspNetTraceAppender Append MODIFY TraceAppender.csTraceAppender Append MODIFY LayoutSkeleton.csLayoutSkeleton Format MODIFY PatternString.cs ADD TraceAppenderTest.csCategoryTraceListener Write CategoryTraceListener Write CategoryTraceListener WriteLine TraceAppenderTest DefaultCategoryTest TraceAppenderTest MethodNameCategoryTest MODIFY log4net.Tests.vs2005.csproj
0,LOG4NET-242,b9c24915eadbbb665778ef42524fd74d99eb969a,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-50,652340adbe4977e9b70f635f76465e93d9e501da,"Process.StartTime hangs on some systems It has been reported that on some systems the call to System.Diagnostics.Process.GetCurrentProcess().StartTime hangs.
This is used to obtain the ProcessStartTime used by the %r pattern.

The System.Diagnostics.Process uses performance counters which may be disabled or corrupt. While this should throw an exception it appears that in some cases the call will hang.","LOG4NET-52 Allow XML configurator to set properties of type Object.
Fixed check for Level type that was too wide; it matched Object when it should not have. Level is a sealed type so an equals check on the type is all that is required.
Fixed conversion of String to Object. There is an implicit conversion because it is a supertype, but the code in OptionConverter did not account for this.", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator ConvertStringTo MODIFY OptionConverter.csOptionConverter ConvertStringTo
0,LOG4NET-489,c47c2c6b9552a34d435024441b303421ebfcf512,"AdoNetAppender fails after upgrade to 2.0.4 with 1.2.13 everything is working fine.
Update to 1.2.14 (2.0.4 on Nuget), logging fails.
I would have attached screenshots, but can't work out how.

For example

    <connectionType
      value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
    <connectionStringName value=""LabelPrint"" />
    <commandText
      value=""INSERT INTO dbo.Logging ([LogDate],[Level],[Operation],[OperationInfo],[User],[Label],[Application],[CorrelationId],[Method],[Line],[Logger],[Message],[Exception]) 
                 VALUES (@log_date, @log_level, @operation, @operationInfo, @user, @label, @application, @correlationId, @pgm_method, @pgm_line, @logger, @message, @exception)"" />
    <parameter>
      <parameterName value=""@log_date"" />
      <dbType value=""DateTime"" />
      <layout type=""log4net.Layout.RawUtcTimeStampLayout"" />
    </parameter>
    ... etc

This now causes the error 

'Exception while writing to database System.IndexOutOfRangeException: An SqlParameter with ParamerName '@log_date' is not contained by this SqlParameterCollection ....

",LOG4NET-490: fix inter process lock such that the tests pass, MODIFY FileAppender.csFileAppender ActivateOptions FileAppender InterProcessLock CloseFile FileAppender OnClose FileAppender InterProcessLock ReleaseLock FileAppender InterProcessLock ActivateOptions FileAppender MinimalLock OnClose FileAppender InterProcessLock OnClose FileAppender ExclusiveLock OnClose FileAppender ExclusiveLock ActivateOptions FileAppender InterProcessLock OpenFile FileAppender MinimalLock ActivateOptions FileAppender InterProcessLock AcquireLock
1,LOG4NET-59,df4180c29f4bc22f95b9541fcdec219677fe405d,"[PATCH] to RollingFileAppender.cs to add the ability to roll files based on universal time (UTC). the file naming and rolling time zone is selected via a new property. the default value of this property provides backwards compatible bahviour. the patch is done on the published 1.2.9beta version. the diff file is only informative (not made with the right tool), use original and patched files to create a useful diff (accpet my apologies for this). -L",Fix for LOG4NET-59 to allow rolling files based on UTC time. Implemented by adding DateTimeStrategy property which accepts an IDateTime. RollingFileAppender contains two IDateTime inner-class implementations: LocalDateTime (DateTime.Now) and UniversalDateTime (DateTime.UtcNow)., MODIFY RollingFileAppender.csRollingFileAppender ActivateOptions RollingFileAppender RollingFileAppender
0,LOG4NET-22,6a525039c435d10dbfefe366bcec49d087955dad,"XmlLayout allows output of invalid control characters XmlLayout allows output of invalid control characters.

Reported by Mike Blake-Knox with additional comments from Curt Arnold.


The XmlLayout encodes the character 0x1e as &#x1E; using the standard XML numeric character reference.

This character code is in a range which is not allowed to appear in XML 1.0 either as a un-encoded value or as a numeric character reference.

The valid character ranges are defined here in the XML recommendation:
http://www.w3.org/TR/REC-xml/#charsets

They are:

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

Numeric character references are not able to express characters from outside these ranges.

The System.Xml.XmlTextWriter does not verify if the unicode character is valid in XML, but it does encode it as a numeric character reference if it cannot be expressed in the output encoding.

To complicate matters further XML 1.1 does allow further, so called restricted characters, to be included in the output if they are encoded as numeric character references. These ranges are:

[#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]

See http://www.w3.org/TR/2004/REC-xml11-20040204/#charsets for details.",Fix LOG4NET-23. Folders off by 1 level, MODIFY example-apps.xml
1,LOG4NET-22,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"XmlLayout allows output of invalid control characters XmlLayout allows output of invalid control characters.

Reported by Mike Blake-Knox with additional comments from Curt Arnold.


The XmlLayout encodes the character 0x1e as &#x1E; using the standard XML numeric character reference.

This character code is in a range which is not allowed to appear in XML 1.0 either as a un-encoded value or as a numeric character reference.

The valid character ranges are defined here in the XML recommendation:
http://www.w3.org/TR/REC-xml/#charsets

They are:

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

Numeric character references are not able to express characters from outside these ranges.

The System.Xml.XmlTextWriter does not verify if the unicode character is valid in XML, but it does encode it as a numeric character reference if it cannot be expressed in the output encoding.

To complicate matters further XML 1.1 does allow further, so called restricted characters, to be included in the output if they are encoded as numeric character references. These ranges are:

[#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]

See http://www.w3.org/TR/2004/REC-xml11-20040204/#charsets for details.","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
0,LOG4NET-311,8400fecdd81394a86d4192889446d40678dcfb90,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
1,LOG4NET-76,8fa4d71a61c7e6e6d9e8d8adc47a22fceaf8bf37,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Fix race-condition in XmlLayoutBase. LOG4NET-76, MODIFY XMLLayoutBase.csXmlLayoutBase Format
0,LOG4NET-275,d78a5f8331dad60de277fecda43205412ccb464a,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-399,2307d48008bee04ed208dd8cf854f420f95d48dd,"Does not build for Compact Framework 2.0 NAnt 0.92 (Build 0.92.4543.0; release; 6/9/2012)
Copyright (C) 2001-2012 Gerry Shaw
http://nant.sourceforge.net

[loadtasks] Scanning directory ""D:\05-Tools\log4net-1.2.12\extensions\common\neutral"" for extension assemblies.
[loadtasks] Scanning assembly ""NAnt.CompressionTasks"" for extensions.
[loadtasks] Creating TaskBuilder for GUnzip
[loadtasks] Adding task 'gunzip' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.GUnzip
[loadtasks] Creating TaskBuilder for TarTask
[loadtasks] Adding task 'tar' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.TarTask
[loadtasks] Creating TaskBuilder for UnTarTask
[loadtasks] Adding task 'untar' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.UnTarTask
[loadtasks] Creating TaskBuilder for UnZipTask
[loadtasks] Adding task 'unzip' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.UnZipTask
[loadtasks] Creating TaskBuilder for ZipTask
[loadtasks] Adding task 'zip' from D:\05-Tools\nant-0.92\bin\NAnt.CompressionTasks.dll:NAnt.Compression.Tasks.ZipTask
[loadtasks] Scanning assembly ""NAnt.DotNetTasks"" for extensions.
[loadtasks] Found method GetResourceCulture.
[loadtasks] Creating TaskBuilder for AssemblyInfoTask
[loadtasks] Adding task 'asminfo' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.AssemblyInfoTask
[loadtasks] Creating TaskBuilder for AssemblyLinkerTask
[loadtasks] Adding task 'al' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.AssemblyLinkerTask
[loadtasks] Creating TaskBuilder for CscTask
[loadtasks] Adding task 'csc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.CscTask
[loadtasks] Creating TaskBuilder for DelaySignTask
[loadtasks] Adding task 'delay-sign' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.DelaySignTask
[loadtasks] Creating TaskBuilder for IlasmTask
[loadtasks] Adding task 'ilasm' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.IlasmTask
[loadtasks] Creating TaskBuilder for JscTask
[loadtasks] Adding task 'jsc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.JscTask
[loadtasks] Creating TaskBuilder for LicenseTask
[loadtasks] Adding task 'license' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.LicenseTask
[loadtasks] Creating TaskBuilder for NDocTask
[loadtasks] Adding task 'ndoc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.NDocTask
[loadtasks] Creating TaskBuilder for RegsvcsTask
[loadtasks] Adding task 'regsvcs' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.RegsvcsTask
[loadtasks] Creating TaskBuilder for ResGenTask
[loadtasks] Adding task 'resgen' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.ResGenTask
[loadtasks] Creating TaskBuilder for ScriptTask
[loadtasks] Adding task 'script' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.ScriptTask
[loadtasks] Creating TaskBuilder for VbcTask
[loadtasks] Adding task 'vbc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.VbcTask
[loadtasks] Creating TaskBuilder for VjcTask
[loadtasks] Adding task 'vjc' from D:\05-Tools\nant-0.92\bin\NAnt.DotNetTasks.dll:NAnt.DotNet.Tasks.VjcTask
[loadtasks] Scanning assembly ""NAnt.NUnit1Tasks"" for extensions.
[loadtasks] Creating TaskBuilder for NUnitTask
[loadtasks] Adding task 'nunit' from D:\05-Tools\nant-0.92\bin\NAnt.NUnit1Tasks.dll:NAnt.NUnit1.Tasks.NUnitTask
[loadtasks] Scanning assembly ""NAnt.NUnit2Tasks"" for extensions.
[loadtasks] Creating TaskBuilder for NUnit2Task
[loadtasks] Adding task 'nunit2' from D:\05-Tools\nant-0.92\bin\NAnt.NUnit2Tasks.dll:NAnt.NUnit2.Tasks.NUnit2Task
[loadtasks] Scanning assembly ""NAnt.SourceControlTasks"" for extensions.
[loadtasks] Creating TaskBuilder for ChangeLogTask
[loadtasks] Adding task 'cvs-changelog' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.ChangeLogTask
[loadtasks] Creating TaskBuilder for CheckoutTask
[loadtasks] Adding task 'cvs-checkout' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.CheckoutTask
[loadtasks] Creating TaskBuilder for CvsPass
[loadtasks] Adding task 'cvs-pass' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.CvsPass
[loadtasks] Creating TaskBuilder for CvsTask
[loadtasks] Adding task 'cvs' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.CvsTask
[loadtasks] Creating TaskBuilder for ExportTask
[loadtasks] Adding task 'cvs-export' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.ExportTask
[loadtasks] Creating TaskBuilder for RTagTask
[loadtasks] Adding task 'cvs-rtag' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.RTagTask
[loadtasks] Creating TaskBuilder for TagTask
[loadtasks] Adding task 'cvs-tag' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.TagTask
[loadtasks] Creating TaskBuilder for UpdateTask
[loadtasks] Adding task 'cvs-update' from D:\05-Tools\nant-0.92\bin\NAnt.SourceControlTasks.dll:NAnt.SourceControl.Tasks.UpdateTask
[loadtasks] Scanning assembly ""NAnt.VisualCppTasks"" for extensions.
[loadtasks] Found method QuoteArgumentValue.
[loadtasks] Found method GetObjOutputFile.
[loadtasks] Found method QuoteArgumentValue.
[loadtasks] Found method ProcessTrailingBackslash.
[loadtasks] Found method DuplicateTrailingBackslash.
[loadtasks] Found method FixTrailingBackslash.
[loadtasks] Found method CleanTrailingBackslash.
[loadtasks] Found method QuoteArgumentValue.
[loadtasks] Creating TaskBuilder for ClTask
[loadtasks] Adding task 'cl' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.ClTask
[loadtasks] Creating TaskBuilder for LibTask
[loadtasks] Adding task 'lib' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.LibTask
[loadtasks] Creating TaskBuilder for LinkTask
[loadtasks] Adding task 'link' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.LinkTask
[loadtasks] Creating TaskBuilder for McTask
[loadtasks] Adding task 'mc' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.McTask
[loadtasks] Creating TaskBuilder for MidlTask
[loadtasks] Adding task 'midl' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.MidlTask
[loadtasks] Creating TaskBuilder for RcTask
[loadtasks] Adding task 'rc' from D:\05-Tools\nant-0.92\bin\NAnt.VisualCppTasks.dll:NAnt.VisualCpp.Tasks.RcTask
[loadtasks] Scanning assembly ""NAnt.VSNetTasks"" for extensions.
[loadtasks] Found method GetRelatedFiles.
[loadtasks] Found method op_Equality.
[loadtasks] Found method op_Inequality.
[loadtasks] Found method Parse.
[loadtasks] Found method IsEnterpriseTemplateProject.
[loadtasks] Found method LoadGuid.
[loadtasks] Found method IsSupported.
[loadtasks] Found method IsSupported.
[loadtasks] Found method GetProjectGuid.
[loadtasks] Found method IsSupported.
[loadtasks] Found method CreateCLArgumentMap.
[loadtasks] Found method CreateLinkerArgumentMap.
[loadtasks] Found method CreateMidlArgumentMap.
[loadtasks] Found method LoadGuid.
[loadtasks] Found method IsSupported.
[loadtasks] Found method GetFileContentsStatic.
[loadtasks] Creating TaskBuilder for SolutionTask
[loadtasks] Adding task 'solution' from D:\05-Tools\nant-0.92\bin\NAnt.VSNetTasks.dll:NAnt.VSNet.Tasks.SolutionTask
[loadtasks] Scanning assembly ""NAnt.Win32Tasks"" for extensions.
[loadtasks] Found method ExtractTypeLibPath.
[loadtasks] Creating TaskBuilder for AxImpTask
[loadtasks] Adding task 'aximp' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.AxImpTask
[loadtasks] Creating TaskBuilder for LocateSdkTask
[loadtasks] Adding task 'locatesdk' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.LocateSdkTask
[loadtasks] Creating TaskBuilder for MonoRegistryTask
[loadtasks] Adding task 'monoregistry' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.MonoRegistryTask
[loadtasks] Creating TaskBuilder for ReadRegistryTask
[loadtasks] Adding task 'readregistry' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.ReadRegistryTask
[loadtasks] Creating TaskBuilder for RegAsmTask
[loadtasks] Adding task 'regasm' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.RegAsmTask
[loadtasks] Creating TaskBuilder for TlbExpTask
[loadtasks] Adding task 'tlbexp' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.TlbExpTask
[loadtasks] Creating TaskBuilder for TlbImpTask
[loadtasks] Adding task 'tlbimp' from D:\05-Tools\nant-0.92\bin\NAnt.Win32Tasks.dll:NAnt.Win32.Tasks.TlbImpTask
[loadtasks] Scanning assembly ""NAnt.Core"" for extensions.
[loadtasks] Found method InitializeBuildElement.
[loadtasks] Found method GetFullName.
[loadtasks] Found method GetName.
[loadtasks] Found method GetLocation.
[loadtasks] Found method GetCodeBase.
[loadtasks] Found method GetEscapedCodeBase.
[loadtasks] Found method GetFullName.
[loadtasks] Found method GetName.
[loadtasks] Found method GetVersion.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method ToInt.
[loadtasks] Found method ToDouble.
[loadtasks] Found method ConvertToString.
[loadtasks] Found method ToDateTime.
[loadtasks] Found method ToBoolean.
[loadtasks] Found method Now.
[loadtasks] Found method GetYear.
[loadtasks] Found method GetMonth.
[loadtasks] Found method GetDay.
[loadtasks] Found method GetHour.
[loadtasks] Found method GetMinute.
[loadtasks] Found method GetSecond.
[loadtasks] Found method GetMillisecond.
[loadtasks] Found method GetTicks.
[loadtasks] Found method GetDayOfWeek.
[loadtasks] Found method GetDayOfYear.
[loadtasks] Found method GetDaysInMonth.
[loadtasks] Found method IsLeapYear.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method ToString.
[loadtasks] Found method GetCurrentDirectory.
[loadtasks] Found method GetHostName.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method GetFolderPath.
[loadtasks] Found method GetMachineName.
[loadtasks] Found method GetOperatingSystem.
[loadtasks] Found method GetUserName.
[loadtasks] Found method GetVariable.
[loadtasks] Found method VariableExists.
[loadtasks] Found method GetVersion.
[loadtasks] Found method NewLine.
[loadtasks] Found method GetCompanyName.
[loadtasks] Found method GetFileVersion.
[loadtasks] Found method GetProductName.
[loadtasks] Found method GetProductVersion.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method Round.
[loadtasks] Found method Floor.
[loadtasks] Found method Ceiling.
[loadtasks] Found method Abs.
[loadtasks] Found method IsWin32.
[loadtasks] Found method IsWindows.
[loadtasks] Found method IsUnix.
[loadtasks] Found method GetPlatform.
[loadtasks] Found method GetVersion.
[loadtasks] Found method ToString.
[loadtasks] Found method Combine.
[loadtasks] Found method ChangeExtension.
[loadtasks] Found method GetDirectoryName.
[loadtasks] Found method GetExtension.
[loadtasks] Found method GetFileName.
[loadtasks] Found method GetFileNameWithoutExtension.
[loadtasks] Found method GetPathRoot.
[loadtasks] Found method GetTempFileName.
[loadtasks] Found method GetTempPath.
[loadtasks] Found method HasExtension.
[loadtasks] Found method IsPathRooted.
[loadtasks] Found method GetLength.
[loadtasks] Found method Substring.
[loadtasks] Found method StartsWith.
[loadtasks] Found method EndsWith.
[loadtasks] Found method ToLower.
[loadtasks] Found method ToUpper.
[loadtasks] Found method Replace.
[loadtasks] Found method Contains.
[loadtasks] Found method IndexOf.
[loadtasks] Found method LastIndexOf.
[loadtasks] Found method PadLeft.
[loadtasks] Found method PadRight.
[loadtasks] Found method Trim.
[loadtasks] Found method TrimStart.
[loadtasks] Found method TrimEnd.
[loadtasks] Found method GetTotalDays.
[loadtasks] Found method GetTotalHours.
[loadtasks] Found method GetTotalMinutes.
[loadtasks] Found method GetTotalSeconds.
[loadtasks] Found method GetTotalMilliseconds.
[loadtasks] Found method GetDays.
[loadtasks] Found method GetHours.
[loadtasks] Found method GetMinutes.
[loadtasks] Found method GetSeconds.
[loadtasks] Found method GetMilliseconds.
[loadtasks] Found method GetTicks.
[loadtasks] Found method FromDays.
[loadtasks] Found method FromHours.
[loadtasks] Found method FromMinutes.
[loadtasks] Found method FromSeconds.
[loadtasks] Found method FromMilliseconds.
[loadtasks] Found method FromTicks.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method GetMajor.
[loadtasks] Found method GetMinor.
[loadtasks] Found method GetBuild.
[loadtasks] Found method GetRevision.
[loadtasks] Found method Parse.
[loadtasks] Found method ToString.
[loadtasks] Found method WriteSchema.
[loadtasks] Found method FindMoreRecentLastWriteTime.
[loadtasks] Found method FindMoreRecentLastWriteTime.
[loadtasks] Found method TranslatePath.
[loadtasks] Found method CopyFile.
[loadtasks] Found method MoveFile.
[loadtasks] Found method ReadFile.
[loadtasks] Found method GetTempDirectory.
[loadtasks] Found method CombinePaths.
[loadtasks] Found method GetFullPath.
[loadtasks] Found method GetHomeDirectory.
[loadtasks] Found method ResolveFile.
[loadtasks] Found method GetTypeFromString.
[loadtasks] Found method RegisterSharedAssembly.
[loadtasks] Found method GetString.
[loadtasks] Found method GetString.
[loadtasks] Found method GetString.
[loadtasks] Found method EndsWith.
[loadtasks] Found method IsNullOrEmpty.
[loadtasks] Found method ConvertEmptyToNull.
[loadtasks] Found method ConvertNullToEmpty.
[loadtasks] Found method Join.
[loadtasks] Found method Clone.
[loadtasks] Found method Main.
[loadtasks] Found method ShowProjectHelp.
[loadtasks] Found method GetBuildFileName.
[loadtasks] Found method CreateLogger.
[loadtasks] Found method CreateListener.
[loadtasks] Found method Synchronized.
[loadtasks] Found method Synchronized.
[loadtasks] Found method IsVolumeCaseSensitive.
[loadtasks] Found method get_IsWindows.
[loadtasks] Found method get_TaskBuilders.
[loadtasks] Found method get_DataTypeBuilders.
[loadtasks] Found method get_FilterBuilders.
[loadtasks] Found method ScanAssembly.
[loadtasks] Found method ScanAssembly.
[loadtasks] Found method ScanDir.
[loadtasks] Found method CreateTask.
[loadtasks] Found method CreateFilter.
[loadtasks] Found method CreateDataType.
[loadtasks] Creating FilterBuilder for ""ExpandProperties"".
[loadtasks] Adding filter ""expandproperties"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.ExpandProperties.
[loadtasks] Creating FilterBuilder for ""ReplaceString"".
[loadtasks] Adding filter ""replacestring"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.ReplaceString.
[loadtasks] Creating FilterBuilder for ""ReplaceTokens"".
[loadtasks] Adding filter ""replacetokens"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.ReplaceTokens.
[loadtasks] Creating FilterBuilder for ""TabsToSpaces"".
[loadtasks] Adding filter ""tabstospaces"" from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Filters.TabsToSpaces.
[loadtasks] Creating TaskBuilder for AttribTask
[loadtasks] Adding task 'attrib' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.AttribTask
[loadtasks] Creating TaskBuilder for AvailableTask
[loadtasks] Adding task 'available' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.AvailableTask
[loadtasks] Creating TaskBuilder for CallTask
[loadtasks] Adding task 'call' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.CallTask
[loadtasks] Creating TaskBuilder for ChooseTask
[loadtasks] Adding task 'choose' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.ChooseTask
[loadtasks] Creating TaskBuilder for CopyTask
[loadtasks] Adding task 'copy' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.CopyTask
[loadtasks] Creating TaskBuilder for DeleteTask
[loadtasks] Adding task 'delete' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.DeleteTask
[loadtasks] Creating TaskBuilder for DescriptionTask
[loadtasks] Adding task 'description' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.DescriptionTask
[loadtasks] Creating TaskBuilder for EchoTask
[loadtasks] Adding task 'echo' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.EchoTask
[loadtasks] Creating TaskBuilder for ExecTask
[loadtasks] Adding task 'exec' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.ExecTask
[loadtasks] Creating TaskBuilder for FailTask
[loadtasks] Adding task 'fail' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.FailTask
[loadtasks] Creating TaskBuilder for GetTask
[loadtasks] Adding task 'get' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.GetTask
[loadtasks] Creating TaskBuilder for IfTask
[loadtasks] Adding task 'if' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.IfTask
[loadtasks] Creating TaskBuilder for IfNotTask
[loadtasks] Adding task 'ifnot' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.IfNotTask
[loadtasks] Creating TaskBuilder for IncludeTask
[loadtasks] Adding task 'include' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.IncludeTask
[loadtasks] Creating TaskBuilder for LoadFileTask
[loadtasks] Adding task 'loadfile' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.LoadFileTask
[loadtasks] Creating TaskBuilder for LoadTasksTask
[loadtasks] Adding task 'loadtasks' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.LoadTasksTask
[loadtasks] Creating TaskBuilder for LoopTask
[loadtasks] Adding task 'foreach' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.LoopTask
[loadtasks] Creating TaskBuilder for MailTask
[loadtasks] Adding task 'mail' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.MailTask
[loadtasks] Creating TaskBuilder for MkDirTask
[loadtasks] Adding task 'mkdir' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.MkDirTask
[loadtasks] Creating TaskBuilder for MoveTask
[loadtasks] Adding task 'move' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.MoveTask
[loadtasks] Creating TaskBuilder for NAntSchemaTask
[loadtasks] Adding task 'nantschema' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.NAntSchemaTask
[loadtasks] Creating TaskBuilder for NAntTask
[loadtasks] Adding task 'nant' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.NAntTask
[loadtasks] Creating TaskBuilder for PropertyTask
[loadtasks] Adding task 'property' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.PropertyTask
[loadtasks] Creating TaskBuilder for RegexTask
[loadtasks] Adding task 'regex' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.RegexTask
[loadtasks] Creating TaskBuilder for SetEnvTask
[loadtasks] Adding task 'setenv' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.SetEnvTask
[loadtasks] Creating TaskBuilder for SleepTask
[loadtasks] Adding task 'sleep' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.SleepTask
[loadtasks] Creating TaskBuilder for StyleTask
[loadtasks] Adding task 'style' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.StyleTask
[loadtasks] Creating TaskBuilder for SysInfoTask
[loadtasks] Adding task 'sysinfo' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.SysInfoTask
[loadtasks] Creating TaskBuilder for TouchTask
[loadtasks] Adding task 'touch' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.TouchTask
[loadtasks] Creating TaskBuilder for TryCatchTask
[loadtasks] Adding task 'trycatch' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.TryCatchTask
[loadtasks] Creating TaskBuilder for TStampTask
[loadtasks] Adding task 'tstamp' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.TStampTask
[loadtasks] Creating TaskBuilder for UpToDateTask
[loadtasks] Adding task 'uptodate' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.UpToDateTask
[loadtasks] Creating TaskBuilder for XmlPeekTask
[loadtasks] Adding task 'xmlpeek' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.XmlPeekTask
[loadtasks] Creating TaskBuilder for XmlPokeTask
[loadtasks] Adding task 'xmlpoke' from D:\05-Tools\nant-0.92\bin\NAnt.Core.dll:NAnt.Core.Tasks.XmlPokeTask
[loadtasks] Scanning assembly ""NAnt.MSNetTasks"" for extensions.
[loadtasks] Creating TaskBuilder for IldasmTask
[loadtasks] Adding task 'ildasm' from D:\05-Tools\nant-0.92\bin\NAnt.MSNetTasks.dll:NAnt.MSNet.Tasks.IldasmTask
[loadtasks] Creating TaskBuilder for ServiceControllerTask
[loadtasks] Adding task 'servicecontroller' from D:\05-Tools\nant-0.92\bin\NAnt.MSNetTasks.dll:NAnt.MSNet.Tasks.ServiceControllerTask
[loadtasks] Scanning assembly ""NAnt.MSBuild"" for extensions.
Buildfile: file:///D:/05-Tools/log4net-1.2.12/log4net.build
Target framework: Microsoft .NET Framework 4.0
Base Directory: D:\05-Tools\log4net-1.2.12.
Target(s) specified: compile-netcf-2.0 

  [include] Including file D:\05-Tools\log4net-1.2.12\log4net.include.
Build sequence for target `set-build-configuration' is check-current-build-config, set-build-configuration
Complete build sequence is check-current-build-config, set-build-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration

check-current-build-config:


set-build-configuration:

Build sequence for target `set-debug-build-configuration' is set-debug-build-configuration
Complete build sequence is set-debug-build-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, check-current-build-config, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-build-configuration-flags, set-framework-configuration
Build sequence for target `set-debug-build-configuration' is set-debug-build-configuration
Complete build sequence is set-debug-build-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, check-current-build-config, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-build-configuration-flags, set-framework-configuration

set-debug-build-configuration:

Build sequence for target `set-build-configuration-flags' is check-current-build-config, set-build-configuration-flags
Complete build sequence is check-current-build-config, set-build-configuration-flags, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-framework-configuration
Build sequence for target `set-build-configuration-flags' is check-current-build-config, set-build-configuration-flags
Complete build sequence is check-current-build-config, set-build-configuration-flags, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-framework-configuration

check-current-build-config:


set-build-configuration-flags:

Build sequence for target `set-framework-configuration' is check-current-build-config, set-framework-configuration
Complete build sequence is check-current-build-config, set-framework-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-build-debug, check-build-defines, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags

check-current-build-config:


set-framework-configuration:

Build sequence for target `set-net-4.0-runtime-configuration' is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration
Complete build sequence is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration
Build sequence for target `set-net-4.0-runtime-configuration' is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration
Complete build sequence is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-net-4.0-runtime-configuration, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, set-netcf-1.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-1.0, set-netcf-2.0-runtime-configuration, compile-netcf-2.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration

check-bin-dir:


check-doc-dir:


check-sdkdoc-dir:


check-sdkdoc-debug:


check-current-build-config:


check-build-debug:


check-build-defines:


set-net-4.0-runtime-configuration:

Build sequence for target `compile-netcf-2.0' is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-netcf-2.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-2.0
Complete build sequence is check-bin-dir, check-doc-dir, check-sdkdoc-dir, check-sdkdoc-debug, check-current-build-config, check-build-debug, check-build-defines, set-netcf-2.0-runtime-configuration, check-log4net-basedir, check-current-bin-dir, clean-current-bin-dir, compile-netcf-2.0, check-htmlhelp-compiler, display-setup, display-target-framework, set-package-configuration, generate-assembly-description, compile-all, compile-runtime, compile-build, compile, set-netcf-1.0-runtime-configuration, compile-netcf-1.0, set-net-1.0-runtime-configuration, compile-net-1.0, set-net-1.1-runtime-configuration, compile-net-1.1, set-net-2.0-runtime-configuration, compile-net-2.0, set-net-3.5-runtime-configuration, compile-net-3.5, set-net-3.5-cp-runtime-configuration, compile-net-3.5-cp, set-net-4.0-runtime-configuration, compile-net-4.0, set-net-4.0-cp-runtime-configuration, compile-net-4.0-cp, set-mono-1.0-runtime-configuration, compile-mono-1.0, set-mono-2.0-runtime-configuration, compile-mono-2.0, set-sscli-1.0-runtime-configuration, compile-sscli-1.0, set-cli-1.0-configuration, compile-cli-1.0, generate-sdkdoc-all, check-current-sdkdoc-dir, check-current-sdkdoc-debug, clean-current-sdkdoc-dir, generate-sdkdoc-step1, generate-sdkdoc, set-release-build-configuration, generate-sdkdoc-for-site, generate-site, package, package-src, package-bin, check-current-build-debug, check-current-build-defines, check-log4net-output-dir, check-log4net-assembly, set-build-configuration, set-debug-build-configuration, set-build-configuration-flags, set-framework-configuration

set-netcf-2.0-runtime-configuration:

 [property] Target framework changed to ""Microsoft .NET Compact Framework 2.0"".

check-log4net-basedir:


check-current-bin-dir:


clean-current-bin-dir:

     [echo] Cleaning the bin/netcf/2.0/debug binaries directory.
   [delete] Deleting directory 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug'.
    [mkdir] Creating directory 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug'.

compile-netcf-2.0:

      [csc] Output file 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.dll' does not exist, rebuilding.
      [csc] Compiling 223 files to 'D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.dll'.
      [csc] Contents of C:\Users\dajones\AppData\Local\Temp\tmp28D5.tmp.
      [csc] /fullpaths
      [csc] ""/doc:D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.xml""
      [csc] /debug
      [csc] ""/define:DEBUG""
      [csc] ""/define:TRACE""
      [csc] /nostdlib
      [csc] /nologo
      [csc] ""/target:library""
      [csc] ""/define:DEBUG,TRACE,NETCF,NETCF_2_0""
      [csc] ""/out:D:\05-Tools\log4net-1.2.12\bin\netcf\2.0\debug\log4net.dll""
      [csc] /warnaserror
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\mscorlib.dll""
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\System.dll""
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\System.Data.dll""
      [csc] ""/reference:C:\Program Files (x86)\Microsoft.NET\SDK\CompactFramework\v2.0\WindowsCE\System.Xml.dll""
      [csc] ""/resource:D:\05-Tools\log4net-1.2.12\LICENSE,LICENSE""
      [csc] ""/resource:D:\05-Tools\log4net-1.2.12\NOTICE,NOTICE""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AdoNetAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AnsiColorTerminalAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AppenderCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AppenderSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\AspNetTraceAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\BufferingAppenderSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\BufferingForwardingAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ColoredConsoleAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ConsoleAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\DebugAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\EventLogAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\FileAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ForwardingAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\IAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\IBulkAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\LocalSyslogAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\ManagedColoredConsoleAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\MemoryAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\NetSendAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\OutputDebugStringAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\RemoteSyslogAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\RemotingAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\RollingFileAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\SmtpAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\SmtpPickupDirAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\TelnetAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\TextWriterAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\TraceAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Appender\UdpAppender.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\AliasDomainAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\AliasRepositoryAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\BasicConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\ConfiguratorAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\DomainAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\DOMConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\DOMConfiguratorAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\Log4NetConfigurationSectionHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\PluginAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\RepositoryAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\SecurityContextProviderAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\XmlConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Config\XmlConfiguratorAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\CompactRepositorySelector.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\DefaultRepositorySelector.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ErrorCode.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ExceptionEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IAppenderAttachable.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IErrorHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IFixingRequired.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ILogger.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ILoggerWrapper.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IOptionHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\IRepositorySelector.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\ITriggeringEventEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\Level.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LevelCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LevelEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LevelMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LocationInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LogException.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LoggerManager.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LoggerWrapperImpl.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LoggingEvent.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\LogImpl.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\MethodItem.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\SecurityContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\SecurityContextProvider.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\StackFrameItem.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\TimeEvaluator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Core\WrapperMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\AbsoluteTimeDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\DateTimeDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\IDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\Iso8601DateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\DateFormatter\SimpleDateFormatter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\DenyAllFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\FilterDecision.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\FilterSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\IFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\LevelMatchFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\LevelRangeFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\LoggerMatchFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\MdcFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\NdcFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\PropertyFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Filter\StringMatchFilter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AppDomainPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetCachePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetContextPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetRequestPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\AspNetSessionPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\DatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\ExceptionPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\FileLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\FullLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\IdentityPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\LevelPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\LineLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\LoggerPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\MessagePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\MethodLocationPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\NamedPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\NdcPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\PatternLayoutConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\PropertyPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\RelativeTimePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\StackTraceDetailPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\StackTracePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\ThreadPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\TypeNamePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\UserNamePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Pattern\UtcDatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\DynamicPatternLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\ExceptionLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\ILayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\IRawLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\Layout2RawLayoutAdapter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\LayoutSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\PatternLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawLayoutConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawPropertyLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawTimeStampLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\RawUtcTimeStampLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\SimpleLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\XMLLayout.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\XMLLayoutBase.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Layout\XmlLayoutSchemaLog4j.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ObjectRenderer\DefaultRenderer.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ObjectRenderer\IObjectRenderer.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ObjectRenderer\RendererMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\IPlugin.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\IPluginFactory.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\PluginCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\PluginMap.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\PluginSkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Plugin\RemoteLoggingServerPlugin.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\DefaultLoggerFactory.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\Hierarchy.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\ILoggerFactory.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\Logger.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\LoggerKey.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\ProvisionNode.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\RootLogger.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\ConfigurationChangedEventArgs.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\IBasicRepositoryConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\ILoggerRepository.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\IXmlRepositoryConfigurator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Repository\LoggerRepositorySkeleton.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\AppDomainPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\DatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\EnvironmentFolderPathPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\EnvironmentPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\IdentityPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\LiteralPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\NewLinePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\ProcessIdPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\PropertyPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\RandomStringPatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\UserNamePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternStringConverters\UtcDatePatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\BooleanConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\ConversionNotSupportedException.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\ConverterRegistry.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\EncodingConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\IConvertFrom.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\IConvertTo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\IPAddressConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\PatternLayoutConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\PatternStringConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\TypeConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TypeConverters\TypeConverterAttribute.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\AppenderAttachedImpl.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\CompositeProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ContextPropertiesBase.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ConverterInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\CountingQuietTextWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\CyclicBuffer.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\EmptyCollection.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\EmptyDictionary.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\FormattingInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\GlobalContextProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ILogExtensions.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LevelMapping.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LevelMappingEntry.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LogicalThreadContextProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\LogLog.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NativeError.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NullDictionaryEnumerator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NullEnumerator.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\NullSecurityContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\OnlyOnceErrorHandler.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\OptionConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternConverter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternParser.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PatternString.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PropertiesDictionary.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\PropertyEntry.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ProtectCloseTextWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\QuietTextWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ReaderWriterLock.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ReadOnlyPropertiesDictionary.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ReusableStringWriter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\SystemInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\SystemStringFormat.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\TextWriterAdapter.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ThreadContextProperties.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ThreadContextStack.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\ThreadContextStacks.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\Transform.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Util\WindowsSecurityContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\AssemblyInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\AssemblyVersionInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\GeneratedAssemblyInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\GlobalContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ILog.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\Log4netAssemblyInfo.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\LogicalThreadContext.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\LogManager.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\MDC.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\NDC.cs""
      [csc] ""D:\05-Tools\log4net-1.2.12\src\ThreadContext.cs""
      [csc] 
      [csc] Starting 'C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe (@""C:\Users\dajones\AppData\Local\Temp\tmp28D5.tmp"" /noconfig)' in 'D:\05-Tools\log4net-1.2.12'
      [csc] d:\05-Tools\log4net-1.2.12\src\Core\StackFrameItem.cs(44,31): error CS0246: The type or namespace name 'StackFrame' could not be found (are you missing a using directive or an assembly reference?)
      [csc] d:\05-Tools\log4net-1.2.12\src\Util\ThreadContextProperties.cs(41,4): error CS0246: The type or namespace name 'ThreadStatic' could not be found (are you missing a using directive or an assembly reference?)

BUILD FAILED

D:\05-Tools\log4net-1.2.12\log4net.build(413,6):
External Program Failed: C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe (return code was 1):
NAnt.Core.BuildException: D:\05-Tools\log4net-1.2.12\log4net.build(413,6):
External Program Failed: C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe (return code was 1)
   at NAnt.Core.Tasks.ExternalProgramBase.ExecuteTask()
   at NAnt.DotNet.Tasks.CompilerBase.ExecuteTask()
   at NAnt.Core.Task.Execute()
   at NAnt.Core.Target.Execute()
   at NAnt.Core.Project.Execute(String targetName, Boolean forceDependencies)
   at NAnt.Core.Project.Execute()
   at NAnt.Core.Project.Run()

Total time: 0.5 seconds.

",LOG4NET-397 expand a little on the problems people may face with the two different strong name keys, MODIFY faq.xml
0,LOG4NET-71,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
0,LOG4NET-212,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-74,36b8c818193e23af8a29c104a31bf35554e982c1,"Change MemoryAppender member variables to protected The MemoryAppender is designed to hold the log events in an internal array. The appender can be subclassed, however the internal list is not available to subclasses.
This appender will be more useful if the members are protected.","Fix for LOG4NET-72. Added overloaded Format methods for 1, 2, and 3 fixed arguments. This is a performance enhancement.", MODIFY LogImpl.csLogImpl ErrorFormat LogImpl WarnFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl WarnFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl WarnFormat LogImpl DebugFormat LogImpl InfoFormat MODIFY ILog.cs MODIFY StringFormatTest.csStringFormatTest TestThreadPropertiesPattern StringFormatTest TestLogFormatApi_Error StringFormatTest TestLogFormatApi_NoFatal StringFormatTest TestLogFormatApi_NoWarn StringFormatTest TestFormatString StringFormatTest TestLogFormatApi_NoInfo StringFormatTest TestLogFormatApi_NoDebug StringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info StringFormatTest TestLogFormatApi_NoError
1,LOG4NET-11,6de62c784acb8c0499ea3b7b84b34bff956a4e6a,"Add Flush command to API While using Buffering is a wonderful way to help improve
performance, I would like the ability to programatically
tell the current ILog object to flush any buffers that
exist on the appenders that I've been logging to so that
I can get any messages that I've sent rather than
waiting for the buffer to fill up.

Thus, one might be able to do the following:

""log.Flush();""

and then any messages sent to that ILog object would
be processed.

Kevin Conroy - kmconroy

----

I vote for this one too!

dcazzulino",Fix for LOG4NET-11. Added a Flush(true) method that will flush the lossy buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Flush MODIFY CyclicBuffer.csCyclicBuffer PopAll CyclicBuffer Clear
1,LOG4NET-72,36b8c818193e23af8a29c104a31bf35554e982c1,"Performance of ILog.xxxFormat methods The performance of the ILog.xxxFormat methods can be improved.

1) Add method overloads for common numbers of arguments:

void DebugFormat(string format, object arg0); 
void DebugFormat(string format, object arg0, object arg1); 
void DebugFormat(string format, object arg0, object arg1, object arg2); 

2) Delay formatting of the message until after the appenders filters have run.","Fix for LOG4NET-72. Added overloaded Format methods for 1, 2, and 3 fixed arguments. This is a performance enhancement.", MODIFY LogImpl.csLogImpl ErrorFormat LogImpl WarnFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl WarnFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl WarnFormat LogImpl DebugFormat LogImpl InfoFormat MODIFY ILog.cs MODIFY StringFormatTest.csStringFormatTest TestThreadPropertiesPattern StringFormatTest TestLogFormatApi_Error StringFormatTest TestLogFormatApi_NoFatal StringFormatTest TestLogFormatApi_NoWarn StringFormatTest TestFormatString StringFormatTest TestLogFormatApi_NoInfo StringFormatTest TestLogFormatApi_NoDebug StringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info StringFormatTest TestLogFormatApi_NoError
0,LOG4NET-38,56357bef38685f4521b5a9743dad54770f6258a5,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",TryParse has been introduced in .NET 2.0.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-228,3decc7da565e5e28f5fc30377032f5952f362f76,log4net.Util.HostName may throw System.Configuration.ConfigurationErrorsException in System.Net.Dns.GetHostName(). The exception should be ignored.  ,LOG4NET-228 improved exception handling for getting the computers hostname, MODIFY SystemInfo.csSystemInfo if
1,LOG4NET-53,fa6a830559dff51de434626cc537b7b6086a522f,"Allow repository properties to be set in the config file The LoggerRepository supports Properties. These are avaliable to the extensions, appenders, and plugins attached to the repository. While these properties can be set programatically it is not possible to set them through the config file.

We should allow properties to be set in the config file using the following schema:

<property>
  <key value=""PropertyName"" />
  <value value=""PropertyValue"" />
</property>",LOG4NET-53 Allow repository properties to be set in the config file, MODIFY Hierarchy.csHierarchy PropertyEntry ToString Hierarchy AddProperty
1,LOG4NET-352,f393bb1853103e75c4175fa10395d9451b73cbb8,"CS0419 during build with Mono >2.6 Fails to build with Mono > 2.6 with warn CS0419 treated as error.
While cref contains argument type signature compiler complains with error: Ambiguous reference in cref attribute `log4net.Appender.AppenderSkeleton.DoAppend'. Assuming {quote}`log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent)' but other overloads including `log4net.Appender.AppenderSkeleton.DoAppend(log4net.Core.LoggingEvent[])' have also matched{quote}
See [mail archive|http://mail-archives.apache.org/mod_mbox/logging-log4net-user/201110.mbox/%3C8762k4m6oq.fsf@v35516.1blu.de%3E] and [pastebin|http://pastebin.com/hpPaipXX]

Note that using signature ""M:AppenderSkeleton.DoAppend(LoggingEvent)"" as per [B.3.1 ID string format|http://msdn.microsoft.com/en-us/library/aa664807%28VS.71%29.aspx] helps to resolve this issue.
","LOG4NET-352 fix documentation cref IDs to resolve ambiguous references

log4net should compile on Mono >2.6 from now on.", MODIFY EventIDLogManager.cs MODIFY MarshalByRefLogManager.cs MODIFY TraceLogManager.cs MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderSkeleton.cs MODIFY AspNetTraceAppender.cs MODIFY BufferingAppenderSkeleton.cs MODIFY ColoredConsoleAppender.cs MODIFY ConsoleAppender.cs MODIFY DebugAppender.cs MODIFY EventLogAppender.cs MODIFY FileAppender.cs MODIFY IAppender.cs MODIFY LocalSyslogAppender.cs MODIFY ManagedColoredConsoleAppender.cs MODIFY MemoryAppender.cs MODIFY NetSendAppender.cs MODIFY RemoteSyslogAppender.cs MODIFY TextWriterAppender.cs MODIFY UdpAppender.cs MODIFY BasicConfigurator.cs MODIFY DOMConfigurator.cs MODIFY DOMConfiguratorAttribute.cs MODIFY PluginAttribute.cs MODIFY SecurityContextProviderAttribute.cs MODIFY XmlConfigurator.cs MODIFY XmlConfiguratorAttribute.cs MODIFY CompactRepositorySelector.cs MODIFY DefaultRepositorySelector.cs MODIFY ErrorCode.cs MODIFY ExceptionEvaluator.cs MODIFY IErrorHandler.cs MODIFY IRepositorySelector.cs MODIFY LevelEvaluator.cs MODIFY LevelMap.cs MODIFY LogImpl.cs MODIFY LoggerManager.cs MODIFY LoggingEvent.cs MODIFY SimpleDateFormatter.cs MODIFY LoggerMatchFilter.cs MODIFY ILog.cs MODIFY ExceptionLayout.cs MODIFY ILayout.cs MODIFY LayoutSkeleton.cs MODIFY DatePatternConverter.cs MODIFY PatternLayout.cs MODIFY LogManager.cs MODIFY DefaultRenderer.cs MODIFY IObjectRenderer.cs MODIFY RendererMap.cs MODIFY RemoteLoggingServerPlugin.cs MODIFY Hierarchy.cs MODIFY ILoggerRepository.cs MODIFY LoggerRepositorySkeleton.cs MODIFY NativeError.cs MODIFY PatternString.cs MODIFY DatePatternConverter.cs MODIFY SystemInfo.cs MODIFY ConverterRegistry.cs MODIFY EncodingConverter.cs MODIFY PatternStringConverter.cs MODIFY TypeConverter.cs
0,LOG4NET-297,e1c9c3b7bb26b3564062859a86b38b793048548a,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-310,451cce90f726c70f60f81848ff75413efb4e3e34,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",fix bounds-checks in NamedPatternConverter.  LOG4NET-215, MODIFY NamedPatternConverter.csNamedPatternConverter Convert MODIFY PatternLayoutTest.csPatternLayoutTest MessageAsNamePatternConverter GetFullyQualifiedName PatternLayoutTest NamedPatternConverterWithPrecision2ShouldStripLessLeadingStuffIfPresent PatternLayoutTest NamedPatternConverterWithoutPrecisionShouldReturnFullName PatternLayoutTest NamedPatternConverterWithPrecision1ShouldStripLeadingStuffIfPresent
0,LOG4NET-310,702b0775760b413eee77c86d855f94e6c77316e4,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",no longer needed now that content has been migrated to mvn site.  LOG4NET-117, DELETE contributing.html DELETE site.css DELETE style.css DELETE downloads.html DELETE history.html DELETE index.html DELETE license.html DELETE building.html DELETE config-examples.html DELETE example-apps.html DELETE faq.html DELETE features.html DELETE framework-support.html DELETE chainsaw.html DELETE index.html DELETE configuration.html DELETE contexts.html DELETE internals.html DELETE introduction.html DELETE plugins.html DELETE repositories.html DELETE release-notes.html DELETE roadmap.html DELETE support.html DELETE build.xml DELETE ant-1.4.1.jar DELETE commons-collections-2.0.jar DELETE jdom-b8.jar DELETE log4j-1.1.3.jar DELETE velocity-1.4-dev.jar DELETE xerces-1.4.4.jar DELETE contributing.xml DELETE downloads.xml DELETE history.xml DELETE index.xml DELETE license.xml DELETE building.xml DELETE config-examples.xml DELETE example-apps.xml DELETE faq.xml DELETE features.xml DELETE framework-support.xml DELETE chainsaw.xml DELETE index.xml DELETE configuration.xml DELETE contexts.xml DELETE internals.xml DELETE introduction.xml DELETE plugins.xml DELETE repositories.xml DELETE release-notes.xml DELETE roadmap.xml DELETE project.xml DELETE site.vsl DELETE support.xml
1,LOG4NET-370,56a2e146e21ff4737e1ff3ec308810e667873947,"RemoteSyslogAppender doesn't properly handle newline in log message RemoteSyslogAppender sends log messages containing newline characters to syslog, however the syslog RFC 3164 states that the message portion of the syslog packet can only contain visible ASCII characters and spaces.  This causes multiline log messages to render on a single line in at least some instances.

The solution appears to be sending each line of the log message as a separate syslog packet.  I have modified RemoteSyslogAppender to support this behavior and will provide a patch file.

Here is the relevant portion of the RFC:

4.1.3 MSG Part of a syslog Packet

   The MSG part will fill the remainder of the syslog packet.  This will
   usually contain some additional information of the process that
   generated the message, and then the text of the message.  There is no
   ending delimiter to this part.  The MSG part of the syslog packet
   MUST contain visible (printing) characters.  The code set
   traditionally and most often used has also been seven-bit ASCII in an
   eight-bit field like that used in the PRI and HEADER parts.  In this
   code set, the only allowable characters are the ABNF VCHAR values
   (%d33-126) and spaces (SP value %d32).  However, no indication of the
   code set used within the MSG is required, nor is it expected.  Other
   code sets MAY be used as long as the characters used in the MSG are
   exclusively visible characters and spaces similar to those described
   above.  The selection of a code set used in the MSG part SHOULD be
   made with thoughts of the intended receiver.  A message containing
   characters in a code set that cannot be viewed or understood by a
   recipient will yield no information of value to an operator or
   administrator looking at it.

http://www.ietf.org/rfc/rfc3164.txt",LOG4NET-370 fix RemoteSyslogAppender to log only characters that are valid as of RFC http://www.ietf.org/rfc/rfc3164.txt, MODIFY RemoteSyslogAppender.csRemoteSyslogAppender Append
1,LOG4NET-553,c94bb14cdb963529237424844e09e7eb7da155e5,"DebugAppender configuration should give the possibility to disable outputting loggerName as category The DebugAppender always uses the {{System.Diagnostics.Debug.Write(string,string)}} overload passing in the loggername as the category parameter.

It should be possible to omit the category parameter if having the loggername as category is not desired.

Attached is a patch implementing the desired new feature, which would be activated by configuration:
{code:xml}
<appender name=""DEBUG"" type=""log4net.Appender.DebugAppender"">
    <outputCategory value=""false""/>
    <layout type=""log4net.Layout.PatternLayout"">
	  <conversionPattern value=""%-5level: %message%newline""/>
    </layout>
  </appender>
{code}

In my patch, the outputCategory parameter defaults to true, so the behavior doesnt change unless the new configuration is used.","LOG4NET-553 allow DebugAppender to skip category

Patch by Jean-Francois Beaulac", MODIFY log4net.tests.xproj MODIFY project.json MODIFY DebugAppender.csDebugAppender Append ADD DebugAppenderTest.csDebugAppenderTest TestErrorHandler Error DebugAppenderTest TestErrorHandler Error DebugAppenderTest NullCategoryTest DebugAppenderTest EmptyStringCategoryTest DebugAppenderTest TestErrorHandler Error DebugAppenderTest DefaultCategoryTest DebugAppenderTest MethodNameCategoryTest MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj MODIFY log4net.Tests.vs2012.csproj
0,LOG4NET-232,71442423b3ab3200c01c4f9b18e28e76b3e4c607,"Use ReaderWriterLockSlim instead of ReaderWriterLock. ReaderWriterLock should be replaced with ReaderWriterLockSlim according to Microsoft for performance and simplification reasons.

MSDN: http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock.aspx

The .NET Framework has two reader-writer locks, ReaderWriterLockSlim and ReaderWriterLock. ReaderWriterLockSlim is recommended for all new development. ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlim avoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than ReaderWriterLock. ",LOG4NET-148 thread context properties does now use a ThreadStatic properties dictionary, MODIFY ThreadContextProperties.csThreadContextProperties if ThreadContextProperties if ThreadContextProperties Clear ThreadContextProperties if ThreadContextProperties Remove ThreadContextProperties GetProperties
1,LOG4NET-370,4702ed38136629fbcebddb26e3cc5458b29ae17c,"RemoteSyslogAppender doesn't properly handle newline in log message RemoteSyslogAppender sends log messages containing newline characters to syslog, however the syslog RFC 3164 states that the message portion of the syslog packet can only contain visible ASCII characters and spaces.  This causes multiline log messages to render on a single line in at least some instances.

The solution appears to be sending each line of the log message as a separate syslog packet.  I have modified RemoteSyslogAppender to support this behavior and will provide a patch file.

Here is the relevant portion of the RFC:

4.1.3 MSG Part of a syslog Packet

   The MSG part will fill the remainder of the syslog packet.  This will
   usually contain some additional information of the process that
   generated the message, and then the text of the message.  There is no
   ending delimiter to this part.  The MSG part of the syslog packet
   MUST contain visible (printing) characters.  The code set
   traditionally and most often used has also been seven-bit ASCII in an
   eight-bit field like that used in the PRI and HEADER parts.  In this
   code set, the only allowable characters are the ABNF VCHAR values
   (%d33-126) and spaces (SP value %d32).  However, no indication of the
   code set used within the MSG is required, nor is it expected.  Other
   code sets MAY be used as long as the characters used in the MSG are
   exclusively visible characters and spaces similar to those described
   above.  The selection of a code set used in the MSG part SHOULD be
   made with thoughts of the intended receiver.  A message containing
   characters in a code set that cannot be viewed or understood by a
   recipient will yield no information of value to an operator or
   administrator looking at it.

http://www.ietf.org/rfc/rfc3164.txt","LOG4NET-370 fix the RemoteSyslogAppender to properly handle log messages that contain newlines

This patch is based on the work of Jarrod Alexander. Please note that this patch also fixes
indentation issues and thus contains some portions of refactoring. Finally it is worth to note
that the patch primarily focuses on making the syslog messages RFC3164 (http://www.ietf.org/rfc/rfc3164.txt) compliant. The signifant parts of the RFC are:

4.1.3 MSG Part of a syslog Packet 

   The MSG part will fill the remainder of the syslog packet. This will 
   usually contain some additional information of the process that 
   generated the message, and then the text of the message. There is no 
   ending delimiter to this part. The MSG part of the syslog packet 
   MUST contain visible (printing) characters. The code set 
   traditionally and most often used has also been seven-bit ASCII in an 
   eight-bit field like that used in the PRI and HEADER parts. In this 
   code set, the only allowable characters are the ABNF VCHAR values 
   (%d33-126) and spaces (SP value %d32). However, no indication of the 
   code set used within the MSG is required, nor is it expected. Other 
   code sets MAY be used as long as the characters used in the MSG are 
   exclusively visible characters and spaces similar to those described 
   above. The selection of a code set used in the MSG part SHOULD be 
   made with thoughts of the intended receiver. A message containing 
   characters in a code set that cannot be viewed or understood by a 
   recipient will yield no information of value to an operator or 
   administrator looking at it.", MODIFY RemoteSyslogAppender.csRemoteSyslogAppender GetSeverity RemoteSyslogAppender RemoteSyslogAppender RemoteSyslogAppender Append
0,LOG4NET-76,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-243,73a4921de015d4262273055b04ea37206a224038,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-140,d9cc0bb25bdf4615422bf9f110012ebd45314157,"Allow to set an all not appended appender I use several appenders to split my logs into several log files. All whats not handled by a specific appender should log in a root logfile. But today all whats previously logged by a specific appender is also appended to the root appender. So it would be good if i could define a ""log the rest"" appender.",Test for LOG4NET-28 demonstrating how to insert NULL values using both an xml configuration and progmatic configuration., MODIFY AdoNetAppenderTest.csAdoNetAppenderTest NullPropertyProgmaticConfig AdoNetAppenderTest NullPropertyXmlConfig
0,LOG4NET-275,8400fecdd81394a86d4192889446d40678dcfb90,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-259,71442423b3ab3200c01c4f9b18e28e76b3e4c607,"Log4Net does not create a new tab in Chainsaw I believe the problem is in XmlLayoutSchemaLog4j, and that you need to change ""log4japp"" to ""application"".

According to the Chainsaw tutorial:
Chainsaw automatically looks inside each received LoggingEvent for a special Application property to determine which tab to route an event to. If it cannot find this property, it attempts to use a secondary property usually added via the SocketAppender or SocketHubAppender which identify the remote host of these events. If neither of these are found, Chainsaw routes events to a default ""Unknown"" tab.

Logging events generated internally by chainsaw include the following properties:
<log4j:properties>
    <log4j:data name=""application"" value=""Generator 1""/>
    <log4j:data name=""hostname"" value=""localhost""/>
    <log4j:data name=""log4jid"" value=""2""/>
    <log4j:data name=""some string"" value=""some valueGenerator 1""/>
</log4j:properties>

Logging events generated by XmlLayoutSchemaLog4j include the following properties:
<log4j:properties>
    <log4j:data name=""log4net:UserName"" value=""DOMAIN\username""/>
    <log4j:data name=""log4jid"" value=""281""/>
    <log4j:data name=""log4jmachinename"" value=""machineName""/>
    <log4j:data name=""log4net:HostName"" value=""machineName""/>
    <log4j:data name=""log4japp"" value=""Application.exe""/>
</log4j:properties>

See also: http://www.mail-archive.com/log4j-dev@jakarta.apache.org/msg05361.html

UPDATE: Documentation issue. See comments below.",LOG4NET-148 thread context properties does now use a ThreadStatic properties dictionary, MODIFY ThreadContextProperties.csThreadContextProperties if ThreadContextProperties if ThreadContextProperties Clear ThreadContextProperties if ThreadContextProperties Remove ThreadContextProperties GetProperties
0,LOG4NET-310,5b2160524efa38a35a82ffdaf0aec0c07ce44e22,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Allow default value for event id to be specified via configuration.  LOG4NET-214, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-72,0c1e5b73df05f9bc2daac0bb324a3080bbd2b400,"Performance of ILog.xxxFormat methods The performance of the ILog.xxxFormat methods can be improved.

1) Add method overloads for common numbers of arguments:

void DebugFormat(string format, object arg0); 
void DebugFormat(string format, object arg0, object arg1); 
void DebugFormat(string format, object arg0, object arg1, object arg2); 

2) Delay formatting of the message until after the appenders filters have run.",Fix for LOG4NET-70. Changed reference from coredll.dll to CoreDll.dll, MODIFY SystemInfo.cs
0,LOG4NET-410,c152704aa155d20cc835583419cd6b909a78418f,"Please delete old releases from mirroring system To reduce the load on the ASF mirrors, projects are required to delete old releases [1]

Please can you remove all non-current releases?

Thanks!

[Note that older releases are always available from the ASF archive server]

[1] http://www.apache.org/dev/release.html#when-to-archive

","LOG4NET-71 move around extensions.  Don't try to build them, yet", DELETE nant.build DELETE nant.config DELETE cs-extensions.sln DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config RENAME AssemblyInfo.cs RENAME EventIDLogImpl.cs RENAME EventIDLogManager.cs RENAME IEventIDLog.cs RENAME log4net.Ext.EventID.csproj RENAME AssemblyInfo.cs RENAME MarshalByRefLogImpl.cs RENAME MarshalByRefLogManager.cs RENAME log4net.Ext.MarshalByRef.csproj
1,LOG4NET-87,ca461337ba4b9921aca42fc102750867b6a64054,"Support ASP.Net related PatternConverters to allow items from the HttpContext.Current.Session, Cache, Request, etc. to be captured. It would be nice if there were built-in Pattern Converters to support core ASP.Net objects:

 %aspnet-session{UserId}
 %aspnet-session
 %aspnet-request{ProductId}

This issue may be a good time to investigate supporting a more advanced syntax for the Option parameter:

 %aspnet-request{queryString:ProductId}

that could be shared across all Pattern Converters.",Additional changes for LOG4NET-87: Added checks for NETCF and SCLI compiler directives to disable ASP.Net patterns under certain platforms. Updated copyright year on changed files to 2006., MODIFY AspNetCachePatternConverter.cs MODIFY AspNetContextPatternConverter.cs MODIFY AspNetPatternConverter.cs MODIFY AspNetRequestPatternConverter.csAspNetRequestPatternConverter Convert MODIFY AspNetSessionPatternConverter.csAspNetSessionPatternConverter Convert MODIFY PatternLayout.csPatternLayout PatternLayout
0,LOG4NET-296,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"Patch for .net 4, client profile and a fix for the name resolution bug  ",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
1,LOG4NET-46,9e1ead9259bca8cc9b20678810d5703e5166fb16,"Support appenders that can output multiple events efficiently Some appenders can efficiently output batches of events. Currently there is no way to pass a batch of events to an appender.

Add an interface IBulkAppender that exposes a DoAppend method that takes an array of events. This interface can be supported by appenders that can process in bulk.",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-15,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"Email high ""importance"" priority setting with SmtpAppender It would be quite valuable for error alerting if the
SMTPAppender would expose its
System.Web.Mail.MailMessage's importance priority
setting, as a property of the SmtpAppender class.

A common scenario would probably be where the user
would set the Threshold
to ERROR and set the High Importance flag to being
true.

regards,

carl","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
0,LOG4NET-242,09f7293056e8abf36655537318384e9bd0ff5c9e,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-241,e1c9c3b7bb26b3564062859a86b38b793048548a,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
1,LOG4NET-43,21c34f7153387912a991692eaf1f32fe82ec9492,"Specifying an empty string as a property in the config file results in an error Specifying an empty string as a property (either as <property/> or <property></property>) results in the following:

log4net:ERROR XmlHierarchyConfigurator: Failed to construct object of type [System.String] Exception: System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeType.CreateInstanceImpl(Boolean publicOnly)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint) in S:\local\log4net-cvs\logging-log4net\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs:line 924",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-311,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-24,252574f67d0bdabea33a7f9c73d1a941299f9e8a,"Programmatic flush of BufferingAppenderSkeleton buffer Programmatic flush of BufferingAppenderSkeleton buffer

The BufferingAppenderSkeleton holds a buffer of events which are to be delivered to the appender subclass via the SendBuffer method. This buffer currently cannot be programmatically flushed to the appender.

It should be trivial to add support for a void Flush() method to the BufferingAppenderSkeleton class.
",Fix LOG4NET-25.  RollingFileAppender fails if RollOverIfDateBoundaryCrossing required and current directory is not ApplicationBase directory., MODIFY RollingFileAppender.csRollingFileAppender ActivateOptions
1,LOG4NET-490,c47c2c6b9552a34d435024441b303421ebfcf512,"InterProcessLock Tests fail The tests in question are:

* TestInterProcessLockRoll
* TestInterProcessLockUnlocks

This is actually quite bad and proves that my last attempt to introduce something that just works failed miserably. At first glance the trouble comes from the interaction with the base classes. One thing I noted is that the base class tries to write a footer when the file gets closed. But in the case of the rolling file appender the file is no longer there when this happens. Another example is that due to the error logs I'm writing the test finally noticed that the locks are acquired and released in bad order and thus result in bad behaviour.

But these are just two examples from a bunch of issues that still have to be worked out.",LOG4NET-490: fix inter process lock such that the tests pass, MODIFY FileAppender.csFileAppender ActivateOptions FileAppender InterProcessLock CloseFile FileAppender OnClose FileAppender InterProcessLock ReleaseLock FileAppender InterProcessLock ActivateOptions FileAppender MinimalLock OnClose FileAppender InterProcessLock OnClose FileAppender ExclusiveLock OnClose FileAppender ExclusiveLock ActivateOptions FileAppender InterProcessLock OpenFile FileAppender MinimalLock ActivateOptions FileAppender InterProcessLock AcquireLock
0,LOG4NET-131,bc7056e4e4aab7cc1e3cec0f05e8fd2cd0af5c21,Add Cc and Bcc support to SmtpAppender Add Cc and Bcc support to SmtpAppender.,Fix for LOG4NET-115. Added EnvironmentFolderPathPatternConverter to allow System.Environment.SpecialFolder pattern string expansion., MODIFY PatternString.csPatternString PatternString ADD EnvironmentFolderPathPatternConverter.csEnvironmentFolderPathPatternConverter Convert ADD PatternStringTest.csPatternStringTest TestEnvironmentFolderPathPatternConverter
0,LOG4NET-167,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-214,f51c60d914ba1ffb6ed34ae1ed275913572c4131,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",Point to existing FAQ entry.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions
1,LOG4NET-485,03c1ce16b0e48285eada61a9afa40bf5dc036643,"RollingFileAppender cannot be used by multiple process RollingFileAppender doesn't acquire lock when rolling takes place.
As a consequence running multiple instances of the same program rewrites the same log file instead of making a roll for everyone.

There is FileAppender.InterProcessLock but it only protects writes and not rolls.","LOG4NET-485: implemented a mutex that locks rolling across multiple processes on the same computer

However, this does not solve issues where multiple processes from different computers
try to roll over files that are located on a network share.", MODIFY RollingFileAppender.csRollingFileAppender ActivateOptions RollingFileAppender AdjustFileBeforeAppend RollingFileAppender RollingFileAppender RollingFileAppender ~RollingFileAppender
0,LOG4NET-76,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-88,6b91b595de6654532a9614e0890c8346eb1487a1,"[PATCH] to AdoNetAppender.cs to support .NET 2.0 connectionStrings configuration section This is a patch for [LOG4NET-78] https://issues.apache.org/jira/browse/LOG4NET-78.  This adds a new ""connectionStringName"" attribute (and corresponding ConnectionStringName) property to the AdoNetAppender class.  This is a reference to a connection string within the <ConnectionStrings> section of an App.config or Web.config file.

The choice of name ""connectionStringName"" is consistent with the naming that Microsoft uses in the various Providers such as SqlMembershipProvider.

I made sure to put this code in between #if NET_2_0 blocks. However, the patch does not include the required change to the log4net.csproj file which needs to reference the System.Configuration.dll (C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\System.configuration.dll) assembly.  

This is a .NET 2.0 only assembly so I was unsure how to add a conditional compilation element so that the project reference would not break log4net for .NET 1.0 and .NET 1.1.  

If there is a better way to do so, please let me know!","Fix for LOG4NET-96. Added EnabledDate, ErrorCode, ErrorMessage, and Exception properties to track when an OnlyOnceErrorHandler becomes active. Added Reset method which disables the error handler thus allowing it to become active again.", MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler if OnlyOnceErrorHandler Reset OnlyOnceErrorHandler Error OnlyOnceErrorHandler if OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error
1,LOG4NET-461,4fc3185acbb8d2f734b1a6b578b33d924fa25c98,"The AdoNetAppender  Basically what happens is you guys store the SqlCommand between all requests. The problem is, sometimes this prepared statement gets removed from the cache in SqlServer. When this happens all subsequent requests result in an error ""Could not find prepared statement with handle -1""

You could resolve this by checking for that specific error on submitting and if you get it recreate the command and try again, or just recreate and prepare the statement every time.

This is a pretty major issue.","LOG4NET-461: refactored the AdoNetAppender

The AdoNetAppender suffered several issues. One was that a database command was
created and stored for the appenders lifetime. This caused trouble with some
database servers because those cleaned up cached prepared statements from time to
time and thus caused the appender to fail without the capability to recover. I
solved this problem by creating a database command whenever the buffer is sent,
well knowing that this costs a little more performance but is much more stable.

At this point I further took the chance to cleanup the source by replacing all
references to private member attributes with their public property mapping.
Further I added and fixed some of the documentation.

This overall cleanup is not yet complete, meaning that there is still a connection
that is being kept alive while it would be wiser to rely on proper connection
pooling and just open/close the database connection when sending the buffer. I
will raise this topic on the dev list.", MODIFY AdoNetAppender.csAdoNetAppender InitializeDatabaseConnection AdoNetAppender OnClose AdoNetAppender GetLogStatement AdoNetAppender InitializeDatabaseCommand AdoNetAppender AddParameter AdoNetAppender DiposeConnection AdoNetAppender SendBuffer AdoNetAppender CreateConnection AdoNetAppender ResolveConnectionType AdoNetAppender ResolveConnectionString AdoNetAppender AdoNetAppender AdoNetAppender ActivateOptions AdoNetAppenderParameter AdoNetAppenderParameter AdoNetAppenderParameter Prepare AdoNetAppenderParameter FormatValue AdoNetAppender SendBuffer AdoNetAppender DisposeCommand
0,LOG4NET-232,28a63b970d0a7d43f0adeaf7807fd943e35472d6,"Use ReaderWriterLockSlim instead of ReaderWriterLock. ReaderWriterLock should be replaced with ReaderWriterLockSlim according to Microsoft for performance and simplification reasons.

MSDN: http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock.aspx

The .NET Framework has two reader-writer locks, ReaderWriterLockSlim and ReaderWriterLock. ReaderWriterLockSlim is recommended for all new development. ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlim avoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than ReaderWriterLock. ",LOG4NET-316 added a configuration example that explains the usage of DynamicPatternLayout, MODIFY config-examples.xml
0,LOG4NET-360,cb150d88f8da4a06f829d6c47d2222f48a84baad,"EventLogAppender can corrupt the event log on Windows Vista and higher if the string is longer than 31839 bytes Issue: EventLogAppender can corrupt the event log on Windows Vista and higher if the string is longer than 31839 bytes.

The log4net EventLogAppender allows you to write up to 32000 bytes and there is a defect in the .NET Framework that will let you write that much data in Windows Vista and higher (which has a limit of 31839).

See the attachment that shows ""$exception	{""The event log file is corrupted""}	System.Exception {System.ComponentModel.Win32Exception}"" along with the stack after a call to EventLog.WriteEntry() under Windows 7 that used a message string that was 31,876 bytes long.

The issue has been reported to Microsoft as well: https://connect.microsoft.com/VisualStudio/feedback/details/770126/eventlog-writeentry-can-corrupt-the-event-log-because-of-invalid-argument-check-in-net-framework#tabs

The code below is my workaround for determining a max message length that will not corrupt the event log. I've also written our own custom EventLogAppender that is able to work around this issue.

private const int MaxEventLogMsgLength_PreVista = 32766;
private const int MaxEventLogMsgLength_VistaOrHigher = 31839;

/// <summary>
/// Gets the maximum allowable size of event log message for the current operating system.
/// </summary>
/// <returns></returns>
public static int GetMaxEventLogMessageSize()
{
	// http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx            
	// The 32766 documented max size is two bytes shy of 32K (I'm assuming 32766 may leave space for a two byte null
	// terminator of #0#0). The 32766 max length is what the .NET 4.0 source code checks for, but this is WRONG!...
	// strings with a length > 31839 on Windows Vista or higher can CORRUPT the event log! See:
	// System.Diagnostics.EventLogInternal.InternalWriteEvent() for the use of the 32766 max size.
	var maxEventMsgSize = MaxEventLogMsgLength_PreVista;

	// Windows Vista and higher
	if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6)
	{
		// See ReportEvent API: http://msdn.microsoft.com/en-us/library/aa363679(VS.85).aspx
		// ReportEvent's lpStrings parameter: ""A pointer to a buffer containing an array of null-terminated strings that are
		// merged into the message before Event Viewer displays the string to the user. This parameter must be a valid pointer
		// (or NULL), even if wNumStrings is zero. Each string is limited to 31,839 characters.""

		// Going beyond the size of 31839 will (at some point) corrupt the event log on Windows Vista or higher! It may succeed
		// for a while...but you will eventually run into the error: ""System.ComponentModel.Win32Exception : A device attached to
		// the system is not functioning"", and the event log will then be corrupt (I was able to corrupt an event log using a 
		// length of 31877 on Windows 7).

		// The max size for Windows Vista or higher is documented here: http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx.
		// Going over this size may succeed a few times but the buffer will overrun and eventually corrupt the log (based on testing).
		// Log4net's own EventLogAppender will write up to 32000 bytes (0x7D00), which can corrupt the event log.

		// The maxEventMsgSize size is based on the max buffer size of the lpStrings parameter of the ReportEvent API.
		// The documented max size for EventLog.WriteEntry for Windows Vista and higher is 31839, but I'm leaving room for a
		// terminator of #0#0, as we cannot see the source of ReportEvent (though we could use an API monitor to examine the
		// buffer, given enough time).
		// TODO: Use an API monitor to examine how the ReportEvent API allocates a buffer for the event log message strings.
		const int terminatorLength = 2; // Safety for now.
		maxEventMsgSize = MaxEventLogMsgLength_VistaOrHigher - terminatorLength;
	}
	return maxEventMsgSize;
}		",LOG4NET-379 fixed an avoidable NullReferenceException raised in the Fileappender ActivateOptions(), MODIFY FileAppender.csFileAppender ActivateOptions
1,LOG4NET-354,a06839a335c7f13c865ee4bfb30982f67a2a63b9,"E-mail encoding configuration setting for SmtpAppender It would be nice if we could specify body transfer encoding and subject encoding in SmtpAppender (via configuration settings).
All unicode characters are rendered as question marks, because SmtpAppender uses the default settings:

Content-Type: text/plain;charset=""iso-8859-1""
Content-Transfer-Encoding: 7bit",LOG4NET-354 added a configuration option that allows to configure the subject and body encoding, MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-123,289a3f2a030c75e6fb0912f2c0c22021848d587c,"[PATCH] EnvironmentPatternConverter does not expand User or System level environment variables under Windows Under .NET 2.0, there is an additional option on the System.Environment.GetEnvironment method allowing specification of a process level, user level, or machine level environment variable. If not specified, only process level environment variables will be examined.

The attached patch enhances the EnvironmentPatternConverter. If the specified environment property is not found in the current process environment, the user environment settings will be checked. If the property is still not found, the machine level environment settings will also be tested.",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
0,LOG4NET-243,9df9848f90c58c41f658b66c68178112eccc7c30,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-44,eb02bce2d20473bba7b2fddbad056f90651054dd,"XmlLayout emits all properties under a node named global-properties, rather than just properties. The global-properties name is incorrect as all properties for the event are included. The node name should be changed to properties.",Fix for LOG4NET-45. Added constructor and property to take plugin type as a Type, MODIFY PluginAttribute.csPluginAttribute ToString PluginAttribute PluginAttribute PluginAttribute CreatePlugin PluginAttribute PluginAttribute PluginAttribute PluginAttribute
1,LOG4NET-113,0d83e31c3fe2f44d3e64f67cc77a7a809cca73b7,"[PATCH] SystemInfo.GetTypeFromString() raises NotSupportedException BUG:
Calling the GetTypeFromString(string, bool, bool) method in .NET CF 2.0 SP1 on Windows CE 4.2 raises a NotSupportedException if the supplied typeName parameter contains a comma ("","") and both boolean values are ""true"", i.e. when specifying a type and the including assembly in the log4net XML configuration.
The exception stems from the overloaded Type.GetType method that takes three parameters. When using the two parameter Type.GetType method, everything works fine.

Steps to reproduce:
On the described environment configure e.g. an Appender and supply the assembly name in the ""type"" attribute.

PATCH:
The patch simply uses the two parameter GetType overload for all NETCF frameworks instead of only for NETCF_1_0.
",Fix for LOG4NET-113. 3 argument version of Type.GetType behaves differently to to 2 argument version on Compact Framework., MODIFY SystemInfo.csSystemInfo GetTypeFromString
0,LOG4NET-158,013cdb8fa04e3a3f4bf0543c90277de6a217b627,"XMLConfigurator.ConfigureAndWatch() leaks resources if called multiple times If XMLConfigurator.ConfigureAndWatch() is called multiple times within an AppDomain, each time it is called it leaks a Win32 file  handle (possibly from a FileSystemWatcher object not being disposed?) to the folder containing the previous configuration file it was watching.

Desired behavior would be to release the handle to the folder containing the previous configuration file.",Fix for LOG4NET-128. Explain the comma/semicolon differences between various versions of the Framework., MODIFY SmtpAppender.cs
0,LOG4NET-486,b0925ead3f58f007f280268c4dc0a97a8c750081,"Rolling File Appender with 'maxSizeRollBackups' and 'datePattern' does not detect existing logs initially Rolling file appender with 'maxSizeRollBackups' set to a positive number tries to initialise by looking at existing log files to continue the rolling sequence and set 'm_curSizeRollBackups' to its correct value but the base filename format is wrong.

In method GetWildcardPatternForFile with m_preserveLogFileNameExtension true it should construct a wildcard pattern but the 'baseFileName' is not enough to fully identify the log file when 'datePattern' is also specified.

For example: -

With log files such as: -

MyLogFile_2015-10-27.1.log
MyLogFile_2015-10-27.2.log

the pattern created is 'MyLogFile.*.log'

The date pattern is missing and as a result no log files are found and historical log files get overwritten rather than rolled over.

A quick fix I'm using is to remove the '.' from the literal "".*"" in the wildcard. This allows the OS to identify the log files. Later code makes a fuller check of the exact log file format and therefore this may be safe but I would think it needs more validation and testing to be sure this works under all circumstances.",LOG4NET-461: fix for ancient .NET frameworks, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
1,LOG4NET-97,564469bc490a15f21fcd4227370e474392e9b82e,"Make Hierarchy's ILoggerFactory aware of the repository's LevelMap Instead of creating the RootLogger with Level.Debug:
 
 return new RootLogger(Level.Debug);

shouldn't the DefaultLoggerFactory use:

 return new RootLogger(repository.LevelMap.LookupWithDefault(Level.Debug));

in case the user has remapped Debug to another value.","Committed patch from LOG4NET-97: Make Hierarchy's ILoggerFactory aware of the repository's LevelMap.
This is a breaking change to ILoggerFactory, but is required to ensure that the factory is aware of the repository and therefore its LevelMap", MODIFY DefaultLoggerFactory.csDefaultLoggerFactory CreateLogger DefaultLoggerFactory CreateLogger MODIFY Hierarchy.csHierarchy CollectAppender Hierarchy GetAppenders Hierarchy CollectAppender Hierarchy UpdateChildren Hierarchy Configure Hierarchy BasicRepositoryConfigure Hierarchy CollectAppenders Hierarchy ResetConfiguration Hierarchy GetLogger Hierarchy Configure Hierarchy if Hierarchy BasicRepositoryConfigure MODIFY ILoggerFactory.cs
0,LOG4NET-311,54493ed542fa2c3ab36809f1b5a65b8daa97d1ae,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Deal with SecurityException in EventLogAppender more gracefully.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY EventLogAppenderTest.csEventLogAppenderTest ActivateOptionsDisablesAppenderIfSourceDoesntExist EventLogAppenderTest TestGetEntryTypeForExistingApplicationName EventLogAppenderTest TestGetEntryType
0,LOG4NET-113,e86390b79552a9b83c5f3bf48ab3300cad330b80,"[PATCH] SystemInfo.GetTypeFromString() raises NotSupportedException BUG:
Calling the GetTypeFromString(string, bool, bool) method in .NET CF 2.0 SP1 on Windows CE 4.2 raises a NotSupportedException if the supplied typeName parameter contains a comma ("","") and both boolean values are ""true"", i.e. when specifying a type and the including assembly in the log4net XML configuration.
The exception stems from the overloaded Type.GetType method that takes three parameters. When using the two parameter Type.GetType method, everything works fine.

Steps to reproduce:
On the described environment configure e.g. an Appender and supply the assembly name in the ""type"" attribute.

PATCH:
The patch simply uses the two parameter GetType overload for all NETCF frameworks instead of only for NETCF_1_0.
","Fixed LOG4NET-92.
Added support for .NET Compact Framework 2.0.", MODIFY log4net.build MODIFY log4net.include MODIFY AnsiColorTerminalAppender.csAnsiColorTerminalAppender Append MODIFY ConsoleAppender.csConsoleAppender Append MODIFY XmlConfigurator.csXmlConfigurator Configure MODIFY LogException.cs MODIFY LoggingEvent.cs MODIFY XMLLayout.csXmlLayout FormatXml MODIFY NDC.cs MODIFY SystemInfo.csSystemInfo GetTypeFromString SystemInfo CreateArgumentOutOfRangeException SystemInfo NewGuid SystemInfo CreateCaseInsensitiveHashtable MODIFY ThreadContextStack.cs MODIFY ConversionNotSupportedException.cs MODIFY IPAddressConverter.csIPAddressConverter ConvertFrom
1,LOG4NET-31,bdd6cea2ed135071e286d8daaa03150bb19bf0ed,"Allow user to pass in additional parameters to <converter> node via some kind of <property> tag It would be useful if the user was able to supply additional properties to the <convert> tag in the form of:

 <property name=""foo"" value=""bar"" />
 <property name=""Hello"" value=""World"" />

The code below uses a <property> node to determine if the HomeAddress or the WorkAddress will appear in the log message. If the parameter is not present, the converter prints a default value.

 <converter>
  <name value=""user-converter"" />
  <type value=""Company.Project.Logging.UserConverter, Company.Project"" />
  <property name=""Address"" value=""HomeAddress"" />
 </converter>
 <conversionPattern value=""%p %d %user-converter{Nicko} - %m%n"" />

The <property> tags would be accessible via a Properties IDictionary. It would allow the converter to perform additional logic on the base.Option that was passed in:

 public class MyConverter : PatternConverter
 {
  override protected void Convert(TextWriter writer, object state) 
  {
   User user = GetUserByUserName(base.Option);
   string address = base.Properties[""Address""] as string;
   if (address != null && address.Length > 0)
   {
    if (user != null)
    {
     switch (address)
     {
      case ""HomeAddress"": writer.Write(user.HomeAddress); break;
      case ""WorkAddress"": writer.Write(user.WorkdAddress); break;
     }
    }
    else
    {
     // ???
    }
   }
   else
   {
    // default display
    writer.Write(user.HomeAddress); break;   
   }
  }
 }",Fix for LOG4NET-31. Allow additional properties to be passed to Converters configured via xml. Moved Hierarchy.PropertyEntry into its own class. Moved PatternString.ConverterInfo into its own class., MODIFY PatternLayout.csPatternLayout ConverterInfo ConverterInfo PatternLayout CreatePatternParser PatternLayout AddConverter PatternLayout AddConverter MODIFY Hierarchy.csHierarchy PropertyEntry ToString ADD ConverterInfo.csConverterInfo AddProperty ConverterInfo ConverterInfo MODIFY PatternConverter.cs MODIFY PatternParser.csPatternParser ProcessConverter MODIFY PatternString.csPatternString ConverterInfo ConverterInfo PatternString AddConverter PatternString CreatePatternParser PatternString AddConverter ADD PropertyEntry.csPropertyEntry ToString MODIFY log4net.vs2005.csproj
0,LOG4NET-344,dbe0f89a38f6fca026d8d78ab59f23009cde8443,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",LOG4NET-443 prevent orphaned locks with ReaderWriterLockSlim in the face of aborted threads, MODIFY ReaderWriterLock.csReaderWriterLock AcquireReaderLock ReaderWriterLock AcquireWriterLock
0,LOG4NET-228,71442423b3ab3200c01c4f9b18e28e76b3e4c607,log4net.Util.HostName may throw System.Configuration.ConfigurationErrorsException in System.Net.Dns.GetHostName(). The exception should be ignored.  ,LOG4NET-148 thread context properties does now use a ThreadStatic properties dictionary, MODIFY ThreadContextProperties.csThreadContextProperties if ThreadContextProperties if ThreadContextProperties Clear ThreadContextProperties if ThreadContextProperties Remove ThreadContextProperties GetProperties
1,LOG4NET-42,41fbb821a2c0df0ab7047ca6e4f73ab8691f2eb2,"Serialised LoggingEvent does not preserve the Fix flags When a LoggingEvent is desterilised the data is restored but the FixFlags are not set. By default this is set to None. If the LoggingEvent object if then fixed (e.g. by a BufferingAppender) then the data in the event may be overwritten from the current environment.

When the LoggingEvent is desterilised the Fix property should be set to FixFlags.All.",Fix LOG4NET-42: Serialised LoggingEvent does not preserve the Fix flags. Added new constructors to allow FixFlags to be passed in with the LoggingEventData, MODIFY LoggingEvent.csLoggingEvent LoggingEvent LoggingEvent LoggingEvent LoggingEvent LoggingEvent
0,LOG4NET-76,54493ed542fa2c3ab36809f1b5a65b8daa97d1ae,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Deal with SecurityException in EventLogAppender more gracefully.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY EventLogAppenderTest.csEventLogAppenderTest ActivateOptionsDisablesAppenderIfSourceDoesntExist EventLogAppenderTest TestGetEntryTypeForExistingApplicationName EventLogAppenderTest TestGetEntryType
0,LOG4NET-296,d78a5f8331dad60de277fecda43205412ccb464a,"Patch for .net 4, client profile and a fix for the name resolution bug  ",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-241,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-116,a233bcb1bd3b771cf8bdf9c011f639f341d0a4a7,"allow smtp to ssl authenticate and with certificates. It would be fantastic if more of the SMTP feature of .net 2.0 would be allowed such as 
SSL authentication and with certificates.",Fix for LOG4NET-168. Add ReplyTo property to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-243,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-112,9f1b0f4d9ca956aea2d201515d3a143c47a0f309,"Add support to the UdpAppender for IP v6 remote addresses The UdpClient object must be configured for either IP v4 or IP v6 when it is created. Once configured it cannot be used to send to remote addresses that are from a different network family.

Specifying the network family is not supported on NET 1.0, NETCF 1.0, SSCLI 1.0",LOG4NET-111: Project metadata for projects.apache.org, ADD doap_log4net.rdf
0,LOG4NET-143,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-354,26060334da4fc07c5f768da5a1f7a647a70de42b,"E-mail encoding configuration setting for SmtpAppender It would be nice if we could specify body transfer encoding and subject encoding in SmtpAppender (via configuration settings).
All unicode characters are rendered as question marks, because SmtpAppender uses the default settings:

Content-Type: text/plain;charset=""iso-8859-1""
Content-Transfer-Encoding: 7bit","LOG4NET-342 added the property Configured to ILog that allows to check if the repository was configured properly

Usecase:
   if (log.Configured == false) 
   { 
      throw new ConfigurationErrorsException(""Log4net failed to initialize properly.""); 
   }", MODIFY LogImpl.cs MODIFY ILog.cs
0,LOG4NET-311,fc878ee7e72a20432534f7670c4549739170287b,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Allow EventLog category to be specified via the LoggingEvent's properties or a configured value.  Based on patch by Ron Grabowsky.  LOG4NET-38, MODIFY EventLogAppender.csEventLogAppender Append MODIFY SystemInfo.csSystemInfo TryParse
0,LOG4NET-74,0c1e5b73df05f9bc2daac0bb324a3080bbd2b400,"Change MemoryAppender member variables to protected The MemoryAppender is designed to hold the log events in an internal array. The appender can be subclassed, however the internal list is not available to subclasses.
This appender will be more useful if the members are protected.",Fix for LOG4NET-70. Changed reference from coredll.dll to CoreDll.dll, MODIFY SystemInfo.cs
0,LOG4NET-170,a056a11fb478a35d6cf3d4f26dc391c34f2dabc2,Documentation improvement re: fixing and active properties Documentation improvement - see http://www.nabble.com/ASP.NET%2C-AdoNetAppender-and-deferred-property-execution-tt18865968.html,"Fix for LOG4NET-126. Changed link to downloads page from ""downloads.html"" to ""download.html"".", MODIFY example-apps.xml
1,LOG4NET-301,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Unit tests fail on a clean checkout on .NET 2.0 using NAnt Blocker as it makes validating patches hard if the unit tests fail.

Log of running nant inside the tests directory will be attached.",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-35,4e6114e136c6af46ae0fb9d485c91f61f18b41c9,"Exception rendering ThreadContextStack if null value pushed into stack If a null value is pushed into a ThreadContext stack then an internal log4net error is generated when the ThreadContextStack is rendered.
The following error and stack trace are output into the log:

<log4net.Error>Exception rendering object type [log4net.Util.ThreadContextStack]<stackTrace>System.NullReferenceException: Object reference not set to an instance of an object.
   at log4net.Util.StackFrame.get_FullMessage()
   at log4net.Util.ThreadContextStack.GetFullMessage()
   at log4net.Util.ThreadContextStack.ToString()
   at log4net.ObjectRenderer.DefaultRenderer.RenderObject(RendererMap rendererMap, Object obj, TextWriter writer)
   at log4net.ObjectRenderer.RendererMap.FindAndRender(Object obj, TextWriter writer)</stackTrace></log4net.Error>",Fix for LOG4NET-37. Allow the RepositorySelector type to be sepecified using the AppSettings config, MODIFY LoggerManager.csLoggerManager LoggerManager
0,LOG4NET-360,78c420aea76cb9c7cded0d7205fc28fe67c840db,"EventLogAppender can corrupt the event log on Windows Vista and higher if the string is longer than 31839 bytes Issue: EventLogAppender can corrupt the event log on Windows Vista and higher if the string is longer than 31839 bytes.

The log4net EventLogAppender allows you to write up to 32000 bytes and there is a defect in the .NET Framework that will let you write that much data in Windows Vista and higher (which has a limit of 31839).

See the attachment that shows ""$exception	{""The event log file is corrupted""}	System.Exception {System.ComponentModel.Win32Exception}"" along with the stack after a call to EventLog.WriteEntry() under Windows 7 that used a message string that was 31,876 bytes long.

The issue has been reported to Microsoft as well: https://connect.microsoft.com/VisualStudio/feedback/details/770126/eventlog-writeentry-can-corrupt-the-event-log-because-of-invalid-argument-check-in-net-framework#tabs

The code below is my workaround for determining a max message length that will not corrupt the event log. I've also written our own custom EventLogAppender that is able to work around this issue.

private const int MaxEventLogMsgLength_PreVista = 32766;
private const int MaxEventLogMsgLength_VistaOrHigher = 31839;

/// <summary>
/// Gets the maximum allowable size of event log message for the current operating system.
/// </summary>
/// <returns></returns>
public static int GetMaxEventLogMessageSize()
{
	// http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx            
	// The 32766 documented max size is two bytes shy of 32K (I'm assuming 32766 may leave space for a two byte null
	// terminator of #0#0). The 32766 max length is what the .NET 4.0 source code checks for, but this is WRONG!...
	// strings with a length > 31839 on Windows Vista or higher can CORRUPT the event log! See:
	// System.Diagnostics.EventLogInternal.InternalWriteEvent() for the use of the 32766 max size.
	var maxEventMsgSize = MaxEventLogMsgLength_PreVista;

	// Windows Vista and higher
	if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6)
	{
		// See ReportEvent API: http://msdn.microsoft.com/en-us/library/aa363679(VS.85).aspx
		// ReportEvent's lpStrings parameter: ""A pointer to a buffer containing an array of null-terminated strings that are
		// merged into the message before Event Viewer displays the string to the user. This parameter must be a valid pointer
		// (or NULL), even if wNumStrings is zero. Each string is limited to 31,839 characters.""

		// Going beyond the size of 31839 will (at some point) corrupt the event log on Windows Vista or higher! It may succeed
		// for a while...but you will eventually run into the error: ""System.ComponentModel.Win32Exception : A device attached to
		// the system is not functioning"", and the event log will then be corrupt (I was able to corrupt an event log using a 
		// length of 31877 on Windows 7).

		// The max size for Windows Vista or higher is documented here: http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx.
		// Going over this size may succeed a few times but the buffer will overrun and eventually corrupt the log (based on testing).
		// Log4net's own EventLogAppender will write up to 32000 bytes (0x7D00), which can corrupt the event log.

		// The maxEventMsgSize size is based on the max buffer size of the lpStrings parameter of the ReportEvent API.
		// The documented max size for EventLog.WriteEntry for Windows Vista and higher is 31839, but I'm leaving room for a
		// terminator of #0#0, as we cannot see the source of ReportEvent (though we could use an API monitor to examine the
		// buffer, given enough time).
		// TODO: Use an API monitor to examine how the ReportEvent API allocates a buffer for the event log message strings.
		const int terminatorLength = 2; // Safety for now.
		maxEventMsgSize = MaxEventLogMsgLength_VistaOrHigher - terminatorLength;
	}
	return maxEventMsgSize;
}		","LOG4NET-378 fixed a problem where rolled log files get overwritten when the application is restarted

The cause is that InitializeFromOneFile() does not succesfully detect the filenames.", MODIFY RollingFileAppender.csRollingFileAppender InitializeFromOneFile
0,LOG4NET-404,52999cd7cca7a2ff0231d54d2fae40e9674e04ec,assemblies for .NET 3.5 are missing ILogExtensions  ,merge LOG4NET-132 fix from 1.2.x branch, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateCaseInsensitiveWrapper ADD XmlHierarchyConfiguratorTest.csXmlHierarchyConfiguratorTest SetTestPropWithPath XmlHierarchyConfiguratorTest TestConfigurator PublicSetParameter XmlHierarchyConfiguratorTest EnvironmentOnWindowsIsCaseInsensitive XmlHierarchyConfiguratorTest EnvironmentOnUnixIsCaseSensitive XmlHierarchyConfiguratorTest TestConfigurator TestConfigurator
0,LOG4NET-310,8400fecdd81394a86d4192889446d40678dcfb90,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
1,LOG4NET-536,d65b1a76bc7aeb92b2c836f554148686d1460bad,"Can't build for NETCF-2.0 
E:\lib\log4net-1.2.15>rem

E:\lib\log4net-1.2.15>rem

E:\lib\log4net-1.2.15>rem Licensed to the Apache Software Foundation (ASF) under one 

E:\lib\log4net-1.2.15>rem or more contributor license agreements.  See the NOTICE file 

E:\lib\log4net-1.2.15>rem distributed with this work for additional information 

E:\lib\log4net-1.2.15>rem regarding copyright ownership.  The ASF licenses this file 

E:\lib\log4net-1.2.15>rem to you under the Apache License, Version 2.0 (the 

E:\lib\log4net-1.2.15>rem ""License""); you may not use this file except in compliance 

E:\lib\log4net-1.2.15>rem with the License.  You may obtain a copy of the License at 

E:\lib\log4net-1.2.15>rem

E:\lib\log4net-1.2.15>rem   http://www.apache.org/licenses/LICENSE-2.0 

E:\lib\log4net-1.2.15>rem

E:\lib\log4net-1.2.15>rem Unless required by applicable law or agreed to in writing, 

E:\lib\log4net-1.2.15>rem software distributed under the License is distributed on an 

E:\lib\log4net-1.2.15>rem ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 

E:\lib\log4net-1.2.15>rem KIND, either express or implied.  See the License for the 

E:\lib\log4net-1.2.15>rem specific language governing permissions and limitations 

E:\lib\log4net-1.2.15>rem under the License. 

E:\lib\log4net-1.2.15>rem

E:\lib\log4net-1.2.15>rem
LOG4NET_DIR is E:\lib\log4net-1.2.15
NANTEXE_PATH is E:\tools\nant-0.92\bin\nant.exe
BUILD_FILE is E:\lib\log4net-1.2.15\log4net.build
NAnt 0.92 (Build 0.92.4543.0; release; 2012-06-09)
Copyright (C) 2001-2012 Gerry Shaw
http://nant.sourceforge.net

Buildfile: file:///E:/lib/log4net-1.2.15/log4net.build
Target framework: Microsoft .NET Framework 4.0
Target(s) specified: compile-all 


check-current-build-config:


set-build-configuration:


set-debug-build-configuration:


check-current-build-config:


set-build-configuration-flags:


check-current-build-config:


set-framework-configuration:


check-bin-dir:


check-doc-dir:


check-sdkdoc-dir:


check-sdkdoc-debug:


check-current-build-config:


check-build-debug:


check-build-defines:


set-net-4.0-runtime-configuration:


generate-assembly-description:

   [delete] Deleting file E:\lib\log4net-1.2.15\src\GeneratedAssemblyInfo.cs.
  [asminfo] Generated file 'E:\lib\log4net-1.2.15\src\GeneratedAssemblyInfo.cs'.

compile-all:

     [echo] Compiling all build configurations for all runtime configurations.

set-debug-build-configuration:


check-current-build-config:


set-build-configuration-flags:


compile-build:

     [echo] Compiling all framework versions for the debug build configuration.

check-bin-dir:


check-doc-dir:


check-sdkdoc-dir:


check-sdkdoc-debug:


check-current-build-config:


check-build-debug:


check-build-defines:


set-netcf-2.0-runtime-configuration:

 [property] Target framework changed to ""Microsoft .NET Compact Framework 2.0"".

check-log4net-basedir:


check-current-bin-dir:


clean-current-bin-dir:

     [echo] Cleaning the bin/netcf/2.0/debug binaries directory.
   [delete] Deleting directory 'E:\lib\log4net-1.2.15\bin\netcf\2.0\debug'.
    [mkdir] Creating directory 'E:\lib\log4net-1.2.15\bin\netcf\2.0\debug'.

compile-netcf-2.0:

      [csc] Compiling 225 files to 'E:\lib\log4net-1.2.15\bin\netcf\2.0\debug\log4net.dll'.
      [csc] e:\lib\log4net-1.2.15\src\Util\LogicalThreadContextStacks.cs(36,20): error CS0246: Can't find class or namespace“LogicalThreadContextProperties”(Whether a using directive or an assembly reference is missing?)
      [csc] e:\lib\log4net-1.2.15\src\Util\LogicalThreadContextStacks.cs(48,39): error CS0246: Can't find class or namespace“LogicalThreadContextProperties”(Whether a using directive or an assembly reference is missing?)

BUILD FAILED

E:\lib\log4net-1.2.15\log4net.build(454,6):
External Program Failed: C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe (return code was 1)

Total time: 1.2 seconds.

",LOG4NET-536 there doesn't seem to be a system wide Mutex in NETCF, MODIFY RollingFileAppender.csRollingFileAppender ~RollingFileAppender RollingFileAppender ActivateOptions RollingFileAppender AdjustFileBeforeAppend
0,LOG4NET-132,37368e55cfba01e14eba6bf61ea1a6e5de512591,"Environment variables are mistakenly case sensitive on windows On windows, environment variables are meant to be case insensitive.  Because of this, in some contexts, a special IDictionary class that lowercases all the keys is used to manipulate environment variables, specifically ProcessStartInfo.EnvironmentVariables.

The upshot of this, for me, is that when running under the profiler I have, all the environment variables get lowercased, and my logging configuration is broken, because TEMP is now temp, and log4net is treating the environment variables in a case sensitive manner, from using Environment.GetEnvironmentVariables(), which creates a normal case sensitive Hashtable object.

It seems that, on windows, the result of Environment.GetEnvironmentVariables() should be copied into a StringDictionary to get proper case insensitive behavior.",Added test for LOG4NET-53 (allow repository properties to be set in xml config file). Added test case for LOG4NET-31 (allow additional properties to be set on converters)., ADD Hierarchy.csHierarchy SetRepositoryPropertiesInConfigFile ADD PatternConverterTest.csPatternStringAppender PatternStringAppender PropertyKeyCountPatternConverter PropertyKeyCountPatternConverter PropertyKeyCountPatternConverter Convert PatternConverterTest PatternConverterProperties PropertyKeyCountPatternLayoutConverter Convert PropertyKeyCountPatternLayoutConverter PropertyKeyCountPatternLayoutConverter PatternConverterTest PatternLayoutConverterProperties MODIFY log4net.Tests.vs2005.csproj
0,LOG4NET-215,8400fecdd81394a86d4192889446d40678dcfb90,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
1,LOG4NET-417,e1868f755aaee4be2d83b72e291e81de922ca456,"HTTP URL BROKEN AT faq.html, In http://logging.apache.org/log4net/release/faq.html,

See the features overview document for more information on the features of log4net.

The work ""features"" link to http://logging.apache.org/log4net/features.html which do not exists.",merge fix for LOG4NET-417 from 1.2.x branch, MODIFY example-apps.xml MODIFY faq.xml MODIFY configuration.xml MODIFY release-notes.xml
0,LOG4NET-530,66d3ce184dd280f94d0af5006b36c9f9d4d352d0,Use UTC internally to avoid ambiguous timestamps https://github.com/apache/log4net/pull/36,LOG4NET-529 don't assign m_compositeProperties before it is complete, MODIFY LoggingEvent.csLoggingEvent CreateCompositeProperties
0,LOG4NET-215,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-212,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
1,LOG4NET-64,b3c6cd405f44bbcb9a8728bdcca17d05a7dd0b9d,"[PATCH] to RollingFileAppender.cs to add the ability to preserve the log file name extension when rolling the log file. Normally, when the log file is rolled the file name extension is not preserved.

For example, file.log is rolled to file.log.1 or file.log.yyyy-MM-dd.

However, this may not be desired in all cases and it may be necessary to preserve the log file name extension when the log file is rolled. Most notably, this feature is useful for maintaining file associations under Windows so that all log files can be associated with a particaular text viewer.

For example, file.log is rolled to file.1.log or file.yyyy-MM-dd.log.

This patch adds an additional boolean property PreserveLogFileNameExtension to the RollingFileAppender class which is used to toggle this behavior.",Fix for LOG4NET-64. Allow file extension to be preserved when rolling file., MODIFY RollingFileAppender.csRollingFileAppender RollOverTime RollingFileAppender GetBackUpIndex RollingFileAppender RollOverRenameFiles RollingFileAppender GetNextOutputFileName RollingFileAppender InitializeFromOneFile RollingFileAppender CombinePath RollingFileAppender GetWildcardPatternForFile RollingFileAppender GetExistingFiles RollingFileAppender ActivateOptions
0,LOG4NET-170,3e13e73fbab8e609afded93bc2439320733d5e97,Documentation improvement re: fixing and active properties Documentation improvement - see http://www.nabble.com/ASP.NET%2C-AdoNetAppender-and-deferred-property-execution-tt18865968.html,Fix for LOG4NET-155. Added TimeEvaluator that will trigger a buffer flush if a certain amount of time has elapsed since the last event., ADD TimeEvaluator.csTimeEvaluator TimeEvaluator TimeEvaluator IsTriggeringEvent TimeEvaluator TimeEvaluator MODIFY log4net.vs2005.csproj
0,LOG4NET-129,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-117,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
1,LOG4NET-379,cb150d88f8da4a06f829d6c47d2222f48a84baad,"NullReferenceException in FileAppender when file is not filled. When I create a FileAppender without a filename and I call ActivateOptions(), a NullReferenceException is thrown. This is because the filename is first trimmed before the check whether the filename is null or not.",LOG4NET-379 fixed an avoidable NullReferenceException raised in the Fileappender ActivateOptions(), MODIFY FileAppender.csFileAppender ActivateOptions
0,LOG4NET-167,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-232,3decc7da565e5e28f5fc30377032f5952f362f76,"Use ReaderWriterLockSlim instead of ReaderWriterLock. ReaderWriterLock should be replaced with ReaderWriterLockSlim according to Microsoft for performance and simplification reasons.

MSDN: http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock.aspx

The .NET Framework has two reader-writer locks, ReaderWriterLockSlim and ReaderWriterLock. ReaderWriterLockSlim is recommended for all new development. ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlim avoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than ReaderWriterLock. ",LOG4NET-228 improved exception handling for getting the computers hostname, MODIFY SystemInfo.csSystemInfo if
0,LOG4NET-394,85435917f6e2fc748d64aa4bee6424e99c1bbba7,Lambda-based ILog-Extensions should catch errors The new lambda syntax introduced with LOG4NET-290 allow wrapping log related code in a lambda to be executed only if necessary. In the log4net spirit of being a reliable logging system (see http://logging.apache.org/log4net/release/faq.html) also the log related code contained in the lambda should not block application by throwing exception and so the lambda execution shluld be wrapped in a try...catch,LOG4NET-393 StackFrameItem should respect the non existant DeclaringType in dynamic methods, MODIFY StackFrameItem.csStackFrameItem StackFrameItem
0,LOG4NET-43,6586b155fe474144ba918de90e9769780234a1e5,"Specifying an empty string as a property in the config file results in an error Specifying an empty string as a property (either as <property/> or <property></property>) results in the following:

log4net:ERROR XmlHierarchyConfigurator: Failed to construct object of type [System.String] Exception: System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeType.CreateInstanceImpl(Boolean publicOnly)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint) in S:\local\log4net-cvs\logging-log4net\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs:line 924",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-67,fc9e55d9044e80761bfaa96044fbe57740ed4882,"CVE-2006-0743 Security vulnerability in LocalSyslogAppender Reported by Sebastian Krahmer to security@apache.org
Logged as CVE-2006-0743

The LocalSyslogAppender contains a vulnerability which could lead to memory corruption within the runtime process. This is likely to cause the application using the LocalSyslogAppender to terminate unexpectedly. In addition to a deliberate denial of service attack this fault may be caused by logging legitimate data therefore the LocalSyslogAppender must not be used even within secured environments.

Current users of the LocalSyslogAppender (from the log4net 1.2.9 release) should update their logging configuration to remove references to the LocalSyslogAppender. Alternatively users can build a new version of the log4net assembly from the head of the source code repository where this fault has been fixed.","Fix for LOG4NET-60.
Fixed issue with calculation of the NextCheckDate for TopOfMonth RollPoints.
Added more descriptive docs on the NextCheckDate method.", MODIFY RollingFileAppender.csRollingFileAppender NextCheckDate
1,LOG4NET-313,a311c023964de3c7acb07419e764f65496e00b94,"Document %stacktrace and %stacktracedetail There currently only is class-level documentation on %stacktrace and no documentation on %stacktracedetail outside of the StackTraceDetailPatternConverter class at all.  Need to update PatternLayout as well as the site.
",Document stacktrace and stacktracedetail patterns.  LOG4NET-313, MODIFY PatternLayout.cs
0,LOG4NET-46,21c34f7153387912a991692eaf1f32fe82ec9492,"Support appenders that can output multiple events efficiently Some appenders can efficiently output batches of events. Currently there is no way to pass a batch of events to an appender.

Add an interface IBulkAppender that exposes a DoAppend method that takes an array of events. This interface can be supported by appenders that can process in bulk.",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-71,36b8c818193e23af8a29c104a31bf35554e982c1,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.","Fix for LOG4NET-72. Added overloaded Format methods for 1, 2, and 3 fixed arguments. This is a performance enhancement.", MODIFY LogImpl.csLogImpl ErrorFormat LogImpl WarnFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl WarnFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl WarnFormat LogImpl DebugFormat LogImpl InfoFormat MODIFY ILog.cs MODIFY StringFormatTest.csStringFormatTest TestThreadPropertiesPattern StringFormatTest TestLogFormatApi_Error StringFormatTest TestLogFormatApi_NoFatal StringFormatTest TestLogFormatApi_NoWarn StringFormatTest TestFormatString StringFormatTest TestLogFormatApi_NoInfo StringFormatTest TestLogFormatApi_NoDebug StringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info StringFormatTest TestLogFormatApi_NoError
0,LOG4NET-311,e1c9c3b7bb26b3564062859a86b38b793048548a,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-335,28a63b970d0a7d43f0adeaf7807fd943e35472d6,"Lost the ability to monitor changes to logger config files when you call ConfigureAndWatch multiple times with different Config File Names - worked fine on 1.2.10.0 We had a class that wraps log4net that is in a shared assembly, multiple components in our application create instances to the Log 4 Net Wrapper, each component has its own log config file.

When the Log4Net wrapper class is constructed it uses log4net.Logmanager to ConfigureAndWatch the log config file passed in to it by the calling component. We recently upgraded from log4net 1.2.10.0 to 1.2.11.0 and log4net no longer detects when the log configuration file is modified. I looked at the source code fro 1.2.11.0 and it appears that it only allows one ConfigureAndWatchHandler object and if you attempt to ConfigureAndWatch more than one logger config file, the previous one is Disposed, thereby removing the ability to detect config file changes",LOG4NET-316 added a configuration example that explains the usage of DynamicPatternLayout, MODIFY config-examples.xml
1,LOG4NET-153,28fd893da50333c16d2b62100ea26a761f487ce0,"Make it easier to configure multiple appenders in code using BasicConfigurator Users wanting to configure log4net in code using more than just a single appender must cast the repository into a Hierarchy then manually add elements:

 Repository.Hierarchy.Hierarchy hierarchy = 
     (Repository.Hierarchy.Hierarchy)LogManager.GetRepository();
 hierarchy.Root.AddAppender(alpha);
 hierarchy.Root.AddAppender(beta);
 hierarchy.Configured = true;

The BasicConfigurator should make it easier to accomplish this:

 BasicConfigurator.Configure(alpha, beta);

This can be accomplished by adding an overload to Configure that accepts an params IAppender[]:

 IBasicRepositoryConfigurator.Configure(params IAppender[] appenders)",Fix for LOG4NET-153. Add overload to IBasicRepositoryConfigurator.Configure that accepts an array of IAppender objects instead of just a single IAppender., MODIFY BasicConfigurator.csBasicConfigurator Configure BasicConfigurator InternalConfigure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator InternalConfigure MODIFY Hierarchy.csHierarchy BasicRepositoryConfigure Hierarchy Configure Hierarchy Configure Hierarchy BasicRepositoryConfigure Hierarchy Configure MODIFY IBasicRepositoryConfigurator.cs MODIFY Hierarchy.csHierarchy AddingMultipleAppenders Hierarchy AddingMultipleAppenders2
0,LOG4NET-490,449cb8ecfae26d6053a51bdcd5beb4b83d48ab22,"InterProcessLock Tests fail The tests in question are:

* TestInterProcessLockRoll
* TestInterProcessLockUnlocks

This is actually quite bad and proves that my last attempt to introduce something that just works failed miserably. At first glance the trouble comes from the interaction with the base classes. One thing I noted is that the base class tries to write a footer when the file gets closed. But in the case of the rolling file appender the file is no longer there when this happens. Another example is that due to the error logs I'm writing the test finally noticed that the locks are acquired and released in bad order and thus result in bad behaviour.

But these are just two examples from a bunch of issues that still have to be worked out.","LOG4NET-488: fix tests for .net 2.0

This is a modified version of the patch supplied by NN.", MODIFY SmtpPickupDirAppenderTest.csSmtpPickupDirAppenderTest TestDefaultFileNameIsAGuid SmtpPickupDirAppenderTest TestConfigurableFileExtension
0,LOG4NET-17,21c34f7153387912a991692eaf1f32fe82ec9492,"Line-wrapping Appender Layouts I think a line-wrapping layout, or a line-wrapping version
or extension of one or more of the current layouts (or a
way to decorate or extend one of the current layouts....)
would be very useful. Such a layout could take a
threshold that is the number of chars that is the
maximum length for a line, as well as an indentation
amount for leading space characters for the indented
lines. I'm sure one could easily imagine more
complicated things it could do....

Given time, I might be interested in contributing to such
an addition.

regards,

carl",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-158,a056a11fb478a35d6cf3d4f26dc391c34f2dabc2,"XMLConfigurator.ConfigureAndWatch() leaks resources if called multiple times If XMLConfigurator.ConfigureAndWatch() is called multiple times within an AppDomain, each time it is called it leaks a Win32 file  handle (possibly from a FileSystemWatcher object not being disposed?) to the folder containing the previous configuration file it was watching.

Desired behavior would be to release the handle to the folder containing the previous configuration file.","Fix for LOG4NET-126. Changed link to downloads page from ""downloads.html"" to ""download.html"".", MODIFY example-apps.xml
0,LOG4NET-214,9df9848f90c58c41f658b66c68178112eccc7c30,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-437,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"LogicalThreadContext data does not flow properly using Async and Await LogicalThreadContext doesn't work properly when using Async and Await. The current NDC call stack gets corrupted because the logical data context is not immutable. (See: http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html for the gory details). I've attached a Program.cs that demonstrates the issue. You will see with an unpatched log4net the thread context is corrupted compared to the proper implementation in MyStack and the console logger. An entry like:

LOG4NET Main 1 A 2 A: </MoreWork>
LOG4NET Main 1 A 2 A: </MoreWork>

is invalid and should not be possible in a properly working thread context.

I've attached a VERY naive patch that corrects the issue.",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-241,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
1,LOG4NET-71,774065f2c291dbfc0387d282ccc1be49d36173bf,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.","LOG4NET-71 move site stuff, untested so far", RENAME pom.xml RENAME roadmap.apt RENAME maven-base.css RENAME site.css RENAME download_log4net.cgi RENAME logo.jpg RENAME maven-feather.png RENAME ls-logo.jpg RENAME od.gif RENAME site.vm RENAME site.xml RENAME download_log4net.xml RENAME history.xml RENAME index.xml RENAME building.xml RENAME config-examples.xml RENAME example-apps.xml RENAME faq.xml RENAME features.xml RENAME framework-support.xml RENAME chainsaw.xml RENAME index.xml RENAME configuration.xml RENAME contexts.xml RENAME internals.xml RENAME introduction.xml RENAME plugins.xml RENAME repositories.xml RENAME release-notes.xml DELETE bin.xml DELETE changes.xml
0,LOG4NET-94,aaf4127a35bd1f74f897871f834c3c2bab1f52bb,"Incorrect config file for ..\examples\net\1.0\Tutorials\ConsoleApp The app.config file has some errors in it...


Line 39

is...
<sppendToFile value=""true"" />

should be...
<appendToFile value=""true"" />


Line 43

is...
<geader value=""[Header]&#13;&#10;"" />

should be...
<header value=""[Header]&#13;&#10;"" />



Line 87

is...
<commandText"" value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />

should be...
<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />



Line 94

is...
</param>

should be...
</layout>


-- Jeff Hegedus:  Corrected xml below ---

<?xml version=""1.0"" encoding=""utf-8"" ?>
<!-- 
		.NET application configuration file     
		This file must have the exact same name as your application with .config appended to it. 
		
		For example if your application is ConsoleApp.exe then the config file must be ConsoleApp.exe.config. 
		It must also be in the same directory as the application. 
	-->
<configuration>
	<!-- Register a section handler for the log4net section -->
	<configSections>
		<section name=""log4net"" type=""System.Configuration.IgnoreSectionHandler"" />
	</configSections>
	<appSettings>
		<!-- To enable internal log4net logging specify the following appSettings key -->
		<!-- <add key=""log4net.Internal.Debug"" value=""true""/> -->
	</appSettings>
	<!-- This section contains the log4net configuration settings -->
	<log4net>
		<!-- Define some output appenders -->
		<appender name=""RollingLogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file value=""rolling-log.txt"" />
			<appendToFile value=""true"" />
			<maxSizeRollBackups value=""10"" />
			<maximumFileSize value=""100"" />
			<rollingStyle value=""Size"" />
			<staticLogFileName value=""true"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<appender name=""LogFileAppender"" type=""log4net.Appender.FileAppender"">
			<file value=""log-file.txt"" />
			<!-- Example using environment variables in params -->
			<!-- <file value=""${TMP}\log-file.txt"" /> -->
			<appendToFile value=""true"" />
			<!-- An alternate output encoding can be specified -->
			<!-- <encoding value=""unicodeFFFE"" /> -->
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
			<!-- Alternate layout using XML			
			<layout type=""log4net.Layout.XMLLayout"" /> -->
		</appender>
		<appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"">
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
		</appender>
		<appender name=""NetSendAppender"" type=""log4net.Appender.NetSendAppender"">
			<threshold value=""ERROR"" />
			<server value=""IN27WS024728"" />
			<recipient value=""jhegedus2"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<!-- Example of how to configure the AdoNetAppender		
		<appender name=""AdoNetAppender"" type=""log4net.Appender.AdoNetAppender"" >			
			<connectionString value=""Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"" />
			<layout type=""log4net.Layout.PatternLayout"">				
				<conversionPattern value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES ('%date','%thread','%level','%logger','%message')"" />
			</layout>
		</appender> 
		-->
		<!-- 
		<appender name=""A"" type=""log4net.Appender.ForwardingAppender"" >
			<threshold value=""WARN""/>			
			<appender-ref ref=""ConsoleAppender"" />		
		</appender>
		<appender name=""B"" type=""log4net.Appender.ForwardingAppender"" >
			<filter type=""log4net.Filter.LevelRangeFilter"">
				<levelMin value=""DEBUG""/>
				<levelMax value=""INFO""/>
			</filter>
			<appender-ref ref=""ConsoleAppender"" />
		</appender> 
		-->
		<!-- Example of how to configure the AdoNetAppender to connect to MS Access -->
		<appender name=""ADONetAppender_Access"" type=""log4net.Appender.AdoNetAppender"">
			<connectionString value=""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""1024"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Example of how to configure the AdoNetAppender to connect to MS SQL Server -->
		<appender name=""ADONetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
			<bufferSize value=""1"" />
			<connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
			<connectionString value=""data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""DateTime"" />
				<!-- 
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
				</layout> 
				-->
				<layout type=""log4net.Layout.RawTimeStampLayout"" />
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""4000"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value=""WARN"" />
			<appender-ref ref=""LogFileAppender"" />
			<appender-ref ref=""ConsoleAppender"" />
			<!-- <appender-ref ref=""ADONetAppender_SqlServer"" /> -->
			<appender-ref ref=""NetSendAppender"" />
			<!-- <appender-ref ref=""A"" /> -->
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name=""ConsoleApp.LoggingExample"">
			<!-- <appender-ref ref=""B"" /> -->
			<level value=""ALL"" />
			<appender-ref ref=""RollingLogFileAppender"" />
		</logger>
	</log4net>
</configuration>","Changed Cache, Context, and Request converters to output all of their key/value pairs if the Option property is not set. Added overload to PatternConverter.WriteDictionary to accept an IDictionaryEnumerator to allow the AspNetCachePatternConverter to send its contents (Cache.GetEnumerator()) to WriteDictionary to be auto-formatted. LOG4NET-87.", MODIFY AspNetCachePatternConverter.csAspNetCachePatternConverter Convert MODIFY AspNetContextPatternConverter.csAspNetContextPatternConverter Convert MODIFY AspNetRequestPatternConverter.csAspNetRequestPatternConverter Convert MODIFY PatternConverter.csPatternConverter WriteDictionary PatternConverter WriteDictionary
0,LOG4NET-53,652340adbe4977e9b70f635f76465e93d9e501da,"Allow repository properties to be set in the config file The LoggerRepository supports Properties. These are avaliable to the extensions, appenders, and plugins attached to the repository. While these properties can be set programatically it is not possible to set them through the config file.

We should allow properties to be set in the config file using the following schema:

<property>
  <key value=""PropertyName"" />
  <value value=""PropertyValue"" />
</property>","LOG4NET-52 Allow XML configurator to set properties of type Object.
Fixed check for Level type that was too wide; it matched Object when it should not have. Level is a sealed type so an equals check on the type is all that is required.
Fixed conversion of String to Object. There is an implicit conversion because it is a supertype, but the code in OptionConverter did not account for this.", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator ConvertStringTo MODIFY OptionConverter.csOptionConverter ConvertStringTo
0,LOG4NET-73,0c1e5b73df05f9bc2daac0bb324a3080bbd2b400,"ADONetAppender.ActivateOptions() leaks database connection when called multiple times ADONetAppender.ActivateOptions() calls InitializeDatabaseConnection. This method does not check if the m_dbConnection is already initialised. If it is initialise then it will beleaked.

Update InitializeDatabaseConnection to check and close the connection if not null.",Fix for LOG4NET-70. Changed reference from coredll.dll to CoreDll.dll, MODIFY SystemInfo.cs
1,LOG4NET-17,6586b155fe474144ba918de90e9769780234a1e5,"Line-wrapping Appender Layouts I think a line-wrapping layout, or a line-wrapping version
or extension of one or more of the current layouts (or a
way to decorate or extend one of the current layouts....)
would be very useful. Such a layout could take a
threshold that is the number of chars that is the
maximum length for a line, as well as an indentation
amount for leading space characters for the indented
lines. I'm sure one could easily imagine more
complicated things it could do....

Given time, I might be interested in contributing to such
an addition.

regards,

carl",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-50,fa6a830559dff51de434626cc537b7b6086a522f,"Process.StartTime hangs on some systems It has been reported that on some systems the call to System.Diagnostics.Process.GetCurrentProcess().StartTime hangs.
This is used to obtain the ProcessStartTime used by the %r pattern.

The System.Diagnostics.Process uses performance counters which may be disabled or corrupt. While this should throw an exception it appears that in some cases the call will hang.",LOG4NET-53 Allow repository properties to be set in the config file, MODIFY Hierarchy.csHierarchy PropertyEntry ToString Hierarchy AddProperty
0,LOG4NET-486,d79057ae35cb4934c976172fa758be40d08a9815,"Rolling File Appender with 'maxSizeRollBackups' and 'datePattern' does not detect existing logs initially Rolling file appender with 'maxSizeRollBackups' set to a positive number tries to initialise by looking at existing log files to continue the rolling sequence and set 'm_curSizeRollBackups' to its correct value but the base filename format is wrong.

In method GetWildcardPatternForFile with m_preserveLogFileNameExtension true it should construct a wildcard pattern but the 'baseFileName' is not enough to fully identify the log file when 'datePattern' is also specified.

For example: -

With log files such as: -

MyLogFile_2015-10-27.1.log
MyLogFile_2015-10-27.2.log

the pattern created is 'MyLogFile.*.log'

The date pattern is missing and as a result no log files are found and historical log files get overwritten rather than rolled over.

A quick fix I'm using is to remove the '.' from the literal "".*"" in the wildcard. This allows the OS to identify the log files. Later code makes a fuller check of the exact log file format and therefore this may be safe but I would think it needs more validation and testing to be sure this works under all circumstances.",LOG4NET-473: Added file extension attribute in SmtpPickupDirAppender (closes #19), MODIFY SmtpPickupDirAppender.csSmtpPickupDirAppender SmtpPickupDirAppender SmtpPickupDirAppender SendBuffer SmtpPickupDirAppender if SmtpPickupDirAppender if MODIFY SmtpPickupDirAppenderTest.csSmtpPickupDirAppenderTest DeleteTestFiles SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest CreateSmtpPickupDirAppender SmtpPickupDirAppenderTest SetUp SmtpPickupDirAppenderTest TestOutputContainsSentDate SmtpPickupDirAppenderTest CreateLogger SmtpPickupDirAppenderTest DestroyLogger SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest TearDown SmtpPickupDirAppenderTest InitializePickupDir SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest ResetLogger SmtpPickupDirAppenderTest TestConfigurableFileExtension SmtpPickupDirAppenderTest TestDefaultFileNameIsAGuid
0,LOG4NET-3,6de62c784acb8c0499ea3b7b84b34bff956a4e6a,"Support per event patterns in FileAppender File name If I could specify file name patter for
(Rolling)FileAppender that would be filled by the
appender prior to openning the file, I could let many
individuals run the same applikation (on terminal
server) and still log to file (not RemotingAppender or
ADONetAppernder)

I guess, pattern like &quot;rootLog%U.log&quot; would do, if
appender replaced %U with
Thread.CurrentThread.CurrentPrincipal.Identity.Name ...
Or %T with thread id and so on...

Anonymous",Fix for LOG4NET-11. Added a Flush(true) method that will flush the lossy buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Flush MODIFY CyclicBuffer.csCyclicBuffer PopAll CyclicBuffer Clear
0,LOG4NET-3,f7000163b5e88d518727fa049bef8604d25288b5,"Support per event patterns in FileAppender File name If I could specify file name patter for
(Rolling)FileAppender that would be filled by the
appender prior to openning the file, I could let many
individuals run the same applikation (on terminal
server) and still log to file (not RemotingAppender or
ADONetAppernder)

I guess, pattern like &quot;rootLog%U.log&quot; would do, if
appender replaced %U with
Thread.CurrentThread.CurrentPrincipal.Identity.Name ...
Or %T with thread id and so on...

Anonymous",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
0,LOG4NET-376,dbe0f89a38f6fca026d8d78ab59f23009cde8443,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




",LOG4NET-443 prevent orphaned locks with ReaderWriterLockSlim in the face of aborted threads, MODIFY ReaderWriterLock.csReaderWriterLock AcquireReaderLock ReaderWriterLock AcquireWriterLock
0,LOG4NET-296,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Patch for .net 4, client profile and a fix for the name resolution bug  ",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-67,635cadac4e548c0a12e69544e8e932e69e39a2a1,"CVE-2006-0743 Security vulnerability in LocalSyslogAppender Reported by Sebastian Krahmer to security@apache.org
Logged as CVE-2006-0743

The LocalSyslogAppender contains a vulnerability which could lead to memory corruption within the runtime process. This is likely to cause the application using the LocalSyslogAppender to terminate unexpectedly. In addition to a deliberate denial of service attack this fault may be caused by logging legitimate data therefore the LocalSyslogAppender must not be used even within secured environments.

Current users of the LocalSyslogAppender (from the log4net 1.2.9 release) should update their logging configuration to remove references to the LocalSyslogAppender. Alternatively users can build a new version of the log4net assembly from the head of the source code repository where this fault has been fixed.",Fix for LOG4NET-56. Added support for rendering all IEnumerable types rather than just collections. Added spacial case for IDictionary to ensure that the enumerator returned will enumerate DisctionaryEntry objects even with .NET 2.0 generic collections., MODIFY DefaultRenderer.csDefaultRenderer RenderEnumerator DefaultRenderer RenderCollection DefaultRenderer RenderObject
0,LOG4NET-484,03c1ce16b0e48285eada61a9afa40bf5dc036643,"System.ObjectDisposedException with FileAppender+InterProcessLock Configure lockingModel for InterProcessLock with RollingFileAppender.

{code:xml|title=app.config}
<?xml version=""1.0"" encoding=""utf-8""?>
<configuration>
	<configSections>
		<section name=""log4net"" type=""log4net.Config.Log4NetConfigurationSectionHandler, log4net"" />
	</configSections>
	<log4net>
		<appender name=""RollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file type=""log4net.Util.PatternString"" value=""test.log"" />
			<encoding value=""utf-8"" />
			<appendToFile value=""true""/>
			<rollingStyle value=""Size""/>
			<maxSizeRollBackups value=""10""/>
			<maximumFileSize value=""1""/>
			<staticLogFileName value=""true""/>
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%d [%t] %-5p %c{2} - %m%n""/>
			</layout>
			<lockingModel type=""log4net.Appender.FileAppender+InterProcessLock"" />
		</appender>
		<root>
			<level value=""INFO""/>
			<appender-ref ref=""RollingFileAppender""/>
		</root>
	</log4net>
</configuration>
{code}

Make a log with roll :

{code:title=Program.cs}
using log4net;

namespace ConsoleApplication131
{
	class Program
	{
		static void Main(string[] args)
		{
			var log = LogManager.GetLogger(typeof(Program));
			log.Info(""A"");
			log.Info(""A"");
		}
	}
}
{code}

You get this one roll:

{noformat}
log4net:ERROR Failed to Close appender [RollingFileAppender]
System.ObjectDisposedException: Safe handle has been closed
   at System.Threading.WaitHandle.WaitOneNative(SafeWaitHandle waitHandle, UInt32 millisecondsTimeout, Boolean hasThreadAffinity, Boolean exitContext)
   at System.Threading.WaitHandle.WaitOne(Int64 timeout, Boolean exitContext)
   at log4net.Appender.FileAppender.InterProcessLock.AcquireLock()
   at log4net.Appender.FileAppender.LockingStream.AcquireLock()
   at log4net.Appender.FileAppender.WriteFooter()
   at log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter()
   at log4net.Appender.TextWriterAppender.Reset()
   at log4net.Appender.FileAppender.Reset()
   at log4net.Appender.TextWriterAppender.OnClose()
   at log4net.Appender.AppenderSkeleton.Close()
   at log4net.Util.AppenderAttachedImpl.RemoveAllAppenders()
{noformat}","LOG4NET-485: implemented a mutex that locks rolling across multiple processes on the same computer

However, this does not solve issues where multiple processes from different computers
try to roll over files that are located on a network share.", MODIFY RollingFileAppender.csRollingFileAppender ActivateOptions RollingFileAppender AdjustFileBeforeAppend RollingFileAppender RollingFileAppender RollingFileAppender ~RollingFileAppender
1,LOG4NET-529,66d3ce184dd280f94d0af5006b36c9f9d4d352d0,"Possible thread-safety bug in LoggingEvent From imspecting the code there appears to be a race condition if two threads call LoggingEvent.LookupProperty concurrently.  One thread may call CreateCompositeProperties and the other might access m_compositeProperties before it is fully created.

             public object LookupProperty(string key)
             {
                    if (m_data.Properties != null)
                    {
                           return m_data.Properties[key];
                    }
                    if (m_compositeProperties == null)
                    {
                           CreateCompositeProperties();
                    }
                    return m_compositeProperties[key];
             }
 
             private void CreateCompositeProperties()
             {
                    m_compositeProperties = new CompositeProperties();
 
                    if (m_eventProperties != null)
                    {
                           m_compositeProperties.Add(m_eventProperties);
                    }
                    ... etc
",LOG4NET-529 don't assign m_compositeProperties before it is complete, MODIFY LoggingEvent.csLoggingEvent CreateCompositeProperties
0,LOG4NET-143,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-3,6586b155fe474144ba918de90e9769780234a1e5,"Support per event patterns in FileAppender File name If I could specify file name patter for
(Rolling)FileAppender that would be filled by the
appender prior to openning the file, I could let many
individuals run the same applikation (on terminal
server) and still log to file (not RemotingAppender or
ADONetAppernder)

I guess, pattern like &quot;rootLog%U.log&quot; would do, if
appender replaced %U with
Thread.CurrentThread.CurrentPrincipal.Identity.Name ...
Or %T with thread id and so on...

Anonymous",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-310,8abe90a8efc15a0770dfa9253d54d18c891cec65,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-36,b5e2ca40735957d84d2734c573f88cc75ec8a627,"System.Diagnostics.Trace may throw exception if AppDomain does not have config file System.Diagnostics.Trace may throw exception if AppDomain does not have config file.

If the AppDomain has been created programmatically it is possible that it does not have a config file set. It has been reported that an exception can be generated on certain platforms in this situation.

The exception is:


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. --->
System.TypeInitializationException: The type initializer for ""D2L.Mail.MailService"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Core.LoggerManager"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Util.LogLog"" threw an exception. --->
System.NullReferenceException: Object reference not set to an instance of an object.

   at System.Configuration.ConfigurationSettings.GetConfig(String sectionName)
   at System.Diagnostics.DiagnosticsConfiguration.GetConfigTable()
   at System.Diagnostics.DiagnosticsConfiguration.Initialize()
   at System.Diagnostics.DiagnosticsConfiguration.get_IndentSize()
   at System.Diagnostics.TraceInternal.InitializeSettings()
   at System.Diagnostics.TraceInternal.get_Listeners()
   at System.Diagnostics.TraceInternal.WriteLine(String message)
   at System.Diagnostics.Trace.WriteLine(String message)
   at log4net.Util.LogLog.Error(String message, Exception exception)
   at log4net.Util.LogLog..cctor()

   --- End of inner exception stack trace ---

   at log4net.Util.LogLog.Debug(String message)
   at log4net.Core.LoggerManager..cctor()

   --- End of inner exception stack trace ---

   at log4net.Core.LoggerManager.GetLogger(Assembly
repositoryAssembly, String name)
   at log4net.LogManager.GetLogger(Type type)
   at D2L.Mail.MailService..cctor()

   --- End of inner exception stack trace ---

   --- End of inner exception stack trace ---
",Fix for LOG4NET-35 Exception rendering ThreadContextStack if null value pushed into stack. Fix and tests included, MODIFY ThreadContextStack.csThreadContextStack StackFrame if ThreadContextStack StackFrame if ADD ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadStackPatternNullVal ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestThreadStackPattern MODIFY log4net.Tests.csproj
1,LOG4NET-193,13e4ce6d0e1d9969e20a84d31f824d020eb64e04,"Supported Frameworks Inconsistency on Website Viewing the list of supported frameworks on http://logging.apache.org/log4net/release/manual/introduction.html states that log4net does not support .NET 2 and does support Compact Framework 2.

Viewing the list of supported frameworks on http://logging.apache.org/log4net/release/framework-support.html states that log4net does indeed support .NET 2 and does not list support for Compact Framework 2.

After downloading 1.2.10 and inspecting the bin directory, it appears that the second page is correct and the introduction in the manual needs to be corrected.  This seems like a major documentation issue as that is the starting point for many at the site who may be looking for .NET 2.0 support.",Fix for LOG4NET-193. Add .NET 2.0 and Compact Framework 2.0 to list of supported frameworks., MODIFY framework-support.xml MODIFY introduction.xml
0,LOG4NET-38,8abe90a8efc15a0770dfa9253d54d18c891cec65,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-437,61ca3990f6a28245ab78273480ee74891d9564b2,"LogicalThreadContext data does not flow properly using Async and Await LogicalThreadContext doesn't work properly when using Async and Await. The current NDC call stack gets corrupted because the logical data context is not immutable. (See: http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html for the gory details). I've attached a Program.cs that demonstrates the issue. You will see with an unpatched log4net the thread context is corrupted compared to the proper implementation in MyStack and the console logger. An entry like:

LOG4NET Main 1 A 2 A: </MoreWork>
LOG4NET Main 1 A 2 A: </MoreWork>

is invalid and should not be possible in a properly working thread context.

I've attached a VERY naive patch that corrects the issue.","LOG4NET-447 provide a PopAllEvents method for thread-safe access to
MemoryAppender

Patch by  Gregory Babski", ADD MemoryAppenderTest.csMemoryAppenderTest LogMessages MemoryAppenderTest TestThreadSafety MODIFY MemoryAppender.csMemoryAppender PopAllEvents
0,LOG4NET-443,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"Logger.CallAppenders I do have an .NET application (Windows Service) that collects data from a lot of sources (DBs, log files, machines event logs, ...) and uses Log4Net to log details of the actions / execution.  As expected, I'm using a high number of threads to collect data, threads that are writing logs in some files (RollingFileAppenderer).

Lately it happens that the entire application is BLOCKED because all threads were trying to acquire a read lock, like in the stack trace:
000000001ac3d998 00000000774715fa [HelperMethodFrame: 000000001ac3d998] System.Threading.Thread.SleepInternal(Int32)
000000001ac3da90 000007fef747b5e9 System.Threading.Thread.Sleep(Int32)
000000001ac3dac0 000007fef5fb9631 System.Threading.ReaderWriterLockSlim.EnterMyLockSpin()
000000001ac3db90 000007fef5cd297e System.Threading.ReaderWriterLockSlim.TryEnterReadLockCore(TimeoutTracker)
000000001ac3dbf0 000007fef5cd28fa System.Threading.ReaderWriterLockSlim.TryEnterReadLock(TimeoutTracker)
000000001ac3dc40 000007fe98fb4efd log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)
000000001ac3dcc0 000007fe98fb4907 log4net.Repository.Hierarchy.Logger.Log(System.Type, log4net.Core.Level, System.Object, System.Exception)
000000001ac3dd30 000007fe98fb47f9 log4net.Core.LogImpl.Info(System.Object)  

It's important to mention that my threads have a timeout, and if they do not finish the job in the given interval they are ABORTED.

Searching for a solution, I found a possible explanation of application hanging here: http://chabster.blogspot.ro/2013/07/a-story-of-orphaned-readerwriterlockslim.html",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
1,LOG4NET-116,667b55b3d91dd7ab92548c58ab122ab6a5bffc85,"allow smtp to ssl authenticate and with certificates. It would be fantastic if more of the SMTP feature of .net 2.0 would be allowed such as 
SSL authentication and with certificates.",Fix for LOG4NET-116. Added EnableSsl property to SmtpAppender for .NET 2.0., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-297,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-43,6de62c784acb8c0499ea3b7b84b34bff956a4e6a,"Specifying an empty string as a property in the config file results in an error Specifying an empty string as a property (either as <property/> or <property></property>) results in the following:

log4net:ERROR XmlHierarchyConfigurator: Failed to construct object of type [System.String] Exception: System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeType.CreateInstanceImpl(Boolean publicOnly)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint) in S:\local\log4net-cvs\logging-log4net\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs:line 924",Fix for LOG4NET-11. Added a Flush(true) method that will flush the lossy buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Flush MODIFY CyclicBuffer.csCyclicBuffer PopAll CyclicBuffer Clear
0,LOG4NET-441,dbe0f89a38f6fca026d8d78ab59f23009cde8443,"FAQ should have Q&A about initialization I set up a sample application to try out log4net but nothing happened. I had linked the assembly, called the methods and set up the config, but I neither called one of the configurators nor included one of the configurator attributes. While in retrospect it's stupid on my part, it also seems to be a common cry for help (search ""log4net not working""). The FAQ Q&A (under troubleshooting) could be something like:

Q: Why isn't log4net working at all?
A: You may have overlooked initialization code for log4net in your application. log4net can be initialized explicitly by calling one of the configurators (e.g. BasicConfigurator, DOMConfigurator or XmlConfigurator in the log4net.Config namespace, or implicitly by including one of the configurator attributes (e.g. [XmlConfiguratorAttribute], [DOMConfiguratorAttribute]) in the assembly where log4net is first used. See xxxx and yyyy for more information.",LOG4NET-443 prevent orphaned locks with ReaderWriterLockSlim in the face of aborted threads, MODIFY ReaderWriterLock.csReaderWriterLock AcquireReaderLock ReaderWriterLock AcquireWriterLock
0,LOG4NET-149,dd7123772f738672cad9b8fc9032f1e3ca69d5ee,"Download Links for Log4Net 1.2.9 Beta & 1.2.10 do not work. The links on the download page for Log4Net do not work, and when I check previous versions, the only ones on sourceforge are very old.  If someone has a link or possibly can fix the links on the site, that would be great.

Thanks
",LOG4NET-150: Cannot download log4net 1.2.10 from site, MODIFY download.apt
0,LOG4NET-460,882c76682c15726e6101b944d04cd6998a264e3d,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-376 use ThreadStatic for cache of formatted times, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter if AbsoluteTimeDateFormatter FormatDate
0,LOG4NET-218,5c023f6a22bfb93873a5ce0d6f5ac7e7275e2914,"Test StringFormatTest.TestFormatString fails The test ""StringFormatTest.TestFormatString"" fails with the following message:

NUnit.Framework.AssertionException: Test formatting error
    String lengths differ.  Expected length=272, but was length=291.
    Strings differ at index 46.
    expected: <""...ror>Exception during StringFormat: Index (zero based) must be greater ..."">
     but was: <""...ror>Exception during StringFormat: Der Index, basierend auf 0 (null), ..."">
    --------------------------------------------------^

The test seems to be dependent from the language settings of the current user","LOG4NET-205 fixed LoggingEvent to put the UserNameProperty and the IdentityProperty into the composite properties dictionary

This way the PropertyFilter can look up and filter by UserName and Identity.", MODIFY LoggingEvent.csLoggingEvent CreateCompositeProperties
0,LOG4NET-215,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-275,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-129,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-205,2f3bb2d6736c90407b942e053d63916e16dac66e,"Allow filtering by Identity / UserName / ThreadName and Domain Background :
See thread named PropertyFilter ( http://mail-archives.apache.org/mod_mbox/logging-log4net-user/200903.mbox/browser )

By default, there's no way to filter by those LoggingEvent properties.
I want to avoid extra code to do that (by adding a property programmatically or implementing a custom IFilter)

I see 2 solutions :

 - LoggingEvent.LookupProperty should be able to resolve internal keys like ""log4net:Identity"", ""log4net:UserName"", etc... (Note that It already works for ""log4net:HostName"" added by GlobalContext's static constructor). Then we can use the PropertyFilter.

- Add a IFilter implementation for each property like it's done for the LoggerName and  Level properties.",LOG4NET-342 added a FAQ entry that describes how to check if the repository was configured and how one can enumerate the configuration messages, MODIFY faq.xml
0,LOG4NET-76,fc878ee7e72a20432534f7670c4549739170287b,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Allow EventLog category to be specified via the LoggingEvent's properties or a configured value.  Based on patch by Ron Grabowsky.  LOG4NET-38, MODIFY EventLogAppender.csEventLogAppender Append MODIFY SystemInfo.csSystemInfo TryParse
0,LOG4NET-35,b118bfdd67abb332332b405321d9b2ce6e35405a,"Exception rendering ThreadContextStack if null value pushed into stack If a null value is pushed into a ThreadContext stack then an internal log4net error is generated when the ThreadContextStack is rendered.
The following error and stack trace are output into the log:

<log4net.Error>Exception rendering object type [log4net.Util.ThreadContextStack]<stackTrace>System.NullReferenceException: Object reference not set to an instance of an object.
   at log4net.Util.StackFrame.get_FullMessage()
   at log4net.Util.ThreadContextStack.GetFullMessage()
   at log4net.Util.ThreadContextStack.ToString()
   at log4net.ObjectRenderer.DefaultRenderer.RenderObject(RendererMap rendererMap, Object obj, TextWriter writer)
   at log4net.ObjectRenderer.RendererMap.FindAndRender(Object obj, TextWriter writer)</stackTrace></log4net.Error>",Applied patch for LOG4NET-34 Allow xml config values to be set via XmlNodeType.CDATA or XmlNodeType.Text rather than just value=xxx, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
0,LOG4NET-44,f7000163b5e88d518727fa049bef8604d25288b5,"XmlLayout emits all properties under a node named global-properties, rather than just properties. The global-properties name is incorrect as all properties for the event are included. The node name should be changed to properties.",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
0,LOG4NET-172,cca252c3090b1e8091d61ffdd0e97835146db31a,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
1,LOG4NET-71,0b5dce128eb255fd55ad23421745011db7b700bb,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.",LOG4NET-71 move log4net's sources to a subdirectory, MODIFY log4net.build MODIFY log4net.include RENAME AdoNetAppender.cs RENAME AnsiColorTerminalAppender.cs RENAME AppenderCollection.cs RENAME AppenderSkeleton.cs RENAME AspNetTraceAppender.cs RENAME BufferingAppenderSkeleton.cs RENAME BufferingForwardingAppender.cs RENAME ColoredConsoleAppender.cs RENAME ConsoleAppender.cs RENAME DebugAppender.cs RENAME EventLogAppender.cs RENAME FileAppender.cs RENAME ForwardingAppender.cs RENAME IAppender.cs RENAME IBulkAppender.cs RENAME LocalSyslogAppender.cs RENAME ManagedColoredConsoleAppender.cs RENAME MemoryAppender.cs RENAME NetSendAppender.cs RENAME OutputDebugStringAppender.cs RENAME RemoteSyslogAppender.cs RENAME RemotingAppender.cs RENAME RollingFileAppender.cs RENAME SmtpAppender.cs RENAME SmtpPickupDirAppender.cs RENAME TelnetAppender.cs RENAME TextWriterAppender.cs RENAME TraceAppender.cs RENAME UdpAppender.cs RENAME AssemblyInfo.cs RENAME AssemblyVersionInfo.cpp RENAME AssemblyVersionInfo.cs RENAME AssemblyVersionInfo.js RENAME AssemblyVersionInfo.vb RENAME AliasDomainAttribute.cs RENAME AliasRepositoryAttribute.cs RENAME BasicConfigurator.cs RENAME ConfiguratorAttribute.cs RENAME DOMConfigurator.cs RENAME DOMConfiguratorAttribute.cs RENAME DomainAttribute.cs RENAME Log4NetConfigurationSectionHandler.cs RENAME PluginAttribute.cs RENAME RepositoryAttribute.cs RENAME SecurityContextProviderAttribute.cs RENAME XmlConfigurator.cs RENAME XmlConfiguratorAttribute.cs RENAME CompactRepositorySelector.cs RENAME DefaultRepositorySelector.cs RENAME ErrorCode.cs RENAME ExceptionEvaluator.cs RENAME IAppenderAttachable.cs RENAME IErrorHandler.cs RENAME IFixingRequired.cs RENAME ILogger.cs RENAME ILoggerWrapper.cs RENAME IOptionHandler.cs RENAME IRepositorySelector.cs RENAME ITriggeringEventEvaluator.cs RENAME Level.cs RENAME LevelCollection.cs RENAME LevelEvaluator.cs RENAME LevelMap.cs RENAME LocationInfo.cs RENAME LogException.cs RENAME LogImpl.cs RENAME LoggerManager.cs RENAME LoggerWrapperImpl.cs RENAME LoggingEvent.cs RENAME MethodItem.cs RENAME SecurityContext.cs RENAME SecurityContextProvider.cs RENAME StackFrameItem.cs RENAME TimeEvaluator.cs RENAME WrapperMap.cs RENAME AbsoluteTimeDateFormatter.cs RENAME DateTimeDateFormatter.cs RENAME IDateFormatter.cs RENAME Iso8601DateFormatter.cs RENAME SimpleDateFormatter.cs RENAME DenyAllFilter.cs RENAME FilterDecision.cs RENAME FilterSkeleton.cs RENAME IFilter.cs RENAME LevelMatchFilter.cs RENAME LevelRangeFilter.cs RENAME LoggerMatchFilter.cs RENAME MdcFilter.cs RENAME NdcFilter.cs RENAME PropertyFilter.cs RENAME StringMatchFilter.cs RENAME GlobalContext.cs RENAME ILog.cs RENAME DynamicPatternLayout.cs RENAME ExceptionLayout.cs RENAME ILayout.cs RENAME IRawLayout.cs RENAME Layout2RawLayoutAdapter.cs RENAME LayoutSkeleton.cs RENAME AppDomainPatternConverter.cs RENAME AspNetCachePatternConverter.cs RENAME AspNetContextPatternConverter.cs RENAME AspNetPatternConverter.cs RENAME AspNetRequestPatternConverter.cs RENAME AspNetSessionPatternConverter.cs RENAME DatePatternConverter.cs RENAME ExceptionPatternConverter.cs RENAME FileLocationPatternConverter.cs RENAME FullLocationPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LevelPatternConverter.cs RENAME LineLocationPatternConverter.cs RENAME LoggerPatternConverter.cs RENAME MessagePatternConverter.cs RENAME MethodLocationPatternConverter.cs RENAME NamedPatternConverter.cs RENAME NdcPatternConverter.cs RENAME PatternLayoutConverter.cs RENAME PropertyPatternConverter.cs RENAME RelativeTimePatternConverter.cs RENAME StackTraceDetailPatternConverter.cs RENAME StackTracePatternConverter.cs RENAME ThreadPatternConverter.cs RENAME TypeNamePatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PatternLayout.cs RENAME RawLayoutConverter.cs RENAME RawPropertyLayout.cs RENAME RawTimeStampLayout.cs RENAME RawUtcTimeStampLayout.cs RENAME SimpleLayout.cs RENAME XMLLayout.cs RENAME XMLLayoutBase.cs RENAME XmlLayoutSchemaLog4j.cs RENAME Log4netAssemblyInfo.cs RENAME LogManager.cs RENAME LogicalThreadContext.cs RENAME MDC.cs RENAME NDC.cs RENAME DefaultRenderer.cs RENAME IObjectRenderer.cs RENAME RendererMap.cs RENAME IPlugin.cs RENAME IPluginFactory.cs RENAME PluginCollection.cs RENAME PluginMap.cs RENAME PluginSkeleton.cs RENAME RemoteLoggingServerPlugin.cs RENAME ConfigurationChangedEventArgs.cs RENAME DefaultLoggerFactory.cs RENAME Hierarchy.cs RENAME ILoggerFactory.cs RENAME Logger.cs RENAME LoggerKey.cs RENAME ProvisionNode.cs RENAME RootLogger.cs RENAME XmlHierarchyConfigurator.cs RENAME IBasicRepositoryConfigurator.cs RENAME ILoggerRepository.cs RENAME IXmlRepositoryConfigurator.cs RENAME LoggerRepositorySkeleton.cs RENAME ThreadContext.cs RENAME AppenderAttachedImpl.cs RENAME CompositeProperties.cs RENAME ContextPropertiesBase.cs RENAME ConverterInfo.cs RENAME CountingQuietTextWriter.cs RENAME CyclicBuffer.cs RENAME EmptyCollection.cs RENAME EmptyDictionary.cs RENAME FormattingInfo.cs RENAME GlobalContextProperties.cs RENAME ILogExtensions.cs RENAME LevelMapping.cs RENAME LevelMappingEntry.cs RENAME LogLog.cs RENAME LogicalThreadContextProperties.cs RENAME NativeError.cs RENAME NullDictionaryEnumerator.cs RENAME NullEnumerator.cs RENAME NullSecurityContext.cs RENAME OnlyOnceErrorHandler.cs RENAME OptionConverter.cs RENAME PatternConverter.cs RENAME PatternParser.cs RENAME PatternString.cs RENAME AppDomainPatternConverter.cs RENAME DatePatternConverter.cs RENAME EnvironmentFolderPathPatternConverter.cs RENAME EnvironmentPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LiteralPatternConverter.cs RENAME NewLinePatternConverter.cs RENAME ProcessIdPatternConverter.cs RENAME PropertyPatternConverter.cs RENAME RandomStringPatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PropertiesDictionary.cs RENAME PropertyEntry.cs RENAME ProtectCloseTextWriter.cs RENAME QuietTextWriter.cs RENAME ReadOnlyPropertiesDictionary.cs RENAME ReaderWriterLock.cs RENAME ReusableStringWriter.cs RENAME SystemInfo.cs RENAME SystemStringFormat.cs RENAME TextWriterAdapter.cs RENAME ThreadContextProperties.cs RENAME ThreadContextStack.cs RENAME ThreadContextStacks.cs RENAME Transform.cs RENAME BooleanConverter.cs RENAME ConversionNotSupportedException.cs RENAME ConverterRegistry.cs RENAME EncodingConverter.cs RENAME IConvertFrom.cs RENAME IConvertTo.cs RENAME IPAddressConverter.cs RENAME PatternLayoutConverter.cs RENAME PatternStringConverter.cs RENAME TypeConverter.cs RENAME TypeConverterAttribute.cs RENAME WindowsSecurityContext.cs RENAME log4net.vs2008.csproj RENAME log4net.vs2008.sln RENAME log4net.vs2010.csproj RENAME log4net.vs2010.sln MODIFY nant.build MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
1,LOG4NET-274,c07a7d45aa775857dc4b070089d21c7d8a69b9d8,"log4net doesn't log when running a .Net 4.0 Windows application built in Release mode I've a .Net 4.0 windows service application that uses log4net.

Here's my log4net config.
<log4net>
  <appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"">
    <layout type=""log4net.Layout.PatternLayout"">
      <conversionPattern value=""%date [%thread] %-5level %logger [%property{Context}] - %message%newline"" />
    </layout>
  </appender>

  <appender name=""ColorConsoleAppender"" type=""log4net.Appender.ColoredConsoleAppender"">
    <mapping>
      <level value=""ERROR"" />
      <foreColor value=""Red, HighIntensity"" />
    </mapping>
    <mapping>
      <level value=""FATAL"" />
      <foreColor value=""Red, HighIntensity"" />
    </mapping>
    <mapping>
      <level value=""WARN"" />
      <foreColor value=""Blue, HighIntensity"" />
    </mapping>
    <mapping>
      <level value=""INFO"" />
      <forecolor value=""White, HighIntensity"" />
    </mapping>
    <mapping>
      <level value=""DEBUG"" />
      <forecolor value=""Green, HighIntensity"" />
    </mapping>
    <layout type=""log4net.Layout.PatternLayout"">
      <conversionPattern value=""%date [%thread] %-5level %logger [%property{Context}] - %message%newline"" />
    </layout>
  </appender>

  <appender name=""RollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
    <appendToFile value=""true"" />
    <datePattern value=""yyyyMMdd"" />
    <file value=""Logs/Server.log"" />
    <layout type=""log4net.Layout.PatternLayout"">
      <conversionPattern value=""%date [%thread] %-5level %logger [%property{Context}] - %message%newline"" />
    </layout>
    <maximumFileSize value=""10MB"" />
    <rollingStyle value=""Composite"" />
    <staticLogFileName value=""true"" />
  </appender>

  <appender name=""EventLogAppender"" type=""log4net.Appender.EventLogAppender"">
    <layout type=""log4net.Layout.PatternLayout"">
      <conversionPattern value=""%date [%thread] %-5level %logger [%property{Context}] - %message%newline"" />
    </layout>
  </appender>

  <root>
    <level value=""ALL"" />
    <appender-ref ref=""ColorConsoleAppender"" />
    <appender-ref ref=""RollingFileAppender"" />
  </root>

</log4net>

Logging works as expected when the service starts up while using the exe that was built in debug mode (log files are created at the right file path), but doesn't work when it is using the exe built in release mode.

I've even tried using a recompiled log4net dll for .Net 4.0 following the steps mentioned at this blog.. http://tseonet.blogspot.com/2010/07/making-log4net-run-on-net-40.html. 
That didn't work either. I was able to compile and run the service. But the result was the same; no logs when using the exe build in release mode.

Not sure what's going on. Cannot deploy the application built in debug mode into production.

Any help is greatly appreciated.",Log as early as possible.  LOG4NET-274, MODIFY faq.xml
0,LOG4NET-229,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
1,LOG4NET-167,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-38,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
1,LOG4NET-265,d78a5f8331dad60de277fecda43205412ccb464a,"RemoteFileAppender Tests fail on Windows 7 Compiled the version of log4net in the repository and ran the unit tests. All of the RemotingAppenderTests fail. Enabling internal logging gives the following error.

log4net:ERROR [RemotingAppender] ErrorCode: GenericFailure. Failed in SendBufferCallback
System.Runtime.Serialization.SerializationException: Because of security restrictions, the type System.Runtime.Remoting.ObjRef cannot be accessed. ---> System.Security.SecurityException: Request failed.
   at System.Runtime.Serialization.FormatterServices.nativeGetSafeUninitializedObject(RuntimeType type)
   at System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject(Type type)
The action that failed was:
Demand
The type of the first permission that failed was:
System.Security.Permissions.SecurityPermission
The first permission that failed was:
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""Infrastructure""/>

The demand was for:
<PermissionSet class=""System.Security.PermissionSet""
version=""1"">
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""Infrastructure""/>
</PermissionSet>

The only permitted permissions were:
<PermissionSet class=""System.Security.PermissionSet""
version=""1"">
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""SerializationFormatter""/>
</PermissionSet>

The method that caused the failure was:
System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream, System.Runtime.Remoting.Messaging.IMessage ByRef, System.Runtime.Remoting.Channels.ITransportHeaders ByRef, System.IO.Stream ByRef)
",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
1,LOG4NET-31,37368e55cfba01e14eba6bf61ea1a6e5de512591,"Allow user to pass in additional parameters to <converter> node via some kind of <property> tag It would be useful if the user was able to supply additional properties to the <convert> tag in the form of:

 <property name=""foo"" value=""bar"" />
 <property name=""Hello"" value=""World"" />

The code below uses a <property> node to determine if the HomeAddress or the WorkAddress will appear in the log message. If the parameter is not present, the converter prints a default value.

 <converter>
  <name value=""user-converter"" />
  <type value=""Company.Project.Logging.UserConverter, Company.Project"" />
  <property name=""Address"" value=""HomeAddress"" />
 </converter>
 <conversionPattern value=""%p %d %user-converter{Nicko} - %m%n"" />

The <property> tags would be accessible via a Properties IDictionary. It would allow the converter to perform additional logic on the base.Option that was passed in:

 public class MyConverter : PatternConverter
 {
  override protected void Convert(TextWriter writer, object state) 
  {
   User user = GetUserByUserName(base.Option);
   string address = base.Properties[""Address""] as string;
   if (address != null && address.Length > 0)
   {
    if (user != null)
    {
     switch (address)
     {
      case ""HomeAddress"": writer.Write(user.HomeAddress); break;
      case ""WorkAddress"": writer.Write(user.WorkdAddress); break;
     }
    }
    else
    {
     // ???
    }
   }
   else
   {
    // default display
    writer.Write(user.HomeAddress); break;   
   }
  }
 }",Added test for LOG4NET-53 (allow repository properties to be set in xml config file). Added test case for LOG4NET-31 (allow additional properties to be set on converters)., ADD Hierarchy.csHierarchy SetRepositoryPropertiesInConfigFile ADD PatternConverterTest.csPatternStringAppender PatternStringAppender PropertyKeyCountPatternConverter PropertyKeyCountPatternConverter PropertyKeyCountPatternConverter Convert PatternConverterTest PatternConverterProperties PropertyKeyCountPatternLayoutConverter Convert PropertyKeyCountPatternLayoutConverter PropertyKeyCountPatternLayoutConverter PatternConverterTest PatternLayoutConverterProperties MODIFY log4net.Tests.vs2005.csproj
0,LOG4NET-379,78c420aea76cb9c7cded0d7205fc28fe67c840db,"NullReferenceException in FileAppender when file is not filled. When I create a FileAppender without a filename and I call ActivateOptions(), a NullReferenceException is thrown. This is because the filename is first trimmed before the check whether the filename is null or not.","LOG4NET-378 fixed a problem where rolled log files get overwritten when the application is restarted

The cause is that InitializeFromOneFile() does not succesfully detect the filenames.", MODIFY RollingFileAppender.csRollingFileAppender InitializeFromOneFile
0,LOG4NET-38,73a4921de015d4262273055b04ea37206a224038,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-243,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-243,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-117,8400fecdd81394a86d4192889446d40678dcfb90,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-460,c268b58da19d5242adfa896430c94447cecf018b,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-407 use TPL for AsyncAppender where available, MODIFY AsyncAppender.csAsyncAppender Append AsyncAppender OnClose AsyncAppender Append AsyncAppender AsyncAppender
1,LOG4NET-131,689d3cf063d9d5a83b42bbca365e1616521f4b6e,Add Cc and Bcc support to SmtpAppender Add Cc and Bcc support to SmtpAppender.,LOG4NET-131: Add Cc and Bcc support to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-484,652101924faf9232b4a4c8388632619ad1447d9a,"System.ObjectDisposedException with FileAppender+InterProcessLock Configure lockingModel for InterProcessLock with RollingFileAppender.

{code:xml|title=app.config}
<?xml version=""1.0"" encoding=""utf-8""?>
<configuration>
	<configSections>
		<section name=""log4net"" type=""log4net.Config.Log4NetConfigurationSectionHandler, log4net"" />
	</configSections>
	<log4net>
		<appender name=""RollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file type=""log4net.Util.PatternString"" value=""test.log"" />
			<encoding value=""utf-8"" />
			<appendToFile value=""true""/>
			<rollingStyle value=""Size""/>
			<maxSizeRollBackups value=""10""/>
			<maximumFileSize value=""1""/>
			<staticLogFileName value=""true""/>
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%d [%t] %-5p %c{2} - %m%n""/>
			</layout>
			<lockingModel type=""log4net.Appender.FileAppender+InterProcessLock"" />
		</appender>
		<root>
			<level value=""INFO""/>
			<appender-ref ref=""RollingFileAppender""/>
		</root>
	</log4net>
</configuration>
{code}

Make a log with roll :

{code:title=Program.cs}
using log4net;

namespace ConsoleApplication131
{
	class Program
	{
		static void Main(string[] args)
		{
			var log = LogManager.GetLogger(typeof(Program));
			log.Info(""A"");
			log.Info(""A"");
		}
	}
}
{code}

You get this one roll:

{noformat}
log4net:ERROR Failed to Close appender [RollingFileAppender]
System.ObjectDisposedException: Safe handle has been closed
   at System.Threading.WaitHandle.WaitOneNative(SafeWaitHandle waitHandle, UInt32 millisecondsTimeout, Boolean hasThreadAffinity, Boolean exitContext)
   at System.Threading.WaitHandle.WaitOne(Int64 timeout, Boolean exitContext)
   at log4net.Appender.FileAppender.InterProcessLock.AcquireLock()
   at log4net.Appender.FileAppender.LockingStream.AcquireLock()
   at log4net.Appender.FileAppender.WriteFooter()
   at log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter()
   at log4net.Appender.TextWriterAppender.Reset()
   at log4net.Appender.FileAppender.Reset()
   at log4net.Appender.TextWriterAppender.OnClose()
   at log4net.Appender.AppenderSkeleton.Close()
   at log4net.Util.AppenderAttachedImpl.RemoveAllAppenders()
{noformat}",LOG4NET-486: adapted Simon Clarks idea to correctly detect file names when maxSizeRollBackups and datePattern is used, MODIFY RollingFileAppender.csRollingFileAppender GetWildcardPatternForFile
0,LOG4NET-215,f51c60d914ba1ffb6ed34ae1ed275913572c4131,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Point to existing FAQ entry.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions
0,LOG4NET-44,29ec33c991b1a22aeac4e67c77ebbe94b370f9d1,"XmlLayout emits all properties under a node named global-properties, rather than just properties. The global-properties name is incorrect as all properties for the event are included. The node name should be changed to properties.","Fix for LOG4NET-43. Handles empty string properties by creating an empty string rather than attempting to construct one.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
0,LOG4NET-90,3fcb26f06ca6b56db29f9b03fbf1d1cbea5016df,"update config documentation (remove typo) http://logging.apache.org/log4net/release/config-examples.html#adonetappender-o9

contains ""pParameterName "" >> should be ""parameterName ""","Fix for LOG4NET-93. Typos for node name in tutorial, excess quote, invalid XML from David McNeill.", MODIFY App.config
1,LOG4NET-362,d32a83cc1b9093c4c0de77dd8fe3b06bf995be28,"[PATCH] SystemInfo.AssemblyLocationInfo throws unhandled ArgumentException ""Absolute path required"" when exe is started via UNC path Hi!

myAssembly.Location throws ArgumentException ""Absolute path required"" when application is invoked via UNC path (""\\localhost\Debug\app.exe"" to be precise). Looks like it is safe to ignore and just another exception handler is needed. Patch is attached.",LOG4NET-362 fix SystemInfo.AssemblyLocationInfo that raises an unhandled ArgumentException when the application is started via UNC path, MODIFY SystemInfo.csSystemInfo AssemblyLocationInfo
1,LOG4NET-390,a5290d253217da52831c12a53ca3aa009f777b3f,"ReadOnlyAppenderCollection.ToArray returns empty array log4net.Appender.AppenderCollection.ReadOnlyAppenderCollection does not override ToArray().
As a consequence ToArray calls returns always empty arrays.

Fix:
public override IAppender[] ToArray()
{
    return m_collection.ToArray();
}",LOG4NET-390 refactored ToArray() into the public helpers section, MODIFY AppenderCollection.csAppenderCollection ReadOnlyAppenderCollection ToArray
0,LOG4NET-172,882c76682c15726e6101b944d04cd6998a264e3d,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.",LOG4NET-376 use ThreadStatic for cache of formatted times, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter if AbsoluteTimeDateFormatter FormatDate
1,LOG4NET-205,9ad6da147b8a6d97346502e727f53a71e46b8b2d,"Allow filtering by Identity / UserName / ThreadName and Domain Background :
See thread named PropertyFilter ( http://mail-archives.apache.org/mod_mbox/logging-log4net-user/200903.mbox/browser )

By default, there's no way to filter by those LoggingEvent properties.
I want to avoid extra code to do that (by adding a property programmatically or implementing a custom IFilter)

I see 2 solutions :

 - LoggingEvent.LookupProperty should be able to resolve internal keys like ""log4net:Identity"", ""log4net:UserName"", etc... (Note that It already works for ""log4net:HostName"" added by GlobalContext's static constructor). Then we can use the PropertyFilter.

- Add a IFilter implementation for each property like it's done for the LoggerName and  Level properties.",Username is always fixed thanks to LOG4NET-205, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix
1,LOG4NET-79,253fd40091eb66756f90a1afcb4bc5c043ccc9d4,"SecurityException thrown in LogicalThreadContextProperties GetProperties SecurityException thrown in LogicalThreadContextProperties GetProperties

The LogicalThreadContext stores its properties in the CallContext. The CallContext methods GetData ans SetData have a LinkDemand for the SecurityPermissionFlag.Infrastructure. If the calling code does not have this permission a SecurityException is generated when the LogicalThreadContextProperties.GetProperties method is JITed. The calling code does not have this psermission if it is in the Medium trust zone.

The exception causes the LoggingEvent to fail to compose its properties, and therefore log4net fails to log any events. The exception is eventualy caught and does not leak into the calling application.",Fix for LOG4NET-79. Added catch handler for SecurityException in LogicalThreadContextProperties GetProperties method. This is caused by a LinkDemand for Infrastructure permission on the CallContext.GetProperties method., MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties SetCallContextData LogicalThreadContextProperties GetCallContextData LogicalThreadContextProperties GetProperties
1,LOG4NET-56,5d7cf795884a0217aed3edd15bf33808e5be5621,Support rendering IEnumerator objects as well as ICollections Some objects that use IDictionary objects expose an IDictionaryEnumerator instead of the underlying IDictionary. HttpRuntime.Cache.GetEnumerator() is one such object.,Fix for LOG4NET-56. Added support for rendering IEnumerators rather than just collections., MODIFY DefaultRenderer.csDefaultRenderer RenderObject
0,LOG4NET-115,689d3cf063d9d5a83b42bbca365e1616521f4b6e,"Expand UserAppDataPath in filename I have implemented a new PatternStringConverter which will expand the application AppUserDataPath (System.Windows.Forms.Application.UserAppDataPath). This is usefull, if you wish to log into this directory when a certain user has no write rights for the application directory.

Here an example: 

<file type=""log4net.Util.PatternString"" value=""%userappdatapath\Log.txt""/>

Regards,
André
",LOG4NET-131: Add Cc and Bcc support to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-376,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
1,LOG4NET-447,61ca3990f6a28245ab78273480ee74891d9564b2,"MemoryAppender class is not thread safe The memory appender cannot be used safely in an application that uses more than one thread to interact with logging.

When using this code to retrieve and then clear events logged in the memory appender:
var events = memoryAppender.GetEvents();
memoryAppender.Clear();

The executing thread may be preempted between these two calls and additional logging events logged. These events are then cleared when the thread resumes execution - and are never seen/processed.

I expect to be be able to retrieve and clear the list of current events in one call that guarantees that no events are ever lost.","LOG4NET-447 provide a PopAllEvents method for thread-safe access to
MemoryAppender

Patch by  Gregory Babski", ADD MemoryAppenderTest.csMemoryAppenderTest LogMessages MemoryAppenderTest TestThreadSafety MODIFY MemoryAppender.csMemoryAppender PopAllEvents
0,LOG4NET-71,debba6201326ec2cfb7bdd8613f12fe3d212e418,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.","Fix for LOG4NET-72. Moved String.Format call into separate class SystemStringFormat. This class holds the format string and arguments and only performs the String.Format when its ToString method is called.
Added simple test to ensure that the String.Format methods are working correctly and error handling correctly.
Updated the tests project nant.build to copy shared libs into the build output directory.", MODIFY LogImpl.csLogImpl DebugFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl FatalFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl WarnFormat LogImpl WarnFormat ADD SystemStringFormat.csSystemStringFormat ToString SystemStringFormat StringFormatError SystemStringFormat StringFormat SystemStringFormat RenderObject SystemStringFormat SystemStringFormat SystemStringFormat RenderArray MODIFY Transform.csTransform RenderArray Transform StringFormatError Transform RenderObject Transform StringFormat MODIFY log4net.csproj ADD prerequisites.txt MODIFY nant.build ADD StringFormatTest.csStringFormatTest TestThreadPropertiesPattern MODIFY log4net.Tests.csproj
0,LOG4NET-116,a056a11fb478a35d6cf3d4f26dc391c34f2dabc2,"allow smtp to ssl authenticate and with certificates. It would be fantastic if more of the SMTP feature of .net 2.0 would be allowed such as 
SSL authentication and with certificates.","Fix for LOG4NET-126. Changed link to downloads page from ""downloads.html"" to ""download.html"".", MODIFY example-apps.xml
0,LOG4NET-206,3c054052a5cc1a9091b84b849f36bff0c51cc221,"Unable to build for release version with Visual Studio 2005 I am trying to build log4net.dll using Visual Studio 2005. When I try to build for release I get this error

Error	5	Cryptographic failure while signing assembly 'C:\MyProjects\incubating-log4net-1.2.10\log4net-1.2.10\src\obj\Release\log4net.dll' -- 'Error reading key file '..\..\..\log4net.snk' -- The system cannot find the file specified. '	log4net

Works fine for debug version.
",Fix for LOG4NET-135. Improve documentation for resetting log file once per application run., MODIFY config-examples.xml
0,LOG4NET-275,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
1,LOG4NET-115,bc7056e4e4aab7cc1e3cec0f05e8fd2cd0af5c21,"Expand UserAppDataPath in filename I have implemented a new PatternStringConverter which will expand the application AppUserDataPath (System.Windows.Forms.Application.UserAppDataPath). This is usefull, if you wish to log into this directory when a certain user has no write rights for the application directory.

Here an example: 

<file type=""log4net.Util.PatternString"" value=""%userappdatapath\Log.txt""/>

Regards,
André
",Fix for LOG4NET-115. Added EnvironmentFolderPathPatternConverter to allow System.Environment.SpecialFolder pattern string expansion., MODIFY PatternString.csPatternString PatternString ADD EnvironmentFolderPathPatternConverter.csEnvironmentFolderPathPatternConverter Convert ADD PatternStringTest.csPatternStringTest TestEnvironmentFolderPathPatternConverter
0,LOG4NET-25,6a525039c435d10dbfefe366bcec49d087955dad,"RollingFileAppender can fail if RollOverIfDateBoundaryCrossing required RollingFileAppender fails if RollOverIfDateBoundaryCrossing required and current directory is not ApplicationBase directory.

RollOverIfDateBoundaryCrossing is called before the base class (FileAppender) ActivateOptions method is called. Therefore the File property has not yet been converted to a fully qualified path. If the current directory is not the ApplicationBase directory (e.g. when running under ASP.NET) then the RollFile call will fail with the message ""Source does not exist"" in the internal debug log.",Fix LOG4NET-23. Folders off by 1 level, MODIFY example-apps.xml
0,LOG4NET-215,09f7293056e8abf36655537318384e9bd0ff5c9e,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-49,f7000163b5e88d518727fa049bef8604d25288b5,"CountingQuietTextWriter does not count strings written with WriteLine The CountingQuietTextWriter overrides Write(String) to count the chars written. However it should also override Write(Char) and Write(Char[],int,int).

WriteLine(String) calls Write(Char[],int,int) and therefore the CountingQuietTextWriter is not counting these strings, which are written to the output writer.",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
0,LOG4NET-129,e1c9c3b7bb26b3564062859a86b38b793048548a,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-76,8abe90a8efc15a0770dfa9253d54d18c891cec65,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-46,0880f3b15c7de3a922c5a9087575398aa64514bd,"Support appenders that can output multiple events efficiently Some appenders can efficiently output batches of events. Currently there is no way to pass a batch of events to an appender.

Add an interface IBulkAppender that exposes a DoAppend method that takes an array of events. This interface can be supported by appenders that can process in bulk.","Fix for LOG4NET-49, Added missing overrides to CountingQuietTextWriter", MODIFY CountingQuietTextWriter.csCountingQuietTextWriter Write CountingQuietTextWriter Write
1,LOG4NET-36,6ce3f56a402faab37b1f0b4da477e8ce67ed68d4,"System.Diagnostics.Trace may throw exception if AppDomain does not have config file System.Diagnostics.Trace may throw exception if AppDomain does not have config file.

If the AppDomain has been created programmatically it is possible that it does not have a config file set. It has been reported that an exception can be generated on certain platforms in this situation.

The exception is:


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. --->
System.TypeInitializationException: The type initializer for ""D2L.Mail.MailService"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Core.LoggerManager"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Util.LogLog"" threw an exception. --->
System.NullReferenceException: Object reference not set to an instance of an object.

   at System.Configuration.ConfigurationSettings.GetConfig(String sectionName)
   at System.Diagnostics.DiagnosticsConfiguration.GetConfigTable()
   at System.Diagnostics.DiagnosticsConfiguration.Initialize()
   at System.Diagnostics.DiagnosticsConfiguration.get_IndentSize()
   at System.Diagnostics.TraceInternal.InitializeSettings()
   at System.Diagnostics.TraceInternal.get_Listeners()
   at System.Diagnostics.TraceInternal.WriteLine(String message)
   at System.Diagnostics.Trace.WriteLine(String message)
   at log4net.Util.LogLog.Error(String message, Exception exception)
   at log4net.Util.LogLog..cctor()

   --- End of inner exception stack trace ---

   at log4net.Util.LogLog.Debug(String message)
   at log4net.Core.LoggerManager..cctor()

   --- End of inner exception stack trace ---

   at log4net.Core.LoggerManager.GetLogger(Assembly
repositoryAssembly, String name)
   at log4net.LogManager.GetLogger(Type type)
   at D2L.Mail.MailService..cctor()

   --- End of inner exception stack trace ---

   --- End of inner exception stack trace ---
",Fix for LOG4NET-36 System.Diagnostics.Trace may throw exception if AppDomain does not have config file. Added try catch blocks, MODIFY LogLog.csLogLog EmitErrorLine LogLog EmitOutLine
0,LOG4NET-494,d0ff4a82e278479dcc621c21ef6b4529d7ff55be,"ArgumentOutOfRange with SQLite In AdoNetAppender.cs at line 561 :	
param.FormatValue(dbCmd, e);

In SQLite we need to call the Prepare function before FormatValue :
param.Prepare(dbCmd);

If Prepare not called, then SQLite generate an ArgumentOutOfRangeException because the parameters is not defined",LOG4NET-495: clear parameters when flushing multiple events, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
0,LOG4NET-229,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-123,a056a11fb478a35d6cf3d4f26dc391c34f2dabc2,"[PATCH] EnvironmentPatternConverter does not expand User or System level environment variables under Windows Under .NET 2.0, there is an additional option on the System.Environment.GetEnvironment method allowing specification of a process level, user level, or machine level environment variable. If not specified, only process level environment variables will be examined.

The attached patch enhances the EnvironmentPatternConverter. If the specified environment property is not found in the current process environment, the user environment settings will be checked. If the property is still not found, the machine level environment settings will also be tested.","Fix for LOG4NET-126. Changed link to downloads page from ""downloads.html"" to ""download.html"".", MODIFY example-apps.xml
0,LOG4NET-242,d78a5f8331dad60de277fecda43205412ccb464a,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-229,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-15,21c34f7153387912a991692eaf1f32fe82ec9492,"Email high ""importance"" priority setting with SmtpAppender It would be quite valuable for error alerting if the
SMTPAppender would expose its
System.Web.Mail.MailMessage's importance priority
setting, as a property of the SmtpAppender class.

A common scenario would probably be where the user
would set the Threshold
to ERROR and set the High Importance flag to being
true.

regards,

carl",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-22,68a31477786920c4670fa05845f935fcff0e7a71,"XmlLayout allows output of invalid control characters XmlLayout allows output of invalid control characters.

Reported by Mike Blake-Knox with additional comments from Curt Arnold.


The XmlLayout encodes the character 0x1e as &#x1E; using the standard XML numeric character reference.

This character code is in a range which is not allowed to appear in XML 1.0 either as a un-encoded value or as a numeric character reference.

The valid character ranges are defined here in the XML recommendation:
http://www.w3.org/TR/REC-xml/#charsets

They are:

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

Numeric character references are not able to express characters from outside these ranges.

The System.Xml.XmlTextWriter does not verify if the unicode character is valid in XML, but it does encode it as a numeric character reference if it cannot be expressed in the output encoding.

To complicate matters further XML 1.1 does allow further, so called restricted characters, to be included in the output if they are encoded as numeric character references. These ranges are:

[#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]

See http://www.w3.org/TR/2004/REC-xml11-20040204/#charsets for details.",Fix LOG4NET-24. Programmatic flush of BufferingAppenderSkeleton buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton Append
0,LOG4NET-275,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-467,4205d37f4ca70e5218c4cc895328154a3720cca7,"Is .NET Core, will be supported in the near future, or not As you know, ms is moving heavily toward .Net core:
https://github.com/dotnet/core

so, is there a road map for making a version that supports it?

and i noticed that log4net, has not been updated for 2 years.

so is it maintained, or being forgotten?","add some notes on how to contribute

also use this commit to close #27 which has been rejected by Dominik
in https://issues.apache.org/jira/browse/LOG4NET-518", MODIFY README.txt
0,LOG4NET-311,56357bef38685f4521b5a9743dad54770f6258a5,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",TryParse has been introduced in .NET 2.0.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-344,964fad01933ec029bbbff6631bfc7d559be75e6e,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",silly little timimg helper for LOG4NET-376, ADD AbsoluteTimeDateFormatterTiming.csAbsoluteTimeDateFormatterTiming Main AbsoluteTimeDateFormatterTiming SingleThread
0,LOG4NET-215,e1c9c3b7bb26b3564062859a86b38b793048548a,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-460,6d61970a1a37a3727fed50f48e78336d8edea23b,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-172 add VS project files for WebServiceAppender example, ADD WebServiceAppender.csproj MODIFY cs-examples.sln
1,LOG4NET-461,b0925ead3f58f007f280268c4dc0a97a8c750081,"The AdoNetAppender  Basically what happens is you guys store the SqlCommand between all requests. The problem is, sometimes this prepared statement gets removed from the cache in SqlServer. When this happens all subsequent requests result in an error ""Could not find prepared statement with handle -1""

You could resolve this by checking for that specific error on submitting and if you get it recreate the command and try again, or just recreate and prepare the statement every time.

This is a pretty major issue.",LOG4NET-461: fix for ancient .NET frameworks, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
0,LOG4NET-2,6b91b595de6654532a9614e0890c8346eb1487a1,"Configurator should report errors I understand that you do not want to throw exceptions
from within the logging methods, as a failure in log4net
would make the hosting app fail.

However, I think it is necessary that DOMConfigurator
throws exceptions. If a failure occurs at that point, for
example due to a malformed configuration file, I believe
the hosting app would in most cases like to know. Even
if it doesn't, it could easily just swallow any exceptions.

In my case, I have a Windows Service app that will just
quit logging if there is an error in the configuration file.
That makes the logging mechanism rather more fragile
than I would like.

Tor Hovland - torhovl

---

I completely agree.  I suggest that you take an additional
step and provide an additional mechanism, perhaps a
ValidateLoggers() method which operates like a standard
logging call, but is capable of throwing exceptions or
providing another form of feedback which would allow the
caller to diagnose bad configurations.  The configuration
file can be well-formed, but logging can still fail for any
number of reasons.

Most applications that provide a logging mechanism employ a
'start-up banner' log entry at an INFO level.  This would be
a great time to detect any problems with the logging system
itself.  I currently have a project deployed at a customer
site and despite a well formed config file... no logging is
taking place.  I don't know why, and there does not seem to
be a simple way to  diagnose the problem.

Ben Newman - benjamin91","Fix for LOG4NET-96. Added EnabledDate, ErrorCode, ErrorMessage, and Exception properties to track when an OnlyOnceErrorHandler becomes active. Added Reset method which disables the error handler thus allowing it to become active again.", MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler if OnlyOnceErrorHandler Reset OnlyOnceErrorHandler Error OnlyOnceErrorHandler if OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error
0,LOG4NET-72,5f64f8de9766f3ac66e2aec8dc62eb2439171c4f,"Performance of ILog.xxxFormat methods The performance of the ILog.xxxFormat methods can be improved.

1) Add method overloads for common numbers of arguments:

void DebugFormat(string format, object arg0); 
void DebugFormat(string format, object arg0, object arg1); 
void DebugFormat(string format, object arg0, object arg1, object arg2); 

2) Delay formatting of the message until after the appenders filters have run.",Fix for LOG4NET-73. Added code to cleanup the connection and command objects that are stored in members if the InitializeDatabaseConnection method is called multiple times., MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-378,dbb13e771fb1da8ff024ecacfdcc1c74ce2243f4,"Rolling log file is overwritten when application is restarted My server process uses log files which roll on date and file size (4MB). 
When I restart the server and there are already more than 1 log files for the current date, the 2nd segment gets overwritten and the 3rd, 4th, ... may get overwritten later, when #2 is filled up again.
I'm using version 1.2.11, which I can't select in the ""Affects Version"" combo box.

e.g. 
flotto.20130527.0.log = 4MB
flotto.20130527.1.log = 0MB (just got overwritten when the server was restarted)
flotto.20130527.2.log = 4MB (still contains original data but will be overwritten too as soon as #1 fills up)
flotto.20130527.3.log = 4MB (same as above)


The configuration in MyServer.exe.config looks like this:
<log4net>
    <appender name=""LogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
      <file value=""flotto.log"" />
      <appendToFile value=""true"" />
      <encoding>utf-8</encoding>
      <preserveLogFileNameExtension value=""true""/>
      <rollingStyle value=""Composite"" />
      <staticLogFileName value=""false"" />
      <datePattern value="".yyyyMMdd""/>
      <countDirection value=""1""/>
      <maximumFileSize value=""4MB"" />
      <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""%date [%-7thread] %-5level %-35logger - %message%newline"" />
      </layout>
    </appender>
    <root>
      <level value=""INFO"" />
      <appender-ref ref=""LogFileAppender""/>
    </root>
    <logger name=""Flotto.FlottoService"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.TcpServer"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.UdpBroadcastReceiver"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.GpsTrackerGprsServer"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.TrackerManager"">
      <!--<level value=""INFO""/>-->
    </logger>
  </log4net>
","LOG4NET-318 add [SecuritySafeCritical] attribute to the Attach method of the RemoteLoggingServerPlugin

According to http://stackoverflow.com/questions/8297419/log4net-doesnt-pass-verification-when-compiling this should fix
the PEVerify issue reported.", MODIFY RemoteLoggingServerPlugin.cs
1,LOG4NET-98,7e7f5b0d3ddc2886d97f9d1fd910798073428bb5,"Update header comment in files to be compliant with new Apache header requirements: http://www.apache.org/legal/src-headers.html for 11/1/2006 deadline Update header comment in files to be compliant with new Apache header requirements: 

 http://www.apache.org/legal/src-headers.html 

for 11/1/2006 deadline.",LOG4NET-98: Add license notice as comment in generated docs, MODIFY site.vsl
0,LOG4NET-494,dde8e48d7743ae4d56ed1b755c76fffb132f4479,"ArgumentOutOfRange with SQLite In AdoNetAppender.cs at line 561 :	
param.FormatValue(dbCmd, e);

In SQLite we need to call the Prepare function before FormatValue :
param.Prepare(dbCmd);

If Prepare not called, then SQLite generate an ArgumentOutOfRangeException because the parameters is not defined",LOG4NET-495: adjusted the way how the parameters are cleared so that the AdoNetAppender tests pass, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
0,LOG4NET-167,e1c9c3b7bb26b3564062859a86b38b793048548a,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
1,LOG4NET-44,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"XmlLayout emits all properties under a node named global-properties, rather than just properties. The global-properties name is incorrect as all properties for the event are included. The node name should be changed to properties.","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
1,LOG4NET-96,6b91b595de6654532a9614e0890c8346eb1487a1,"Expose the Message, Exception, and ErrorCode properties of OnlyOnceErrorHandler. When an appender makes use of an OnlyOnceErrorHandler, allow the values that were written to the error handler to be inspected.","Fix for LOG4NET-96. Added EnabledDate, ErrorCode, ErrorMessage, and Exception properties to track when an OnlyOnceErrorHandler becomes active. Added Reset method which disables the error handler thus allowing it to become active again.", MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler if OnlyOnceErrorHandler Reset OnlyOnceErrorHandler Error OnlyOnceErrorHandler if OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error
0,LOG4NET-117,d78a5f8331dad60de277fecda43205412ccb464a,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-466,201ad1ae3ced298e77469f99e548244a7f772b06,"""LockRecursionException: A read lock may not be acquired with the write lock held in this mode."" exception I'm getting this exception when trying to call ILog.Error() method (the logger used is RollingFileAppender):

log4net:ERROR Exception while logging
System.Threading.LockRecursionException: A read lock may not be acquired with the write lock held in this mode.
   at System.Threading.ReaderWriterLockSlim.TryEnterReadLockCore(TimeoutTracker timeout)
   at System.Threading.ReaderWriterLockSlim.TryEnterReadLock(TimeoutTracker timeout)
   at System.Threading.ReaderWriterLockSlim.EnterReadLock()
   at log4net.Util.ReaderWriterLock.AcquireReaderLock()
   at log4net.Repository.Hierarchy.Logger.CallAppenders(LoggingEvent loggingEvent)
   at log4net.Repository.Hierarchy.Logger.ForcedLog(Type callerStackBoundaryDeclaringType, Level level, Object message, Exception exception)
   at log4net.Repository.Hierarchy.Logger.Log(Type callerStackBoundaryDeclaringType, Level level, Object message, Exception exception)

Any ideas why it might be happening?","LOG4NET-554 Use AsyncLocal for LogicalThreadContext

Patch by Thomas Clegg.

closes #52", MODIFY log4net.tests.xproj MODIFY project.json MODIFY log4net.xproj MODIFY project.json MODIFY LoggingEvent.csLoggingEvent CreateCompositeProperties LoggingEvent if MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties GetProperties LogicalThreadContextProperties GetLogicalProperties LogicalThreadContextProperties GetCallContextData LogicalThreadContextProperties Clear LogicalThreadContextProperties Remove LogicalThreadContextProperties SetCallContextData LogicalThreadContextProperties SetLogicalProperties MODIFY PropertyPatternConverter.csPropertyPatternConverter Convert MODIFY framework-support.xml MODIFY LogicalThreadContextTest.cs MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-38,8400fecdd81394a86d4192889446d40678dcfb90,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-100,9f1b0f4d9ca956aea2d201515d3a143c47a0f309,"IPAddressConverter improvement for .NET 2 or .NET 3 log4net.Util.TypeConverters.IPAddressConverter uses only DNS query to get the IP address.
But it may not convert an IP-address text properly especially on .NET 3.0.
(Try Dns.GetHostEntry(""127.0.0.1"") on Vista. It returns some IPv4 and IPv6 addresses.)

If you want to convert IP-address text directly, you should use IPAddress.Parse() or IPAddress.TryParse().
You can also use Dns.GetHostAddresses(). It converts IP address properly.
It would be better on .NET3.  In .NET2, it seems not recognize IPv6 address.

Here is a patch.

===================================================================
--- IPAddressConverter.cs	(revision 468656)
+++ IPAddressConverter.cs	(working copy)
@@ -77,8 +77,12 @@
 				try
 				{
 #if NET_2_0
+					// Try to parse the string as an IP address.
+					IPAddress addr;
+					if (IPAddress.TryParse(str, out addr))
+						return addr;
+
 					// Try to resolve via DNS. This is a blocking call. 
-					// GetHostEntry works with either an IPAddress string or a host name
 					IPHostEntry host = Dns.GetHostEntry(str);
 					if (host != null && 
 						host.AddressList != null && 
",LOG4NET-111: Project metadata for projects.apache.org, ADD doap_log4net.rdf
0,LOG4NET-212,5b2160524efa38a35a82ffdaf0aec0c07ce44e22,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",Allow default value for event id to be specified via configuration.  LOG4NET-214, MODIFY EventLogAppender.csEventLogAppender Append
1,LOG4NET-246,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"Make it possible to choose whether or not to watch configuration files specified using the ""log4net.Config"" appsetting key  Currently (v1.2.10) it is possible to specify a configuration file for log4net by adding a key like this in the host application's configuration <appSettings> section:
<add key=""log4net.Config"" value=""Log.config"" />

This defaults to invoking XmlConfigurator.Configure() on the file specified (log4net/Core/DefaultRepositorySelector.cs,  line 725). This means the file is not watched for changes during program run time.

It would be nice if there was some way similar to the above <appSettings> key to specify whether log4net should watch the file or not.

I might propose that a new key is introduced in this fashion:
<add key=""log4net.Config.Watch"" value=""true"" />

This key would denote a bool value defaulting to false. The value would only be taken into consideration if the ""log4net.Config"" key is specified.",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-495,d0ff4a82e278479dcc621c21ef6b4529d7ff55be,"Error when BufferSize is >1, parameter already defined Downloaded the subject revision 1714197 in order to get the ADONetAppender_SqlServer appender to work as this revision corrected a problem. The appender began to work. However if the BufferSize was increased to >1 an error was reported that the parameter @log_date was already defined.

The error appears to be in SendBuffer. Because the IDbCommand dbCmd is being reused inside the foreach (LoggingEvent e in Events), each time the param.Prepare(dbCmd) is called for the same appender it will attempt to add a parameter that has already been added.

My local solution was to clear the commands parameter list prior to adding the preparing the paramters:
   foreach (LoggingEvent e in events)
                    {
                            dbCmd.Parameters.Clear(); //*****added this line*****

                        // Set the parameter values
                        foreach (AdoNetAppenderParameter param in m_parameters)
                        {
                            param.Prepare(dbCmd);
                            param.FormatValue(dbCmd, e);
                        }

                        // Execute the query
                        dbCmd.ExecuteNonQuery();
                    }


",LOG4NET-495: clear parameters when flushing multiple events, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
0,LOG4NET-212,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-60,be8cee00caa2c20ccbe5b59ad48dddc7fe3ebff9,"Bug in RollingFileAppender.cs causing failure to timely roll files on monthly interval code in said file looks like this

				case RollPoint.TopOfMonth:
					current = current.AddMilliseconds(-current.Millisecond);
					current = current.AddSeconds(-current.Second);
					current = current.AddMinutes(-current.Minute);
					current = current.AddHours(-current.Hour);
					current = current.AddMonths(1);
					break;

i belive it should look something like this

				case RollPoint.TopOfMonth:
					current = current.AddMilliseconds(-current.Millisecond);
					current = current.AddSeconds(-current.Second);
					current = current.AddMinutes(-current.Minute);
					current = current.AddHours(-current.Hour);
					current = current.AddDays(1 - current.Day);      // this line seems to be needed
					current = current.AddMonths(1);
					break;



also in a separate issue, since there is no RollPoint.TopOfYear, this comment in another part of the code seems wrong:

				//is the new file name equivalent to the 'current' one
				//something has gone wrong if we hit this -- we should only
				//roll over if the new file will be different from the old
				string dateFormat = m_now.ToString(m_datePattern, System.Globalization.DateTimeFormatInfo.InvariantInfo);
				if (m_scheduledFilename.Equals(File + dateFormat)) 
				{
					ErrorHandler.Error(""Compare "" + m_scheduledFilename + "" : "" + File + dateFormat);
					return;
				}

if the date pattern specifies only the year (rolling yearly), then i think this ""error"" will be triggered incorrectly 11 times a year. it's fine not to roll, but reporting an error is inappropriate.
",Part for fix for LOG4NET-60. Missed out important line from patch. The Days are 1 based not 0 based., MODIFY RollingFileAppender.csRollingFileAppender NextCheckDate
0,LOG4NET-296,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Patch for .net 4, client profile and a fix for the name resolution bug  ","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-275,e1c9c3b7bb26b3564062859a86b38b793048548a,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-229,e1c9c3b7bb26b3564062859a86b38b793048548a,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-228,26060334da4fc07c5f768da5a1f7a647a70de42b,log4net.Util.HostName may throw System.Configuration.ConfigurationErrorsException in System.Net.Dns.GetHostName(). The exception should be ignored.  ,"LOG4NET-342 added the property Configured to ILog that allows to check if the repository was configured properly

Usecase:
   if (log.Configured == false) 
   { 
      throw new ConfigurationErrorsException(""Log4net failed to initialize properly.""); 
   }", MODIFY LogImpl.cs MODIFY ILog.cs
0,LOG4NET-310,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-212,8400fecdd81394a86d4192889446d40678dcfb90,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-73,debba6201326ec2cfb7bdd8613f12fe3d212e418,"ADONetAppender.ActivateOptions() leaks database connection when called multiple times ADONetAppender.ActivateOptions() calls InitializeDatabaseConnection. This method does not check if the m_dbConnection is already initialised. If it is initialise then it will beleaked.

Update InitializeDatabaseConnection to check and close the connection if not null.","Fix for LOG4NET-72. Moved String.Format call into separate class SystemStringFormat. This class holds the format string and arguments and only performs the String.Format when its ToString method is called.
Added simple test to ensure that the String.Format methods are working correctly and error handling correctly.
Updated the tests project nant.build to copy shared libs into the build output directory.", MODIFY LogImpl.csLogImpl DebugFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl FatalFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl WarnFormat LogImpl WarnFormat ADD SystemStringFormat.csSystemStringFormat ToString SystemStringFormat StringFormatError SystemStringFormat StringFormat SystemStringFormat RenderObject SystemStringFormat SystemStringFormat SystemStringFormat RenderArray MODIFY Transform.csTransform RenderArray Transform StringFormatError Transform RenderObject Transform StringFormat MODIFY log4net.csproj ADD prerequisites.txt MODIFY nant.build ADD StringFormatTest.csStringFormatTest TestThreadPropertiesPattern MODIFY log4net.Tests.csproj
1,LOG4NET-456,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,Include debug symbol files in release  packages It would be nice if the pdb files for log4net releases would be available. It would make debugging log4net source easier by just dropping in the symbol file,LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-13,6586b155fe474144ba918de90e9769780234a1e5,"Allow SMTPAppender to have replaceable parameters in Subject It would be helpful to be able to have parameters that
are replaced on a per-log event basis on the Subject
line for the SMTPAppender.

Example:
I have multiple web servers running a .NET web service
and all use log4net. When an error occurs, they use the
SMTPAppender to notify me. It would be very useful to
include the host name of the sender in the subject line
so that I could easily determine which web server had
an error instead of having to look into the email.

In thinking more about this it could either be the
Subject line or the From line that has replacable
parameters. Perhaps even make it so that these
properties can use the <layout> tag.

Jeremy Wiebe - jeropa",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-529,d22513c1fdcc562644928bac3f3c6d575432df17,"Possible thread-safety bug in LoggingEvent From imspecting the code there appears to be a race condition if two threads call LoggingEvent.LookupProperty concurrently.  One thread may call CreateCompositeProperties and the other might access m_compositeProperties before it is fully created.

             public object LookupProperty(string key)
             {
                    if (m_data.Properties != null)
                    {
                           return m_data.Properties[key];
                    }
                    if (m_compositeProperties == null)
                    {
                           CreateCompositeProperties();
                    }
                    return m_compositeProperties[key];
             }
 
             private void CreateCompositeProperties()
             {
                    m_compositeProperties = new CompositeProperties();
 
                    if (m_eventProperties != null)
                    {
                           m_compositeProperties.Add(m_eventProperties);
                    }
                    ... etc
","LOG4NET-526 tests for AppSettingPatternConverter by JocularJoe, closes #39", MODIFY PatternStringTest.csPatternStringTest CreateConfiguredDomain PatternStringTest CreateTempConfigFile PatternStringTest TestAppSettingPathConverter PatternStringTest TestAppSettingPathConverterInConfiguredDomain
1,LOG4NET-28,c6020695ff2b8a2b3e5b57302294044a3fac161b,"AdoNetAppender does not support inserting NULL into columns The AdoNetAppender does not support inserting NULL values into columns.

If a column allows NULL values then the AdoNetAppender should allow NULL values to be inserted. For most value types this means using the DBNull value for the parameter. The AdoNetAppenderParameter should convert CLI null values into DBNull values before setting the parameter value.",Fix for LOG4NET-28. AdoNetAppender does not support inserting NULL into columns, MODIFY AdoNetAppender.csAdoNetAppenderParameter FormatValue
0,LOG4NET-76,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-212,702b0775760b413eee77c86d855f94e6c77316e4,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",no longer needed now that content has been migrated to mvn site.  LOG4NET-117, DELETE contributing.html DELETE site.css DELETE style.css DELETE downloads.html DELETE history.html DELETE index.html DELETE license.html DELETE building.html DELETE config-examples.html DELETE example-apps.html DELETE faq.html DELETE features.html DELETE framework-support.html DELETE chainsaw.html DELETE index.html DELETE configuration.html DELETE contexts.html DELETE internals.html DELETE introduction.html DELETE plugins.html DELETE repositories.html DELETE release-notes.html DELETE roadmap.html DELETE support.html DELETE build.xml DELETE ant-1.4.1.jar DELETE commons-collections-2.0.jar DELETE jdom-b8.jar DELETE log4j-1.1.3.jar DELETE velocity-1.4-dev.jar DELETE xerces-1.4.4.jar DELETE contributing.xml DELETE downloads.xml DELETE history.xml DELETE index.xml DELETE license.xml DELETE building.xml DELETE config-examples.xml DELETE example-apps.xml DELETE faq.xml DELETE features.xml DELETE framework-support.xml DELETE chainsaw.xml DELETE index.xml DELETE configuration.xml DELETE contexts.xml DELETE internals.xml DELETE introduction.xml DELETE plugins.xml DELETE repositories.xml DELETE release-notes.xml DELETE roadmap.xml DELETE project.xml DELETE site.vsl DELETE support.xml
0,LOG4NET-265,73a4921de015d4262273055b04ea37206a224038,"RemoteFileAppender Tests fail on Windows 7 Compiled the version of log4net in the repository and ran the unit tests. All of the RemotingAppenderTests fail. Enabling internal logging gives the following error.

log4net:ERROR [RemotingAppender] ErrorCode: GenericFailure. Failed in SendBufferCallback
System.Runtime.Serialization.SerializationException: Because of security restrictions, the type System.Runtime.Remoting.ObjRef cannot be accessed. ---> System.Security.SecurityException: Request failed.
   at System.Runtime.Serialization.FormatterServices.nativeGetSafeUninitializedObject(RuntimeType type)
   at System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject(Type type)
The action that failed was:
Demand
The type of the first permission that failed was:
System.Security.Permissions.SecurityPermission
The first permission that failed was:
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""Infrastructure""/>

The demand was for:
<PermissionSet class=""System.Security.PermissionSet""
version=""1"">
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""Infrastructure""/>
</PermissionSet>

The only permitted permissions were:
<PermissionSet class=""System.Security.PermissionSet""
version=""1"">
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""SerializationFormatter""/>
</PermissionSet>

The method that caused the failure was:
System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream, System.Runtime.Remoting.Messaging.IMessage ByRef, System.Runtime.Remoting.Channels.ITransportHeaders ByRef, System.IO.Stream ByRef)
",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-344,882c76682c15726e6101b944d04cd6998a264e3d,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",LOG4NET-376 use ThreadStatic for cache of formatted times, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter if AbsoluteTimeDateFormatter FormatDate
0,LOG4NET-215,8abe90a8efc15a0770dfa9253d54d18c891cec65,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Allow EventId to be specified by a property that is neither a string nor an int in EventLogAppender.  LOG4NET-129, MODIFY EventLogAppender.csEventLogAppender Append
0,LOG4NET-36,b118bfdd67abb332332b405321d9b2ce6e35405a,"System.Diagnostics.Trace may throw exception if AppDomain does not have config file System.Diagnostics.Trace may throw exception if AppDomain does not have config file.

If the AppDomain has been created programmatically it is possible that it does not have a config file set. It has been reported that an exception can be generated on certain platforms in this situation.

The exception is:


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. --->
System.TypeInitializationException: The type initializer for ""D2L.Mail.MailService"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Core.LoggerManager"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Util.LogLog"" threw an exception. --->
System.NullReferenceException: Object reference not set to an instance of an object.

   at System.Configuration.ConfigurationSettings.GetConfig(String sectionName)
   at System.Diagnostics.DiagnosticsConfiguration.GetConfigTable()
   at System.Diagnostics.DiagnosticsConfiguration.Initialize()
   at System.Diagnostics.DiagnosticsConfiguration.get_IndentSize()
   at System.Diagnostics.TraceInternal.InitializeSettings()
   at System.Diagnostics.TraceInternal.get_Listeners()
   at System.Diagnostics.TraceInternal.WriteLine(String message)
   at System.Diagnostics.Trace.WriteLine(String message)
   at log4net.Util.LogLog.Error(String message, Exception exception)
   at log4net.Util.LogLog..cctor()

   --- End of inner exception stack trace ---

   at log4net.Util.LogLog.Debug(String message)
   at log4net.Core.LoggerManager..cctor()

   --- End of inner exception stack trace ---

   at log4net.Core.LoggerManager.GetLogger(Assembly
repositoryAssembly, String name)
   at log4net.LogManager.GetLogger(Type type)
   at D2L.Mail.MailService..cctor()

   --- End of inner exception stack trace ---

   --- End of inner exception stack trace ---
",Applied patch for LOG4NET-34 Allow xml config values to be set via XmlNodeType.CDATA or XmlNodeType.Text rather than just value=xxx, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
0,LOG4NET-13,21c34f7153387912a991692eaf1f32fe82ec9492,"Allow SMTPAppender to have replaceable parameters in Subject It would be helpful to be able to have parameters that
are replaced on a per-log event basis on the Subject
line for the SMTPAppender.

Example:
I have multiple web servers running a .NET web service
and all use log4net. When an error occurs, they use the
SMTPAppender to notify me. It would be very useful to
include the host name of the sender in the subject line
so that I could easily determine which web server had
an error instead of having to look into the email.

In thinking more about this it could either be the
Subject line or the From line that has replacable
parameters. Perhaps even make it so that these
properties can use the <layout> tag.

Jeremy Wiebe - jeropa",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-117,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-275,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-443,cca252c3090b1e8091d61ffdd0e97835146db31a,"Logger.CallAppenders I do have an .NET application (Windows Service) that collects data from a lot of sources (DBs, log files, machines event logs, ...) and uses Log4Net to log details of the actions / execution.  As expected, I'm using a high number of threads to collect data, threads that are writing logs in some files (RollingFileAppenderer).

Lately it happens that the entire application is BLOCKED because all threads were trying to acquire a read lock, like in the stack trace:
000000001ac3d998 00000000774715fa [HelperMethodFrame: 000000001ac3d998] System.Threading.Thread.SleepInternal(Int32)
000000001ac3da90 000007fef747b5e9 System.Threading.Thread.Sleep(Int32)
000000001ac3dac0 000007fef5fb9631 System.Threading.ReaderWriterLockSlim.EnterMyLockSpin()
000000001ac3db90 000007fef5cd297e System.Threading.ReaderWriterLockSlim.TryEnterReadLockCore(TimeoutTracker)
000000001ac3dbf0 000007fef5cd28fa System.Threading.ReaderWriterLockSlim.TryEnterReadLock(TimeoutTracker)
000000001ac3dc40 000007fe98fb4efd log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)
000000001ac3dcc0 000007fe98fb4907 log4net.Repository.Hierarchy.Logger.Log(System.Type, log4net.Core.Level, System.Object, System.Exception)
000000001ac3dd30 000007fe98fb47f9 log4net.Core.LogImpl.Info(System.Object)  

It's important to mention that my threads have a timeout, and if they do not finish the job in the given interval they are ABORTED.

Searching for a solution, I found a possible explanation of application hanging here: http://chabster.blogspot.ro/2013/07/a-story-of-orphaned-readerwriterlockslim.html",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
0,LOG4NET-215,c0112c4e84f1bd3491c230d71cd79df3c73f56a6,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Fix for LOG4NET-154. Added StackTracePatternConverter that outputs the methods called before the log message., MODIFY LocationInfo.csLocationInfo LocationInfo MODIFY PatternLayout.csPatternLayout PatternLayout MODIFY log4net.vs2005.csproj
0,LOG4NET-153,013cdb8fa04e3a3f4bf0543c90277de6a217b627,"Make it easier to configure multiple appenders in code using BasicConfigurator Users wanting to configure log4net in code using more than just a single appender must cast the repository into a Hierarchy then manually add elements:

 Repository.Hierarchy.Hierarchy hierarchy = 
     (Repository.Hierarchy.Hierarchy)LogManager.GetRepository();
 hierarchy.Root.AddAppender(alpha);
 hierarchy.Root.AddAppender(beta);
 hierarchy.Configured = true;

The BasicConfigurator should make it easier to accomplish this:

 BasicConfigurator.Configure(alpha, beta);

This can be accomplished by adding an overload to Configure that accepts an params IAppender[]:

 IBasicRepositoryConfigurator.Configure(params IAppender[] appenders)",Fix for LOG4NET-128. Explain the comma/semicolon differences between various versions of the Framework., MODIFY SmtpAppender.cs
0,LOG4NET-45,9e1ead9259bca8cc9b20678810d5703e5166fb16,"PluginAttribute does not allow plugin type to be specified as a Type, only as a string The PluginAttribute currently allows the plugin type to be specified as a string, for example:

[assembly: log4net.Config.Plugin(""log4net.Plugin.RemoteLoggingServerPlugin,log4net"")]

it should be possible to specify this as a type, for example:

[assembly: log4net.Config.Plugin(typeof(log4net.Plugin.RemoteLoggingServerPlugin))]",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-405,1874be5bbe7166a70b930e2df6887d84c86dd4d8,"SmtpAppender encoding changes After update to log4net 1.2.12 email encoding changed and my mail client
fail to render unicode symbols.
I think changes made for issue https://issues.apache.org/jira/browse/LOG4NET-354 brake encoding in SmtpAppender
log4net 1.2.10 use utf-8 encoding by default, below headers from email
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: base64
after update on log4net 1.2.12 email encoding koi8-r
Content-Type: text/plain; charset=koi8-r
Content-Transfer-Encoding: quoted-printable
I think change default encoding from utf-8 is pretty strange.

Proposed fix:
Do not use Encoding.Default, let SubjectEncoding and BodyEncoding by default be null, on email send set encoding only if field not null.",merge fix for LOG4NET-376 from 1.2.x branch, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-150,28fd893da50333c16d2b62100ea26a761f487ce0,"Cannot download log4net 1.2.10 from the site Cannot download any of the files listed on the site http://logging.apache.org/log4net/. I have tried with various browsers and I have asked others also to try, but all of the attempts were unsuccessful.",Fix for LOG4NET-153. Add overload to IBasicRepositoryConfigurator.Configure that accepts an array of IAppender objects instead of just a single IAppender., MODIFY BasicConfigurator.csBasicConfigurator Configure BasicConfigurator InternalConfigure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator InternalConfigure MODIFY Hierarchy.csHierarchy BasicRepositoryConfigure Hierarchy Configure Hierarchy Configure Hierarchy BasicRepositoryConfigure Hierarchy Configure MODIFY IBasicRepositoryConfigurator.cs MODIFY Hierarchy.csHierarchy AddingMultipleAppenders Hierarchy AddingMultipleAppenders2
0,LOG4NET-214,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-13,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"Allow SMTPAppender to have replaceable parameters in Subject It would be helpful to be able to have parameters that
are replaced on a per-log event basis on the Subject
line for the SMTPAppender.

Example:
I have multiple web servers running a .NET web service
and all use log4net. When an error occurs, they use the
SMTPAppender to notify me. It would be very useful to
include the host name of the sender in the subject line
so that I could easily determine which web server had
an error instead of having to look into the email.

In thinking more about this it could either be the
Subject line or the From line that has replacable
parameters. Perhaps even make it so that these
properties can use the <layout> tag.

Jeremy Wiebe - jeropa","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
0,LOG4NET-460,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-168,289a3f2a030c75e6fb0912f2c0c22021848d587c,"New property ReplyTo address for the SmtpAppender required log4net is often used in administrative utilities and used to send mails in case of errors. It is total unrealistic to assume each used mail-address really exists. Mostly ""virtual address"" are used, means:They do not have any pop3 mailbox. So, if sending mail fails from the smpt server, no user can be informed. A property, which allows to specify the ""reply-to"" address on the SmtpAppender would solve this problem.
",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
0,LOG4NET-275,9df9848f90c58c41f658b66c68178112eccc7c30,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-480,dd93053a04399b64ac57403e834658da6fa7d690,Fix lo4net testst run lo4net vs2008 tests fail because DOTNET is not defined.,"LOG4NET-479 fix vs2008 build, patch due to NN", MODIFY log4net.vs2008.csproj
0,LOG4NET-155,289a3f2a030c75e6fb0912f2c0c22021848d587c,"Add TimeEvaluator Hello,

I'd like to submit this class. I find it handy together with RemotingAppender (or buffering appenders generally) where we don't want to send synchronously, but still want to have some timely feedback from the sites even if there is little logging.

A sample configuration would be:

    <appender name=""RemotingAppender"" type=""log4net.Appender.RemotingAppender"">
      <param name=""Sink"" value=""tcp://localhost:11111/LoggingSink"" />
      <param name=""Lossy"" value=""false"" />
      <param name=""BufferSize"" value=""500"" />
      <param name=""Fix"" value=""Partial"" />
      <evaluator type=""log4net.Core.TimeEvaluator"">
        <threshold value=""60""/>
      </evaluator>
    </appender>

I've taken the existing LevelEvaluator from Nicko Cadell as a template to build this class.

I've tried it and it worked, but haven't done any further testing.

Best regards and thanks for the great works!
Robert.",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
0,LOG4NET-11,9e1ead9259bca8cc9b20678810d5703e5166fb16,"Add Flush command to API While using Buffering is a wonderful way to help improve
performance, I would like the ability to programatically
tell the current ILog object to flush any buffers that
exist on the appenders that I've been logging to so that
I can get any messages that I've sent rather than
waiting for the buffer to fill up.

Thus, one might be able to do the following:

""log.Flush();""

and then any messages sent to that ILog object would
be processed.

Kevin Conroy - kmconroy

----

I vote for this one too!

dcazzulino",Fix for LOG4NET-46. Added IBulkAppender interface. Added implementation to AppenderSkeleton and subclasses, MODIFY AsyncAppender.csAsyncAppender AsyncAppend AsyncAppender DoAppend MODIFY AppenderSkeleton.csAppenderSkeleton FilterEvent AppenderSkeleton Append AppenderSkeleton DoAppend AppenderSkeleton DoAppend MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton SendFromBuffer BufferingAppenderSkeleton SendBuffer BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Append MODIFY BufferingForwardingAppender.csBufferingForwardingAppender SendBuffer MODIFY FileAppender.csFileAppender Append MODIFY ForwardingAppender.csForwardingAppender Append ADD IBulkAppender.cs MODIFY RollingFileAppender.csRollingFileAppender Append RollingFileAppender Append RollingFileAppender AdjustFileBeforeAppend MODIFY TextWriterAppender.csTextWriterAppender Append TextWriterAppender Append MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend MODIFY log4net.csproj
0,LOG4NET-94,c6956a36942591b93ed3ec34d8a7316d09e1421b,"Incorrect config file for ..\examples\net\1.0\Tutorials\ConsoleApp The app.config file has some errors in it...


Line 39

is...
<sppendToFile value=""true"" />

should be...
<appendToFile value=""true"" />


Line 43

is...
<geader value=""[Header]&#13;&#10;"" />

should be...
<header value=""[Header]&#13;&#10;"" />



Line 87

is...
<commandText"" value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />

should be...
<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />



Line 94

is...
</param>

should be...
</layout>


-- Jeff Hegedus:  Corrected xml below ---

<?xml version=""1.0"" encoding=""utf-8"" ?>
<!-- 
		.NET application configuration file     
		This file must have the exact same name as your application with .config appended to it. 
		
		For example if your application is ConsoleApp.exe then the config file must be ConsoleApp.exe.config. 
		It must also be in the same directory as the application. 
	-->
<configuration>
	<!-- Register a section handler for the log4net section -->
	<configSections>
		<section name=""log4net"" type=""System.Configuration.IgnoreSectionHandler"" />
	</configSections>
	<appSettings>
		<!-- To enable internal log4net logging specify the following appSettings key -->
		<!-- <add key=""log4net.Internal.Debug"" value=""true""/> -->
	</appSettings>
	<!-- This section contains the log4net configuration settings -->
	<log4net>
		<!-- Define some output appenders -->
		<appender name=""RollingLogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file value=""rolling-log.txt"" />
			<appendToFile value=""true"" />
			<maxSizeRollBackups value=""10"" />
			<maximumFileSize value=""100"" />
			<rollingStyle value=""Size"" />
			<staticLogFileName value=""true"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<appender name=""LogFileAppender"" type=""log4net.Appender.FileAppender"">
			<file value=""log-file.txt"" />
			<!-- Example using environment variables in params -->
			<!-- <file value=""${TMP}\log-file.txt"" /> -->
			<appendToFile value=""true"" />
			<!-- An alternate output encoding can be specified -->
			<!-- <encoding value=""unicodeFFFE"" /> -->
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
			<!-- Alternate layout using XML			
			<layout type=""log4net.Layout.XMLLayout"" /> -->
		</appender>
		<appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"">
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
		</appender>
		<appender name=""NetSendAppender"" type=""log4net.Appender.NetSendAppender"">
			<threshold value=""ERROR"" />
			<server value=""IN27WS024728"" />
			<recipient value=""jhegedus2"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<!-- Example of how to configure the AdoNetAppender		
		<appender name=""AdoNetAppender"" type=""log4net.Appender.AdoNetAppender"" >			
			<connectionString value=""Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"" />
			<layout type=""log4net.Layout.PatternLayout"">				
				<conversionPattern value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES ('%date','%thread','%level','%logger','%message')"" />
			</layout>
		</appender> 
		-->
		<!-- 
		<appender name=""A"" type=""log4net.Appender.ForwardingAppender"" >
			<threshold value=""WARN""/>			
			<appender-ref ref=""ConsoleAppender"" />		
		</appender>
		<appender name=""B"" type=""log4net.Appender.ForwardingAppender"" >
			<filter type=""log4net.Filter.LevelRangeFilter"">
				<levelMin value=""DEBUG""/>
				<levelMax value=""INFO""/>
			</filter>
			<appender-ref ref=""ConsoleAppender"" />
		</appender> 
		-->
		<!-- Example of how to configure the AdoNetAppender to connect to MS Access -->
		<appender name=""ADONetAppender_Access"" type=""log4net.Appender.AdoNetAppender"">
			<connectionString value=""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""1024"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Example of how to configure the AdoNetAppender to connect to MS SQL Server -->
		<appender name=""ADONetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
			<bufferSize value=""1"" />
			<connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
			<connectionString value=""data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""DateTime"" />
				<!-- 
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
				</layout> 
				-->
				<layout type=""log4net.Layout.RawTimeStampLayout"" />
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""4000"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value=""WARN"" />
			<appender-ref ref=""LogFileAppender"" />
			<appender-ref ref=""ConsoleAppender"" />
			<!-- <appender-ref ref=""ADONetAppender_SqlServer"" /> -->
			<appender-ref ref=""NetSendAppender"" />
			<!-- <appender-ref ref=""A"" /> -->
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name=""ConsoleApp.LoggingExample"">
			<!-- <appender-ref ref=""B"" /> -->
			<level value=""ALL"" />
			<appender-ref ref=""RollingLogFileAppender"" />
		</logger>
	</log4net>
</configuration>",Fix for LOG4NET-95: Replaced subtraction operator used to compare internal Level values with System.Int32's CompareTo to avoid possible overflow issues. All tests continue to pass., MODIFY Level.csLevel Compare
0,LOG4NET-35,6ce3f56a402faab37b1f0b4da477e8ce67ed68d4,"Exception rendering ThreadContextStack if null value pushed into stack If a null value is pushed into a ThreadContext stack then an internal log4net error is generated when the ThreadContextStack is rendered.
The following error and stack trace are output into the log:

<log4net.Error>Exception rendering object type [log4net.Util.ThreadContextStack]<stackTrace>System.NullReferenceException: Object reference not set to an instance of an object.
   at log4net.Util.StackFrame.get_FullMessage()
   at log4net.Util.ThreadContextStack.GetFullMessage()
   at log4net.Util.ThreadContextStack.ToString()
   at log4net.ObjectRenderer.DefaultRenderer.RenderObject(RendererMap rendererMap, Object obj, TextWriter writer)
   at log4net.ObjectRenderer.RendererMap.FindAndRender(Object obj, TextWriter writer)</stackTrace></log4net.Error>",Fix for LOG4NET-36 System.Diagnostics.Trace may throw exception if AppDomain does not have config file. Added try catch blocks, MODIFY LogLog.csLogLog EmitErrorLine LogLog EmitOutLine
0,LOG4NET-129,09f7293056e8abf36655537318384e9bd0ff5c9e,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-76,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-232,b13c1fdd8d87877cdcfa6eb8c01555bf15d267b9,"Use ReaderWriterLockSlim instead of ReaderWriterLock. ReaderWriterLock should be replaced with ReaderWriterLockSlim according to Microsoft for performance and simplification reasons.

MSDN: http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock.aspx

The .NET Framework has two reader-writer locks, ReaderWriterLockSlim and ReaderWriterLock. ReaderWriterLockSlim is recommended for all new development. ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlim avoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than ReaderWriterLock. ",LOG4NET-226 added catch ObjectDisposedException clause as suggested by Johannes Krackowizer and confirmed by Ron Grabowski, MODIFY LoggingEvent.csLoggingEvent if
0,LOG4NET-44,21c34f7153387912a991692eaf1f32fe82ec9492,"XmlLayout emits all properties under a node named global-properties, rather than just properties. The global-properties name is incorrect as all properties for the event are included. The node name should be changed to properties.",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-310,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-157,10eb59431deedcdaedc9d9f13684cf1ba9e67e03,"FAQ for getting the fully-qualified name of a class The FAQ here--

http://logging.apache.org/log4net/release/faq.html

states that the following are equivalent ways to obtain a logger:

(1) private static readonly ILog log = LogManager.GetLogger(typeof(Foo));

(2) private static readonly ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

However, these constructs seem to behave differently when the classes involved are generic.  When generic classes are involved, I believe the former generates a different logger for each type parameter combination, while the latter generates a different logger if and only if the number of type parameters is different.

For example,

TestClass<T, S> can yield ""TestClass`2[[System.Int32..."" in the former case and ""TestClass`2"" in the latter.

","MutexLock => InterProcessLock.  Document it, discourage its use.  LOG4NET-164", MODIFY FileAppender.cs MODIFY config-examples.xml MODIFY faq.xml MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestInterProcessLockUnlocks RollingFileAppenderTest TestInterProcessLockRecovers RollingFileAppenderTest TestMutexLockFails RollingFileAppenderTest TestInterProcessLockFails RollingFileAppenderTest TestMutexLockUnlocks
0,LOG4NET-117,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-229,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-296,09f7293056e8abf36655537318384e9bd0ff5c9e,"Patch for .net 4, client profile and a fix for the name resolution bug  ","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-215,73bdae467e39a9082d1a6dad3d2d5d26995b2a95,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Race-Condition via shared StringBuilder in ReusableStringWriter.   LOG4NET-212, MODIFY AppenderSkeleton.csAppenderSkeleton RenderLoggingEvent MODIFY PatternConverter.csPatternConverter Format
0,LOG4NET-71,cca252c3090b1e8091d61ffdd0e97835146db31a,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
0,LOG4NET-460,dbe0f89a38f6fca026d8d78ab59f23009cde8443,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-443 prevent orphaned locks with ReaderWriterLockSlim in the face of aborted threads, MODIFY ReaderWriterLock.csReaderWriterLock AcquireReaderLock ReaderWriterLock AcquireWriterLock
1,LOG4NET-495,dde8e48d7743ae4d56ed1b755c76fffb132f4479,"Error when BufferSize is >1, parameter already defined Downloaded the subject revision 1714197 in order to get the ADONetAppender_SqlServer appender to work as this revision corrected a problem. The appender began to work. However if the BufferSize was increased to >1 an error was reported that the parameter @log_date was already defined.

The error appears to be in SendBuffer. Because the IDbCommand dbCmd is being reused inside the foreach (LoggingEvent e in Events), each time the param.Prepare(dbCmd) is called for the same appender it will attempt to add a parameter that has already been added.

My local solution was to clear the commands parameter list prior to adding the preparing the paramters:
   foreach (LoggingEvent e in events)
                    {
                            dbCmd.Parameters.Clear(); //*****added this line*****

                        // Set the parameter values
                        foreach (AdoNetAppenderParameter param in m_parameters)
                        {
                            param.Prepare(dbCmd);
                            param.FormatValue(dbCmd, e);
                        }

                        // Execute the query
                        dbCmd.ExecuteNonQuery();
                    }


",LOG4NET-495: adjusted the way how the parameters are cleared so that the AdoNetAppender tests pass, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
1,LOG4NET-559,2781b83bd1ef3a15dd7b0f17934fdbf22a691a35,"Custom Appender throws exception to user when I use %type in ConversionPattern When I setup my custom appender, I use the following ConversionPattern:

  <layout type=""log4net.Layout.PatternLayout"">
        <param name=""ConversionPattern"" value=""%m%n&#13;&#10;%type"" />
   </layout>

In my custom appender's ""Append()"" method, the ""RenderLoggingEvent"" is throwing the exception below
Here's how I am calling the RenderLoggingEvent method:

 protected override void Append(LoggingEvent loggingEvent) {
       ...       
                var text = RenderLoggingEvent(loggingEvent);
       ...
 }
       
Here is the exception I am getting:

System.NullReferenceException was unhandled by user code
  HResult=-2147467261
  Message=Object reference not set to an instance of an object.
  Source=log4net
  StackTrace:
       at log4net.Layout.Pattern.TypeNamePatternConverter.GetFullyQualifiedName(LoggingEvent loggingEvent) in c:\log4net\tags\2.0.7RC1\src\Layout\Pattern\TypeNamePatternConverter.cs:line 51
       at log4net.Layout.Pattern.NamedPatternConverter.Convert(TextWriter writer, LoggingEvent loggingEvent) in c:\log4net\tags\2.0.7RC1\src\Layout\Pattern\NamedPatternConverter.cs:line 125
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in c:\log4net\tags\2.0.7RC1\src\Util\PatternConverter.cs:line 173
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in c:\log4net\tags\2.0.7RC1\src\Layout\PatternLayout.cs:line 1117
       at log4net.Appender.AppenderSkeleton.RenderLoggingEvent(LoggingEvent loggingEvent) in c:\log4net\tags\2.0.7RC1\src\Appender\AppenderSkeleton.cs:line 705
       at MyAppender.MyAppender.Append(LoggingEvent loggingEvent) in E:\svn\trunk\MyAppender\MyAppender.cs:line 67
       at log4net.Appender.AppenderSkeleton.DoAppend(LoggingEvent loggingEvent) in c:\log4net\tags\2.0.7RC1\src\Appender\AppenderSkeleton.cs:line 317
  InnerException: 

",TypeNamePatternConverter: added a safety net of null checks to avoid null reference exceptions [LOG4NET-559], MODIFY TypeNamePatternConverter.csTypeNamePatternConverter GetFullyQualifiedName
1,LOG4NET-341,d68a3ab28f137926263ba0e502abd77b3caeb70b,"RemotingAppender Error I have a solution with a console application (.Net 4 and log4net v1.2.11) which implement the Remoting sink - server side. And a WPF or WindowsForms application - client side. The framework version on the client side doesn't matter. But the log4net version is different. On v1.2.10 anything is ok. When I reference the client with v1.2.11 throw this error: 

log4net:ERROR [RemotingAppender] ErrorCode: GenericFailure. Failed in SendBufferCallback
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileNotFoundException: Could not load file or assembly 'WpfTestApplication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Das System kann die angegebene Datei nicht finden.
   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)
   at System.Reflection.Assembly.Load(String assemblyString)
   at System.Runtime.Serialization.FormatterServices.LoadAssemblyFromString(String assemblyName)
   at System.Reflection.MemberInfoSerializationHolder..ctor(SerializationInfo info, StreamingContext context)
   --- End of inner exception stack trace ---

Server stack trace: 
   at System.RuntimeMethodHandle._SerializationInvoke(IRuntimeMethodInfo method, Object target, SignatureStruct& declaringTypeSig, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.CompleteISerializableObject(Object obj, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.FixupSpecialObject(ObjectHolder holder)
   at System.Runtime.Serialization.ObjectManager.DoFixups()
   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Remoting.Channels.CoreChannel.DeserializeBinaryRequestMessage(String objectUri, Stream inputStream, Boolean bStrictBinding, TypeFilterLevel securityLevel)
   at System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
   at log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(LoggingEvent[] events)
   at log4net.Appender.RemotingAppender.SendBufferCallback(Object state)
",LOG4NET-341 fix location info to not contain a reference to StackFrame any more, MODIFY LocationInfo.csLocationInfo LocationInfo ADD MethodItem.csMethodItem MethodItem MethodItem MethodItem MethodItem GetMethodParameterNames MethodItem MethodItem MethodItem MethodItem ADD StackFrameItem.csStackFrameItem StackFrameItem MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate MODIFY StackTraceDetailPatternConverter.csStackTraceDetailPatternConverter GetMethodInformation StackTraceDetailPatternConverter GetMethodParameterNames StackTraceDetailPatternConverter GetMethodInformation MODIFY StackTracePatternConverter.csStackTracePatternConverter GetMethodInformation StackTracePatternConverter Convert StackTracePatternConverter GetMethodInformation MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj
0,LOG4NET-242,73a4921de015d4262273055b04ea37206a224038,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-17,6de62c784acb8c0499ea3b7b84b34bff956a4e6a,"Line-wrapping Appender Layouts I think a line-wrapping layout, or a line-wrapping version
or extension of one or more of the current layouts (or a
way to decorate or extend one of the current layouts....)
would be very useful. Such a layout could take a
threshold that is the number of chars that is the
maximum length for a line, as well as an indentation
amount for leading space characters for the indented
lines. I'm sure one could easily imagine more
complicated things it could do....

Given time, I might be interested in contributing to such
an addition.

regards,

carl",Fix for LOG4NET-11. Added a Flush(true) method that will flush the lossy buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton OnClose BufferingAppenderSkeleton Flush MODIFY CyclicBuffer.csCyclicBuffer PopAll CyclicBuffer Clear
0,LOG4NET-485,652101924faf9232b4a4c8388632619ad1447d9a,"RollingFileAppender cannot be used by multiple process RollingFileAppender doesn't acquire lock when rolling takes place.
As a consequence running multiple instances of the same program rewrites the same log file instead of making a roll for everyone.

There is FileAppender.InterProcessLock but it only protects writes and not rolls.",LOG4NET-486: adapted Simon Clarks idea to correctly detect file names when maxSizeRollBackups and datePattern is used, MODIFY RollingFileAppender.csRollingFileAppender GetWildcardPatternForFile
0,LOG4NET-228,b13c1fdd8d87877cdcfa6eb8c01555bf15d267b9,log4net.Util.HostName may throw System.Configuration.ConfigurationErrorsException in System.Net.Dns.GetHostName(). The exception should be ignored.  ,LOG4NET-226 added catch ObjectDisposedException clause as suggested by Johannes Krackowizer and confirmed by Ron Grabowski, MODIFY LoggingEvent.csLoggingEvent if
0,LOG4NET-38,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-106,674ee22c3559786e2f28f0e84e4670d46f72a791,"TraceAppender : Add switch to disable using logger name as trace category TraceAppender now always put logger name as trace category when writing to System.Diagnostics.Trace.Write
ie. :
System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);

This resulted in logger's name appearing twice in Trace logs if once use/share the same conversion for both file-based and trace appenders, eg.
""%date [%thread] %-5level %logger - %message%""

It would be nice to have a settable property on TraceAppender to disable using logger's name as trace category, ie. :

public bool UseLoggerNameAsTraceCategory
{
get; set;
}

...
if (m_useLoggerNameAsTraceCategory)
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);
}
else
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), null);
}





",Fix for LOG4NET-88. Added ConnectionStringName and AppSettingsKey properties to make it easier to use connection strings stored in well-known locations., MODIFY AdoNetAppender.csAdoNetAppender ResolveConnectionString AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-215,d78a5f8331dad60de277fecda43205412ccb464a,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-310,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-38,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-290,d7aef22dc64061a2bffbfc616746b5ebef46e0fe,"Add Lambda-based ILog-Extensions (embedded log.IsEnabled) This statement:
    if (log.IsDebugEnabled) log.DebugFormat(""x: {0}"", 123)

Could be nicely shortened to:
    log.Debug( m=>m(""value= {0}"", obj.Value) );

I'm already apache committer (NPanday Incubator Project) and would be happy to help with this interface. The simplest thing would be to offer it as static Extension-Methods to ILog.","LOG4NET-290 added an ILog extension that wraps the most common logging statements in a central place

Basically statements like these:
if (log.IsDebugEnabled) log.DebugFormat(""x: {0}"", 123)

can now be shortened to:
log.DebugExt(""x: {0}"", 123)", MODIFY log4net.build ADD ILogExtensions.csILogExtensions InfoFormatExt ILogExtensions ErrorExt ILogExtensions InfoExt ILogExtensions FatalFormatExt ILogExtensions ErrorFormatExt ILogExtensions DebugFormatExt ILogExtensions WarnFormatExt ILogExtensions FatalExt ILogExtensions InfoExt ILogExtensions WarnExt ILogExtensions DebugFormatExt ILogExtensions FatalFormatExt ILogExtensions DebugFormatExt ILogExtensions WarnFormatExt ILogExtensions InfoExt ILogExtensions DebugFormatExt ILogExtensions WarnFormatExt ILogExtensions DebugExt ILogExtensions ErrorFormatExt ILogExtensions ErrorFormatExt ILogExtensions FatalFormatExt ILogExtensions DebugExt ILogExtensions InfoFormatExt ILogExtensions DebugExt ILogExtensions InfoExt ILogExtensions InfoFormatExt ILogExtensions WarnFormatExt ILogExtensions ErrorExt ILogExtensions ErrorExt ILogExtensions FatalFormatExt ILogExtensions WarnExt ILogExtensions FatalExt ILogExtensions ErrorFormatExt ILogExtensions WarnExt ILogExtensions DebugFormatExt ILogExtensions FatalExt ILogExtensions ErrorExt ILogExtensions WarnExt ILogExtensions FatalFormatExt ILogExtensions InfoFormatExt ILogExtensions WarnFormatExt ILogExtensions DebugExt ILogExtensions FatalExt ILogExtensions InfoFormatExt ILogExtensions ErrorFormatExt MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj
1,LOG4NET-323,0822ae9f141e87ed7119b426fdf7a6d04b038ae4,"AbsoluteTimeDateFormatter caches string representation of now too aggressively The AbsoluteTimeDateFormatter class caches the string representation of the most recent timestamp it has seen, down to the second.

The problem is, this cache is inherited by other formatter classes, which represent that value in different ways.

This causes the formatted date/time generated by layouts and thus appended to logs to be inconsistent if there are multiple date/time formats in use in different appenders.  For example, I have a debug appender which uses the %date{ABSOLUTE} format, and a log file appender which uses the %date{ISO8601} format.  Because the debug appender sees most messages first, most (but not all!) entries in the log file get the ABSOLUTE format, even though ISO8601 was specified.

The cache of the string representation needs to be specific to a particular date format.",cache in AbsoluteTimeDateFormatter must be sensitive to subclass.  LOG4NET-323, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate ADD AbsoluteTimeDateFormatterTest.csAbsoluteTimeDateFormatterTest CacheIsLocalToSubclass AbsoluteTimeDateFormatterTest CacheWorksForSameTicks AbsoluteTimeDateFormatterTest CacheExpiresWhenCrossingSecond FormatterOne FormatDateWithoutMillis AbsoluteTimeDateFormatterTest CacheWorksForSameSecond AbsoluteTimeDateFormatterTest resetCounts
1,LOG4NET-488,449cb8ecfae26d6053a51bdcd5beb4b83d48ab22,Fix tests build Guid.TryParse doesn't exist in .NET 2.0,"LOG4NET-488: fix tests for .net 2.0

This is a modified version of the patch supplied by NN.", MODIFY SmtpPickupDirAppenderTest.csSmtpPickupDirAppenderTest TestDefaultFileNameIsAGuid SmtpPickupDirAppenderTest TestConfigurableFileExtension
0,LOG4NET-76,9df9848f90c58c41f658b66c68178112eccc7c30,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
1,LOG4NET-158,73e0dd86850f4d805d2146c9a5cdfe77a3fa6f26,"XMLConfigurator.ConfigureAndWatch() leaks resources if called multiple times If XMLConfigurator.ConfigureAndWatch() is called multiple times within an AppDomain, each time it is called it leaks a Win32 file  handle (possibly from a FileSystemWatcher object not being disposed?) to the folder containing the previous configuration file it was watching.

Desired behavior would be to release the handle to the folder containing the previous configuration file.",Fix for LOG4NET-158. XMLConfigurator.ConfigureAndWatch() won't leak resources when called multiple times. Internal FileWatcher is properly disposed when a change is detected., MODIFY XmlConfigurator.csXmlConfigurator ConfigureAndWatchHandler Dispose XmlConfigurator InternalConfigureAndWatch XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler XmlConfigurator ConfigureAndWatchHandler StartWatching
0,LOG4NET-241,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-473,d79057ae35cb4934c976172fa758be40d08a9815,"Option for file extension in SmtpPickupDirAppender Especially on Windows file extensions are very handy, if you give the output files the `eml` extension you can just double click the file to open the mail in outlook.

I have added a `FileExtension` option to the `SmtpPickupDirAppender` that can be used to specify a file extension for the generated files.

Although a default value of `eml` would be nice I have preserved backwards compatibility of no file extension by default.",LOG4NET-473: Added file extension attribute in SmtpPickupDirAppender (closes #19), MODIFY SmtpPickupDirAppender.csSmtpPickupDirAppender SmtpPickupDirAppender SmtpPickupDirAppender SendBuffer SmtpPickupDirAppender if SmtpPickupDirAppender if MODIFY SmtpPickupDirAppenderTest.csSmtpPickupDirAppenderTest DeleteTestFiles SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest CreateSmtpPickupDirAppender SmtpPickupDirAppenderTest SetUp SmtpPickupDirAppenderTest TestOutputContainsSentDate SmtpPickupDirAppenderTest CreateLogger SmtpPickupDirAppenderTest DestroyLogger SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest TearDown SmtpPickupDirAppenderTest InitializePickupDir SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest ResetLogger SmtpPickupDirAppenderTest TestConfigurableFileExtension SmtpPickupDirAppenderTest TestDefaultFileNameIsAGuid
0,LOG4NET-212,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-143,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-206,a203b80b670c4e32806013713649ead6a0018588,"Unable to build for release version with Visual Studio 2005 I am trying to build log4net.dll using Visual Studio 2005. When I try to build for release I get this error

Error	5	Cryptographic failure while signing assembly 'C:\MyProjects\incubating-log4net-1.2.10\log4net-1.2.10\src\obj\Release\log4net.dll' -- 'Error reading key file '..\..\..\log4net.snk' -- The system cannot find the file specified. '	log4net

Works fine for debug version.
",Added using() block around MailMessage because it implements IDisposable. LOG4NET-180, MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-229,73a4921de015d4262273055b04ea37206a224038,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-117,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-443,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"Logger.CallAppenders I do have an .NET application (Windows Service) that collects data from a lot of sources (DBs, log files, machines event logs, ...) and uses Log4Net to log details of the actions / execution.  As expected, I'm using a high number of threads to collect data, threads that are writing logs in some files (RollingFileAppenderer).

Lately it happens that the entire application is BLOCKED because all threads were trying to acquire a read lock, like in the stack trace:
000000001ac3d998 00000000774715fa [HelperMethodFrame: 000000001ac3d998] System.Threading.Thread.SleepInternal(Int32)
000000001ac3da90 000007fef747b5e9 System.Threading.Thread.Sleep(Int32)
000000001ac3dac0 000007fef5fb9631 System.Threading.ReaderWriterLockSlim.EnterMyLockSpin()
000000001ac3db90 000007fef5cd297e System.Threading.ReaderWriterLockSlim.TryEnterReadLockCore(TimeoutTracker)
000000001ac3dbf0 000007fef5cd28fa System.Threading.ReaderWriterLockSlim.TryEnterReadLock(TimeoutTracker)
000000001ac3dc40 000007fe98fb4efd log4net.Repository.Hierarchy.Logger.CallAppenders(log4net.Core.LoggingEvent)
000000001ac3dcc0 000007fe98fb4907 log4net.Repository.Hierarchy.Logger.Log(System.Type, log4net.Core.Level, System.Object, System.Exception)
000000001ac3dd30 000007fe98fb47f9 log4net.Core.LogImpl.Info(System.Object)  

It's important to mention that my threads have a timeout, and if they do not finish the job in the given interval they are ABORTED.

Searching for a solution, I found a possible explanation of application hanging here: http://chabster.blogspot.ro/2013/07/a-story-of-orphaned-readerwriterlockslim.html","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
1,LOG4NET-58,4aab012ac8201b2aebe4c3d1e49027e4078b202a,"Support clean build on .NET 2.0 Updates to the source that allow building under .NET 2.0 RTM with no source code related warnings.  Warnings that do appear are related to xml documentation, and a deprecated nant method call.  Updates are commented as appropriate to indicate the compiler warning resolved.

I updated the nant build file to include a new reference needed for 2.0 but since nant (as of 0.85 rc3) doesn't recognize the new framework yet I was unable to test building using the nant build.  Visual Studio 2005 solution/project files are attached.",Fixed code compatibility issue for .NET 1.1 and .NET 2.0. Related to LOG4NET-58, MODIFY XmlLayoutTest.csXmlLayoutTest createEventNode XmlLayoutTest createEventNode
1,LOG4NET-479,dd93053a04399b64ac57403e834658da6fa7d690,Cannot compile log4net.vs2008 Missing file in project,"LOG4NET-479 fix vs2008 build, patch due to NN", MODIFY log4net.vs2008.csproj
1,LOG4NET-117,220c33e8c571b2d2715bbfd33a01f412d9b644e8,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",LOG4NET-117: Initial Maven 2.0 stuff, MODIFY log4net.build ADD pom.xml ADD bin.xml ADD changes.xml ADD download.apt ADD roadmap.apt ADD faq.fml ADD site.css ADD logo.jpg ADD ls-logo.jpg ADD od.gif ADD site.xml ADD history.xml ADD index.xml ADD building.xml ADD config-examples.xml ADD example-apps.xml ADD faq.xml ADD features.xml ADD framework-support.xml ADD chainsaw.xml ADD index.xml ADD configuration.xml ADD contexts.xml ADD internals.xml ADD introduction.xml ADD plugins.xml ADD repositories.xml ADD release-notes.xml ADD project.xml ADD site.vsl
0,LOG4NET-76,5b2160524efa38a35a82ffdaf0aec0c07ce44e22,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Allow default value for event id to be specified via configuration.  LOG4NET-214, MODIFY EventLogAppender.csEventLogAppender Append
1,LOG4NET-484,2ce45ddd39877f2955ce645ba01b9e9389b03fd6,"System.ObjectDisposedException with FileAppender+InterProcessLock Configure lockingModel for InterProcessLock with RollingFileAppender.

{code:xml|title=app.config}
<?xml version=""1.0"" encoding=""utf-8""?>
<configuration>
	<configSections>
		<section name=""log4net"" type=""log4net.Config.Log4NetConfigurationSectionHandler, log4net"" />
	</configSections>
	<log4net>
		<appender name=""RollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file type=""log4net.Util.PatternString"" value=""test.log"" />
			<encoding value=""utf-8"" />
			<appendToFile value=""true""/>
			<rollingStyle value=""Size""/>
			<maxSizeRollBackups value=""10""/>
			<maximumFileSize value=""1""/>
			<staticLogFileName value=""true""/>
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%d [%t] %-5p %c{2} - %m%n""/>
			</layout>
			<lockingModel type=""log4net.Appender.FileAppender+InterProcessLock"" />
		</appender>
		<root>
			<level value=""INFO""/>
			<appender-ref ref=""RollingFileAppender""/>
		</root>
	</log4net>
</configuration>
{code}

Make a log with roll :

{code:title=Program.cs}
using log4net;

namespace ConsoleApplication131
{
	class Program
	{
		static void Main(string[] args)
		{
			var log = LogManager.GetLogger(typeof(Program));
			log.Info(""A"");
			log.Info(""A"");
		}
	}
}
{code}

You get this one roll:

{noformat}
log4net:ERROR Failed to Close appender [RollingFileAppender]
System.ObjectDisposedException: Safe handle has been closed
   at System.Threading.WaitHandle.WaitOneNative(SafeWaitHandle waitHandle, UInt32 millisecondsTimeout, Boolean hasThreadAffinity, Boolean exitContext)
   at System.Threading.WaitHandle.WaitOne(Int64 timeout, Boolean exitContext)
   at log4net.Appender.FileAppender.InterProcessLock.AcquireLock()
   at log4net.Appender.FileAppender.LockingStream.AcquireLock()
   at log4net.Appender.FileAppender.WriteFooter()
   at log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter()
   at log4net.Appender.TextWriterAppender.Reset()
   at log4net.Appender.FileAppender.Reset()
   at log4net.Appender.TextWriterAppender.OnClose()
   at log4net.Appender.AppenderSkeleton.Close()
   at log4net.Util.AppenderAttachedImpl.RemoveAllAppenders()
{noformat}","LOG4NET-484: fix object disposed exception

This is a modified version of the patch supplied by nn1436401 at gmail dot com.", MODIFY FileAppender.csFileAppender LockingStream Seek FileAppender LockingStream LockingStream FileAppender MinimalLock OpenFile FileAppender LockingStream AssertLocked FileAppender ExclusiveLock AcquireLock FileAppender FileAppender FileAppender InterProcessLock ReleaseLock FileAppender ActivateOptions FileAppender InterProcessLock OpenFile FileAppender ConvertToFullPath FileAppender InterProcessLock AcquireLock FileAppender Reset FileAppender LockingStream BeginWrite FileAppender LockingModelBase CreateStream FileAppender LockingStream ReadByte FileAppender ExclusiveLock ReleaseLock FileAppender LockingModelBase CloseStream FileAppender Append FileAppender LockingStream Close FileAppender SafeOpenFile FileAppender LockingStream AcquireLock FileAppender WriteHeader FileAppender LockingStream Write FileAppender MinimalLock ReleaseLock FileAppender CloseWriter FileAppender LockingStream SetLength FileAppender PrepareWriter FileAppender LockingStream Flush FileAppender WriteFooter FileAppender LockingStream Dispose FileAppender SetQWForFiles FileAppender FileAppender FileAppender LockingStream ReleaseLock FileAppender InterProcessLock CloseFile FileAppender LockingStream LockStateException LockStateException FileAppender OpenFile FileAppender Append FileAppender LockingStream Read FileAppender ExclusiveLock CloseFile FileAppender MinimalLock AcquireLock FileAppender SetQWForFiles FileAppender FileAppender FileAppender MinimalLock CloseFile FileAppender LockingStream BeginRead FileAppender CloseFile FileAppender LockingStream EndWrite FileAppender ExclusiveLock OpenFile FileAppender LockingStream EndRead FileAppender LockingStream WriteByte MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestInterProcessLockRoll RollingFileAppenderTest CreateLogger RollingFileAppenderTest CreateLogger
1,LOG4NET-376,882c76682c15726e6101b944d04cd6998a264e3d,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




",LOG4NET-376 use ThreadStatic for cache of formatted times, MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter if AbsoluteTimeDateFormatter FormatDate
0,LOG4NET-410,774065f2c291dbfc0387d282ccc1be49d36173bf,"Please delete old releases from mirroring system To reduce the load on the ASF mirrors, projects are required to delete old releases [1]

Please can you remove all non-current releases?

Thanks!

[Note that older releases are always available from the ASF archive server]

[1] http://www.apache.org/dev/release.html#when-to-archive

","LOG4NET-71 move site stuff, untested so far", RENAME pom.xml RENAME roadmap.apt RENAME maven-base.css RENAME site.css RENAME download_log4net.cgi RENAME logo.jpg RENAME maven-feather.png RENAME ls-logo.jpg RENAME od.gif RENAME site.vm RENAME site.xml RENAME download_log4net.xml RENAME history.xml RENAME index.xml RENAME building.xml RENAME config-examples.xml RENAME example-apps.xml RENAME faq.xml RENAME features.xml RENAME framework-support.xml RENAME chainsaw.xml RENAME index.xml RENAME configuration.xml RENAME contexts.xml RENAME internals.xml RENAME introduction.xml RENAME plugins.xml RENAME repositories.xml RENAME release-notes.xml DELETE bin.xml DELETE changes.xml
0,LOG4NET-87,de55add6883c361c9bc242d6d285ad392a1d8ed8,"Support ASP.Net related PatternConverters to allow items from the HttpContext.Current.Session, Cache, Request, etc. to be captured. It would be nice if there were built-in Pattern Converters to support core ASP.Net objects:

 %aspnet-session{UserId}
 %aspnet-session
 %aspnet-request{ProductId}

This issue may be a good time to investigate supporting a more advanced syntax for the Option parameter:

 %aspnet-request{queryString:ProductId}

that could be shared across all Pattern Converters.","Fix for LOG4NET-77. ExceptionPatternConverter now supports outputting specific information (Source, StackTace, etc.) about an Exception.", MODIFY ExceptionPatternConverter.csExceptionPatternConverter ExceptionPatternConverter ExceptionPatternConverter Convert MODIFY PatternLayoutTest.csPatternLayoutTest TestExceptionPattern
0,LOG4NET-488,c47c2c6b9552a34d435024441b303421ebfcf512,Fix tests build Guid.TryParse doesn't exist in .NET 2.0,LOG4NET-490: fix inter process lock such that the tests pass, MODIFY FileAppender.csFileAppender ActivateOptions FileAppender InterProcessLock CloseFile FileAppender OnClose FileAppender InterProcessLock ReleaseLock FileAppender InterProcessLock ActivateOptions FileAppender MinimalLock OnClose FileAppender InterProcessLock OnClose FileAppender ExclusiveLock OnClose FileAppender ExclusiveLock ActivateOptions FileAppender InterProcessLock OpenFile FileAppender MinimalLock ActivateOptions FileAppender InterProcessLock AcquireLock
0,LOG4NET-69,0c1e5b73df05f9bc2daac0bb324a3080bbd2b400,"Exception thrown when *Format methods are given a malformed format string FormatException thrown when *Format methods are given a malformed format string: log.DebugFormat(""Malformed {{,,,5}format{8}!"");

This statement:

 log.DebugFormat(""Malformed {{,,,5}format{8}!"");

throws the following exception:

[FormatException: Input string was not in a correct format.]
   System.Text.StringBuilder.FormatError()
   System.Text.StringBuilder.AppendFormat(IFormatProvider provider, String format, Object[] args)
   System.String.Format(IFormatProvider provider, String format, Object[] args)
   log4net.Core.LogImpl.DebugFormat(String format, Object[] args)

which is consistent with the documentation for String.Format:

System.FormatException: The format item in format is invalid.  -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.  ",Fix for LOG4NET-70. Changed reference from coredll.dll to CoreDll.dll, MODIFY SystemInfo.cs
1,LOG4NET-37,4e6114e136c6af46ae0fb9d485c91f61f18b41c9,"Allow the RepositorySelector type to be specified using the AppSettings config Allow the RepositorySelector type to be sepecified using the AppSettings config.

The RepositorySelector is set by default to be DefaultRepositorySelector. This can be changed programatically by setting the LoggerManager.RepositorySelector property, however it cannot be set at runtime via the application configuration files.

Propose adding an AppSettings property 'log4net.RepositorySelector' that can be set to the type name of the repository selector to load. If this property is missing, or the type cannot be created the current default behaviour will continue.",Fix for LOG4NET-37. Allow the RepositorySelector type to be sepecified using the AppSettings config, MODIFY LoggerManager.csLoggerManager LoggerManager
0,LOG4NET-393,0b5dce128eb255fd55ad23421745011db7b700bb,"Using dynamic methods with log4net causes NullReferenceException in StackFrameItem In our production code we use dynamic methods e.g. when using the factory pattern. We upgraded from 1.2.10 to 1.2.12 and encountered the following exception:

log4net:ERROR An exception ocurred while retreiving stack frame information.
System.NullReferenceException: Object reference not set to an instance of an object.
   at log4net.Core.StackFrameItem..ctor(StackFrame frame) in c:\Users\wilfred.dittmer\Documents\Visual Studio 2012\Projects\Log4netLambaExpressionTest\log4net-1.2.12-src\log4net-1.2.12\src\Core\StackFrameItem.cs:line 61

I created a test project (attached) which shows the exception occuring.
If the method is: {System.Object lambda_method(System.Runtime.CompilerServices.Closure)}
then one cannot access the DeclaringType. The code then tries to get the FullName of the null value which causes the exception.

According to: http://msdn.microsoft.com/en-us/library/system.reflection.emit.dynamicmethod.declaringtype.aspx

""DynamicMethod.DeclaringType: Gets the type that declares the method, which is always null for dynamic methods.""

So it seems best to check if DeclaringType is null and if so leave the m_className set to 'NA'.
",LOG4NET-71 move log4net's sources to a subdirectory, MODIFY log4net.build MODIFY log4net.include RENAME AdoNetAppender.cs RENAME AnsiColorTerminalAppender.cs RENAME AppenderCollection.cs RENAME AppenderSkeleton.cs RENAME AspNetTraceAppender.cs RENAME BufferingAppenderSkeleton.cs RENAME BufferingForwardingAppender.cs RENAME ColoredConsoleAppender.cs RENAME ConsoleAppender.cs RENAME DebugAppender.cs RENAME EventLogAppender.cs RENAME FileAppender.cs RENAME ForwardingAppender.cs RENAME IAppender.cs RENAME IBulkAppender.cs RENAME LocalSyslogAppender.cs RENAME ManagedColoredConsoleAppender.cs RENAME MemoryAppender.cs RENAME NetSendAppender.cs RENAME OutputDebugStringAppender.cs RENAME RemoteSyslogAppender.cs RENAME RemotingAppender.cs RENAME RollingFileAppender.cs RENAME SmtpAppender.cs RENAME SmtpPickupDirAppender.cs RENAME TelnetAppender.cs RENAME TextWriterAppender.cs RENAME TraceAppender.cs RENAME UdpAppender.cs RENAME AssemblyInfo.cs RENAME AssemblyVersionInfo.cpp RENAME AssemblyVersionInfo.cs RENAME AssemblyVersionInfo.js RENAME AssemblyVersionInfo.vb RENAME AliasDomainAttribute.cs RENAME AliasRepositoryAttribute.cs RENAME BasicConfigurator.cs RENAME ConfiguratorAttribute.cs RENAME DOMConfigurator.cs RENAME DOMConfiguratorAttribute.cs RENAME DomainAttribute.cs RENAME Log4NetConfigurationSectionHandler.cs RENAME PluginAttribute.cs RENAME RepositoryAttribute.cs RENAME SecurityContextProviderAttribute.cs RENAME XmlConfigurator.cs RENAME XmlConfiguratorAttribute.cs RENAME CompactRepositorySelector.cs RENAME DefaultRepositorySelector.cs RENAME ErrorCode.cs RENAME ExceptionEvaluator.cs RENAME IAppenderAttachable.cs RENAME IErrorHandler.cs RENAME IFixingRequired.cs RENAME ILogger.cs RENAME ILoggerWrapper.cs RENAME IOptionHandler.cs RENAME IRepositorySelector.cs RENAME ITriggeringEventEvaluator.cs RENAME Level.cs RENAME LevelCollection.cs RENAME LevelEvaluator.cs RENAME LevelMap.cs RENAME LocationInfo.cs RENAME LogException.cs RENAME LogImpl.cs RENAME LoggerManager.cs RENAME LoggerWrapperImpl.cs RENAME LoggingEvent.cs RENAME MethodItem.cs RENAME SecurityContext.cs RENAME SecurityContextProvider.cs RENAME StackFrameItem.cs RENAME TimeEvaluator.cs RENAME WrapperMap.cs RENAME AbsoluteTimeDateFormatter.cs RENAME DateTimeDateFormatter.cs RENAME IDateFormatter.cs RENAME Iso8601DateFormatter.cs RENAME SimpleDateFormatter.cs RENAME DenyAllFilter.cs RENAME FilterDecision.cs RENAME FilterSkeleton.cs RENAME IFilter.cs RENAME LevelMatchFilter.cs RENAME LevelRangeFilter.cs RENAME LoggerMatchFilter.cs RENAME MdcFilter.cs RENAME NdcFilter.cs RENAME PropertyFilter.cs RENAME StringMatchFilter.cs RENAME GlobalContext.cs RENAME ILog.cs RENAME DynamicPatternLayout.cs RENAME ExceptionLayout.cs RENAME ILayout.cs RENAME IRawLayout.cs RENAME Layout2RawLayoutAdapter.cs RENAME LayoutSkeleton.cs RENAME AppDomainPatternConverter.cs RENAME AspNetCachePatternConverter.cs RENAME AspNetContextPatternConverter.cs RENAME AspNetPatternConverter.cs RENAME AspNetRequestPatternConverter.cs RENAME AspNetSessionPatternConverter.cs RENAME DatePatternConverter.cs RENAME ExceptionPatternConverter.cs RENAME FileLocationPatternConverter.cs RENAME FullLocationPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LevelPatternConverter.cs RENAME LineLocationPatternConverter.cs RENAME LoggerPatternConverter.cs RENAME MessagePatternConverter.cs RENAME MethodLocationPatternConverter.cs RENAME NamedPatternConverter.cs RENAME NdcPatternConverter.cs RENAME PatternLayoutConverter.cs RENAME PropertyPatternConverter.cs RENAME RelativeTimePatternConverter.cs RENAME StackTraceDetailPatternConverter.cs RENAME StackTracePatternConverter.cs RENAME ThreadPatternConverter.cs RENAME TypeNamePatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PatternLayout.cs RENAME RawLayoutConverter.cs RENAME RawPropertyLayout.cs RENAME RawTimeStampLayout.cs RENAME RawUtcTimeStampLayout.cs RENAME SimpleLayout.cs RENAME XMLLayout.cs RENAME XMLLayoutBase.cs RENAME XmlLayoutSchemaLog4j.cs RENAME Log4netAssemblyInfo.cs RENAME LogManager.cs RENAME LogicalThreadContext.cs RENAME MDC.cs RENAME NDC.cs RENAME DefaultRenderer.cs RENAME IObjectRenderer.cs RENAME RendererMap.cs RENAME IPlugin.cs RENAME IPluginFactory.cs RENAME PluginCollection.cs RENAME PluginMap.cs RENAME PluginSkeleton.cs RENAME RemoteLoggingServerPlugin.cs RENAME ConfigurationChangedEventArgs.cs RENAME DefaultLoggerFactory.cs RENAME Hierarchy.cs RENAME ILoggerFactory.cs RENAME Logger.cs RENAME LoggerKey.cs RENAME ProvisionNode.cs RENAME RootLogger.cs RENAME XmlHierarchyConfigurator.cs RENAME IBasicRepositoryConfigurator.cs RENAME ILoggerRepository.cs RENAME IXmlRepositoryConfigurator.cs RENAME LoggerRepositorySkeleton.cs RENAME ThreadContext.cs RENAME AppenderAttachedImpl.cs RENAME CompositeProperties.cs RENAME ContextPropertiesBase.cs RENAME ConverterInfo.cs RENAME CountingQuietTextWriter.cs RENAME CyclicBuffer.cs RENAME EmptyCollection.cs RENAME EmptyDictionary.cs RENAME FormattingInfo.cs RENAME GlobalContextProperties.cs RENAME ILogExtensions.cs RENAME LevelMapping.cs RENAME LevelMappingEntry.cs RENAME LogLog.cs RENAME LogicalThreadContextProperties.cs RENAME NativeError.cs RENAME NullDictionaryEnumerator.cs RENAME NullEnumerator.cs RENAME NullSecurityContext.cs RENAME OnlyOnceErrorHandler.cs RENAME OptionConverter.cs RENAME PatternConverter.cs RENAME PatternParser.cs RENAME PatternString.cs RENAME AppDomainPatternConverter.cs RENAME DatePatternConverter.cs RENAME EnvironmentFolderPathPatternConverter.cs RENAME EnvironmentPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LiteralPatternConverter.cs RENAME NewLinePatternConverter.cs RENAME ProcessIdPatternConverter.cs RENAME PropertyPatternConverter.cs RENAME RandomStringPatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PropertiesDictionary.cs RENAME PropertyEntry.cs RENAME ProtectCloseTextWriter.cs RENAME QuietTextWriter.cs RENAME ReadOnlyPropertiesDictionary.cs RENAME ReaderWriterLock.cs RENAME ReusableStringWriter.cs RENAME SystemInfo.cs RENAME SystemStringFormat.cs RENAME TextWriterAdapter.cs RENAME ThreadContextProperties.cs RENAME ThreadContextStack.cs RENAME ThreadContextStacks.cs RENAME Transform.cs RENAME BooleanConverter.cs RENAME ConversionNotSupportedException.cs RENAME ConverterRegistry.cs RENAME EncodingConverter.cs RENAME IConvertFrom.cs RENAME IConvertTo.cs RENAME IPAddressConverter.cs RENAME PatternLayoutConverter.cs RENAME PatternStringConverter.cs RENAME TypeConverter.cs RENAME TypeConverterAttribute.cs RENAME WindowsSecurityContext.cs RENAME log4net.vs2008.csproj RENAME log4net.vs2008.sln RENAME log4net.vs2010.csproj RENAME log4net.vs2010.sln MODIFY nant.build MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-52,fa6a830559dff51de434626cc537b7b6086a522f,"Allow XML configurator to set properties of type Object Currently the XML config parse cannot set string values on properties of type object. 
It is possible to force the parser to do this by explicitly setting the type on the element, e.g. <foo type=""System.String"" value=""test"" />.
It would be more natural if this explicit type was not required.",LOG4NET-53 Allow repository properties to be set in the config file, MODIFY Hierarchy.csHierarchy PropertyEntry ToString Hierarchy AddProperty
1,LOG4NET-405,f10aa67ab947fe7299f4d7e90982c7a83b0d4373,"SmtpAppender encoding changes After update to log4net 1.2.12 email encoding changed and my mail client
fail to render unicode symbols.
I think changes made for issue https://issues.apache.org/jira/browse/LOG4NET-354 brake encoding in SmtpAppender
log4net 1.2.10 use utf-8 encoding by default, below headers from email
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: base64
after update on log4net 1.2.12 email encoding koi8-r
Content-Type: text/plain; charset=koi8-r
Content-Transfer-Encoding: quoted-printable
I think change default encoding from utf-8 is pretty strange.

Proposed fix:
Do not use Encoding.Default, let SubjectEncoding and BodyEncoding by default be null, on email send set encoding only if field not null.","LOG4NET-405 fixed default encoding to be UTF8

According to http://msdn.microsoft.com/en-us/library/system.text.encoding.default UTF8 is a better choice than Default.", MODIFY SmtpAppender.cs
0,LOG4NET-241,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-214,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
1,LOG4NET-511,7f1807853a39944e803f4901fc1f212e804e3ad9,"API to flush appenders I would like to see an API that flushes any appenders that have buffered data. E.g. a method LogManager.Flush().  An application might call such a method at regular intervals, e.g. on a Timer.

A naive implementation with the current log4net would iterate through appenders, looking for those that support flushing, and call the appender's flush method, e.g.:

    foreach (IAppender appender in 
             LogManager.GetRepository().GetAppenders())
    {
        BufferingAppenderSkeleton bas = appender 
                        as BufferingAppenderSkeleton;  
        if (bas != null) bas.Flush();
    }

But (a) I'm not sure this is thread-safe and (b) there are potentially other appenders that may want to be able to flush data (e.g. a TextWriterAppender with ImmediateFlush = false).

The request consists of:

- Add an interface, IFlushableAppender or equivalent, with a single method Flush().
- Implement this interface in all relevant appenders (BufferingAppenderSkeleton, TextWriterAppender, ...)
- Add a thread-safe static Flush() method to LogManager.
","LOG4NET-511 Implement flushing of appenders that buffer data

Patch by @JJoe2

closes #37", MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush MODIFY DebugAppender.csDebugAppender Flush ADD IFlushable.cs MODIFY RemotingAppender.csRemotingAppender Flush MODIFY TextWriterAppender.csTextWriterAppender Flush MODIFY TraceAppender.csTraceAppender Flush MODIFY LogManager.csLogManager Flush MODIFY LoggerRepositorySkeleton.csLoggerRepositorySkeleton GetWaitTime LoggerRepositorySkeleton Flush MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj MODIFY log4net.vs2012.csproj
0,LOG4NET-215,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
0,LOG4NET-106,4e262fa919e6a0eb44abe6eca92ae07d17f1cd1a,"TraceAppender : Add switch to disable using logger name as trace category TraceAppender now always put logger name as trace category when writing to System.Diagnostics.Trace.Write
ie. :
System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);

This resulted in logger's name appearing twice in Trace logs if once use/share the same conversion for both file-based and trace appenders, eg.
""%date [%thread] %-5level %logger - %message%""

It would be nice to have a settable property on TraceAppender to disable using logger's name as trace category, ie. :

public bool UseLoggerNameAsTraceCategory
{
get; set;
}

...
if (m_useLoggerNameAsTraceCategory)
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), loggingEvent.LoggerName);
}
else
{
  System.Diagnostics.Trace.Write(RenderLoggingEvent(loggingEvent), null);
}





","Fix for LOG4NET-2. Require that a Type parameter be passed to log4net's internal logging class when recording an internal message. Added LogReceived event to LogLog class to facilitate capturing internal messages during the the configuration process. Added ILoggerRepository.ConfigurationMessages property which holds a list of internal messages generated during the most recent configuration cycle. Changed signature on XmlConfigurator/BasicConfigurator.Configure methods to return internal messages recording during the configuration process. 

Added Visual Studio 2005 solution and project files.", MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender SendBuffer AdoNetAppender GetLogStatement AdoNetAppender SendBuffer AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderSkeleton.csAppenderSkeleton ~AppenderSkeleton AppenderSkeleton lock MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY FileAppender.csFileAppender OpenFile FileAppender ActivateOptions MODIFY RollingFileAppender.csRollingFileAppender OpenFile RollingFileAppender ComputeCheckPeriod RollingFileAppender RollOverSize RollingFileAppender InitializeFromOneFile RollingFileAppender GetExistingFiles RollingFileAppender DetermineCurSizeRollBackups RollingFileAppender ExistingInit RollingFileAppender DeleteFile RollingFileAppender RollFile RollingFileAppender RollOverIfDateBoundaryCrossing MODIFY SmtpAppender.cs MODIFY TelnetAppender.csTelnetAppender SocketHandler OnConnect TelnetAppender ActivateOptions MODIFY TextWriterAppender.csTextWriterAppender lock MODIFY BasicConfigurator.csBasicConfigurator InternalConfigure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure MODIFY SecurityContextProviderAttribute.csSecurityContextProviderAttribute Configure MODIFY XmlConfigurator.csXmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator InternalConfigureAndWatch XmlConfigurator InternalConfigure XmlConfigurator ConfigureAndWatch XmlConfigurator Configure XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnRenamed XmlConfigurator InternalConfigureFromXml XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnChanged XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler OnWatchedFileChange XmlConfigurator ConfigureFromXml XmlConfigurator Configure XmlConfigurator ConfigureAndWatch MODIFY XmlConfiguratorAttribute.csXmlConfiguratorAttribute ConfigureFromFile XmlConfiguratorAttribute Configure XmlConfiguratorAttribute ConfigureFromUri XmlConfiguratorAttribute ConfigureFromFile MODIFY CompactRepositorySelector.csCompactRepositorySelector CompactRepositorySelector CompactRepositorySelector CreateRepository MODIFY DefaultRepositorySelector.csDefaultRepositorySelector LoadPlugins DefaultRepositorySelector CreateRepository DefaultRepositorySelector ConfigureRepository DefaultRepositorySelector GetInfoForAssembly DefaultRepositorySelector DefaultRepositorySelector DefaultRepositorySelector LoadAliases DefaultRepositorySelector CreateRepository MODIFY Level.cs MODIFY LocationInfo.csLocationInfo LocationInfo MODIFY LoggerManager.csLoggerManager LoggerManager MODIFY LoggingEvent.csLoggingEvent if LoggingEvent if LoggingEvent if MODIFY DatePatternConverter.csDatePatternConverter Convert DatePatternConverter ActivateOptions MODIFY NamedPatternConverter.csNamedPatternConverter ActivateOptions MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY RendererMap.csRendererMap FindAndRender MODIFY RemoteLoggingServerPlugin.csRemoteLoggingServerPlugin Attach ADD ConfigurationChangedEventArgs.csConfigurationChangedEventArgs ConfigurationChangedEventArgs MODIFY Hierarchy.csHierarchy BasicRepositoryConfigure Hierarchy UpdateParents Hierarchy XmlRepositoryConfigure Hierarchy CollectAppenders Hierarchy Shutdown MODIFY Logger.csLogger Log Logger CallAppenders Logger Log Logger IsEnabledFor Logger Log MODIFY RootLogger.csRootLogger if MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator ParseAppender XmlHierarchyConfigurator ParseChildrenOfLoggerElement XmlHierarchyConfigurator ParseRenderer XmlHierarchyConfigurator FindAppenderByReference XmlHierarchyConfigurator ParseLogger XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator Configure XmlHierarchyConfigurator ConvertStringTo XmlHierarchyConfigurator ParseLevel MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.csLoggerRepositorySkeleton LoggerRepositorySkeleton LoggerRepositorySkeleton ResetConfiguration MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend AppenderAttachedImpl RemoveAllAppenders MODIFY LogLog.csLogLog OnLogReceived LogLog Debug LogReceivedEventArgs LogReceivedEventArgs LogLog Error LogLog ToString LogLog Warn LogLog Error LogLog LogReceivedAdapter LogReceivedAdapter LogLog LogReceivedAdapter LogLog_LogReceived LogLog Error LogLog Warn LogLog Error LogLog Warn LogLog Debug LogLog LogLog LogLog LogReceivedAdapter Dispose LogLog Warn LogLog Debug LogLog Debug LogLog LogLog MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties GetProperties LogicalThreadContextProperties SetCallContextData MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler Error OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error MODIFY OptionConverter.csOptionConverter ToFileSize OptionConverter ToBoolean OptionConverter InstantiateByClassName MODIFY PatternParser.csPatternParser ProcessConverter MODIFY DatePatternConverter.csDatePatternConverter ActivateOptions DatePatternConverter Convert MODIFY EnvironmentFolderPathPatternConverter.csEnvironmentFolderPathPatternConverter Convert MODIFY EnvironmentPatternConverter.csEnvironmentPatternConverter Convert MODIFY IdentityPatternConverter.csIdentityPatternConverter Convert MODIFY ProcessIdPatternConverter.csProcessIdPatternConverter Convert MODIFY RandomStringPatternConverter.csRandomStringPatternConverter ActivateOptions RandomStringPatternConverter Convert MODIFY UserNamePatternConverter.csUserNamePatternConverter Convert MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY SystemInfo.csSystemInfo GetTypeFromString SystemInfo SystemInfo SystemInfo GetAppSetting SystemInfo if MODIFY SystemStringFormat.csSystemStringFormat StringFormatError SystemStringFormat StringFormat MODIFY ThreadContextStacks.csThreadContextStacks if MODIFY ConverterRegistry.csConverterRegistry CreateConverterInstance ADD log4net.vs2005.csproj ADD log4net.vs2005.sln ADD ConfigurationMessages.csLogLogAppender Append ConfigurationMessages ConfigurationMessagesTest ConfigurationMessages rep_ConfigurationChanged LogLogAppender ActivateOptions ADD LogLogTest.csLogLogTest EmitInternalMessages TraceListenerCounter Write TraceListenerCounter WriteLine TraceListenerCounter Reset LogLogTest TraceListenerCounterTest LogLogTest LogReceivedAdapter ADD log4net.Tests.vs2005.csproj
0,LOG4NET-205,95824fd8b68cefb8975bec151156f3d76fc1b981,"Allow filtering by Identity / UserName / ThreadName and Domain Background :
See thread named PropertyFilter ( http://mail-archives.apache.org/mod_mbox/logging-log4net-user/200903.mbox/browser )

By default, there's no way to filter by those LoggingEvent properties.
I want to avoid extra code to do that (by adding a property programmatically or implementing a custom IFilter)

I see 2 solutions :

 - LoggingEvent.LookupProperty should be able to resolve internal keys like ""log4net:Identity"", ""log4net:UserName"", etc... (Note that It already works for ""log4net:HostName"" added by GlobalContext's static constructor). Then we can use the PropertyFilter.

- Add a IFilter implementation for each property like it's done for the LoggerName and  Level properties.",LOG4NET-386 added a method in ThreadContextProperties to retrieve the property keys, MODIFY ThreadContextProperties.csThreadContextProperties GetKeys
0,LOG4NET-437,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"LogicalThreadContext data does not flow properly using Async and Await LogicalThreadContext doesn't work properly when using Async and Await. The current NDC call stack gets corrupted because the logical data context is not immutable. (See: http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html for the gory details). I've attached a Program.cs that demonstrates the issue. You will see with an unpatched log4net the thread context is corrupted compared to the proper implementation in MyStack and the console logger. An entry like:

LOG4NET Main 1 A 2 A: </MoreWork>
LOG4NET Main 1 A 2 A: </MoreWork>

is invalid and should not be possible in a properly working thread context.

I've attached a VERY naive patch that corrects the issue.","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
0,LOG4NET-243,b9c24915eadbbb665778ef42524fd74d99eb969a,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-475,d79057ae35cb4934c976172fa758be40d08a9815,"Cannot add appender in Log4net at runtime I am trying to write a custom appender that rolls over daily, as well as on a size limit, and cleans up after itself in the process. I wrote the implementation using the AppenderSkeleton as a base class, then attempted to write a unit test to test the appender functionality. I do the following:

            DailyRollingFileAppender appender = new DailyRollingFileAppender();
            appender.RollOverOnSize = true;
            appender.RollOverDaily = true; //dont think I can test this
            appender.MaxFileSizeBytes = 1024;
            appender.RolloverDayCount = 1;
            appender.RollOverOnSize = true;
            appender.LoggingDirectory = Path.Combine(Directory.GetCurrentDirectory(), ""TestLogFolder"");
            appender.LogFileName = ""TestLogFileName"";
            appender.DateTimeFormatString = ""YYYY-MM-DD-hh-mm-ss"";
            appender.Cleanup = true;
            appender.Layout = new PatternLayout();
            appender.MaxNumberOfFiles = 10;
            appender.Name = ""testAppender"";

            //lets write some crappy log messages
            byte[] bytes = new byte[1050];

            Random rnd = new Random();
            rnd.NextBytes(bytes);

            ILog log = LogManager.GetLogger(""LoggerName"");
            Logger logger = (Logger)log.Logger;
            logger.AddAppender(appender);

            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), new Exception());
            logger.Log(Level.Info, Encoding.UTF8.GetString(bytes), null);

The code is based on the only examples I can find of people adding appenders to loggers at runtime, which you would want to do for a unit test. The issue is that the Logger instance I get from the call to ILog.Logger in the code above as a collection of appenders of type ReadOnlyAppenderCollection. The code silently consumes the exception it throws internally and never actually adds the appender to the collection. Can/How do I add an appender to a logger at runtime in the manner described above, so I can appropriately test that it functions. ",LOG4NET-473: Added file extension attribute in SmtpPickupDirAppender (closes #19), MODIFY SmtpPickupDirAppender.csSmtpPickupDirAppender SmtpPickupDirAppender SmtpPickupDirAppender SendBuffer SmtpPickupDirAppender if SmtpPickupDirAppender if MODIFY SmtpPickupDirAppenderTest.csSmtpPickupDirAppenderTest DeleteTestFiles SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest CreateSmtpPickupDirAppender SmtpPickupDirAppenderTest SetUp SmtpPickupDirAppenderTest TestOutputContainsSentDate SmtpPickupDirAppenderTest CreateLogger SmtpPickupDirAppenderTest DestroyLogger SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest TearDown SmtpPickupDirAppenderTest InitializePickupDir SmtpPickupDirAppenderTest SilentErrorHandler Error SmtpPickupDirAppenderTest ResetLogger SmtpPickupDirAppenderTest TestConfigurableFileExtension SmtpPickupDirAppenderTest TestDefaultFileNameIsAGuid
0,LOG4NET-17,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"Line-wrapping Appender Layouts I think a line-wrapping layout, or a line-wrapping version
or extension of one or more of the current layouts (or a
way to decorate or extend one of the current layouts....)
would be very useful. Such a layout could take a
threshold that is the number of chars that is the
maximum length for a line, as well as an indentation
amount for leading space characters for the indented
lines. I'm sure one could easily imagine more
complicated things it could do....

Given time, I might be interested in contributing to such
an addition.

regards,

carl","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
1,LOG4NET-111,9f1b0f4d9ca956aea2d201515d3a143c47a0f309,Project metadata for projects.apache.org projects.apache.org is a catalog of Apache projects that is generated from project supplied metadata.  This issue requests adding a metadata file to the log4net repository to allow log4net to appear in projects.apache.org alongside log4j and log4cxx.,LOG4NET-111: Project metadata for projects.apache.org, ADD doap_log4net.rdf
0,LOG4NET-38,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-296,b9c24915eadbbb665778ef42524fd74d99eb969a,"Patch for .net 4, client profile and a fix for the name resolution bug  ","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
1,LOG4NET-33,e0a5415f49fa27fd994502d7f1a5eba96e29b407,"Ability to use global property to point to log4net configuration file The log4j tool has the ability to specify a system property to point to the logging configuration file.  For instance, when starting a java program (such as tomcat), one can pass ""-Dlog4j.configuration=http://mydomain/log4j.xml"" as a command line parameter.  Log4j checks to see whether this property is available and, if it is, uses the return value from the URL to configure categories and appenders.

A similar mechanism in log4net would allow a few improvements in logging configuring:
* No need to use the XmlConfiguratorAttribute in any assemblies
* No need to know at design time where the log4net config file will be located
* Ability to configure logging for all components in an app domain by setting a property in the app domain's config file
* Ability to configure logging for all components on a machine by setting a property in the machine.config file
* Ability to updating config file contents without updating app or machine config contents.

I'd propose doing a direct mirror of the log4j capabilities into log4net as follows:
* Update the LogManager class with a static constructor that mirrors the static block in the LogManager class in log4j
* Use System.Configuration.ConfigurationSettings.AppSettings.Get(...) instead of java's System.getProperty(...)
* Don't support the configuratorClass attribute (yet) because the XmlConfigurator seems to be the only logical choice
* Don't implement the DEFAULT_XML_CONFIGURATION_FILE or DEFAULT_CONFIGURATION_FILE property checks (yet). ",Fix for LOG4NET-33. Added code to look for the AppSetting 'log4net.Config' when configuring the default repository. If located it is loaded as a URI relative to the application base directory., MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-154,a311c023964de3c7acb07419e764f65496e00b94,"Add a StackTracePatternConverter to display method calls leading up to log message Modify LocationInfo to save StackTrace information and make it available as StackTracePatternConverter to display call stack leading up to the log message:

 log.Debug(""Item Saved"");
 
 [%stackTrace{3}] %message%newline

 [default_aspx.btnSubmit_Click > productController.Save > productService.Save] Item Saved

This will probably be a slow pattern converter on par with other LocationInfo derived pattern converters.",Document stacktrace and stacktracedetail patterns.  LOG4NET-313, MODIFY PatternLayout.cs
0,LOG4NET-170,289a3f2a030c75e6fb0912f2c0c22021848d587c,Documentation improvement re: fixing and active properties Documentation improvement - see http://www.nabble.com/ASP.NET%2C-AdoNetAppender-and-deferred-property-execution-tt18865968.html,Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
1,LOG4NET-43,29ec33c991b1a22aeac4e67c77ebbe94b370f9d1,"Specifying an empty string as a property in the config file results in an error Specifying an empty string as a property (either as <property/> or <property></property>) results in the following:

log4net:ERROR XmlHierarchyConfigurator: Failed to construct object of type [System.String] Exception: System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeType.CreateInstanceImpl(Boolean publicOnly)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at log4net.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(XmlElement element, Type defaultTargetType, Type typeConstraint) in S:\local\log4net-cvs\logging-log4net\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs:line 924","Fix for LOG4NET-43. Handles empty string properties by creating an empty string rather than attempting to construct one.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
0,LOG4NET-310,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-460,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
0,LOG4NET-143,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-214,702b0775760b413eee77c86d855f94e6c77316e4,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",no longer needed now that content has been migrated to mvn site.  LOG4NET-117, DELETE contributing.html DELETE site.css DELETE style.css DELETE downloads.html DELETE history.html DELETE index.html DELETE license.html DELETE building.html DELETE config-examples.html DELETE example-apps.html DELETE faq.html DELETE features.html DELETE framework-support.html DELETE chainsaw.html DELETE index.html DELETE configuration.html DELETE contexts.html DELETE internals.html DELETE introduction.html DELETE plugins.html DELETE repositories.html DELETE release-notes.html DELETE roadmap.html DELETE support.html DELETE build.xml DELETE ant-1.4.1.jar DELETE commons-collections-2.0.jar DELETE jdom-b8.jar DELETE log4j-1.1.3.jar DELETE velocity-1.4-dev.jar DELETE xerces-1.4.4.jar DELETE contributing.xml DELETE downloads.xml DELETE history.xml DELETE index.xml DELETE license.xml DELETE building.xml DELETE config-examples.xml DELETE example-apps.xml DELETE faq.xml DELETE features.xml DELETE framework-support.xml DELETE chainsaw.xml DELETE index.xml DELETE configuration.xml DELETE contexts.xml DELETE internals.xml DELETE introduction.xml DELETE plugins.xml DELETE repositories.xml DELETE release-notes.xml DELETE roadmap.xml DELETE project.xml DELETE site.vsl DELETE support.xml
0,LOG4NET-65,0e3bd4dc7a58d3f1a38e85cab874115b48c6b285,"Unhandled SecurityException exception for FileIOPermission while loading configuration file If the calling application does not have the PathDiscovery FileIOPermission a SecurityException is generated from the XmlConfiguratorAttribute.Configure method. This is called from the first LoggerManager.GetLogger in a calling assembly.

The exception should be caught as we may potentially be injecting this exception into user code's class initialisation phase which the user would find unexpected.

An example stack trace for the exception is:

[SecurityException: Request for the permission of type 'System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' failed.]
   System.Security.CodeAccessSecurityEngine.Check(Object demand, StackCrawlMark& stackMark, Boolean isPermSet) +0
   System.Security.CodeAccessPermission.Demand() +59
   System.AppDomainSetup.VerifyDir(String dir, Boolean normalize) +110
   System.AppDomain.get_BaseDirectory() +61
   log4net.Util.SystemInfo.get_ApplicationBaseDirectory() +31
   log4net.Config.XmlConfiguratorAttribute.Configure(Assembly sourceAssembly, ILoggerRepository targetRepository) +30
   log4net.Core.DefaultRepositorySelector.ConfigureRepository(Assembly assembly, ILoggerRepository repository) +314
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType, String repositoryName, Boolean readAssemblyAttributes) +532
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType) +42
   log4net.Core.DefaultRepositorySelector.GetRepository(Assembly repositoryAssembly) +80
   log4net.Core.LoggerManager.GetLogger(Assembly repositoryAssembly, String name) +132
   log4net.LogManager.GetLogger(Assembly repositoryAssembly, String name) +30
   log4net.LogManager.GetLogger(String name) +34
","Added nant.build target to compile tests under framework .NET 2.0
Related to LOG4NET-58", MODIFY nant.build
1,LOG4NET-455,cca252c3090b1e8091d61ffdd0e97835146db31a,LogicalThreadContext does not flow correctly through async/await  This ticket accompanies github pull request #12 https://github.com/apache/log4net/pull/12,LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
1,LOG4NET-140,289a3f2a030c75e6fb0912f2c0c22021848d587c,"Allow to set an all not appended appender I use several appenders to split my logs into several log files. All whats not handled by a specific appender should log in a root logfile. But today all whats previously logged by a specific appender is also appended to the root appender. So it would be good if i could define a ""log the rest"" appender.",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
0,LOG4NET-17,f7000163b5e88d518727fa049bef8604d25288b5,"Line-wrapping Appender Layouts I think a line-wrapping layout, or a line-wrapping version
or extension of one or more of the current layouts (or a
way to decorate or extend one of the current layouts....)
would be very useful. Such a layout could take a
threshold that is the number of chars that is the
maximum length for a line, as well as an indentation
amount for leading space characters for the indented
lines. I'm sure one could easily imagine more
complicated things it could do....

Given time, I might be interested in contributing to such
an addition.

regards,

carl",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
0,LOG4NET-51,652340adbe4977e9b70f635f76465e93d9e501da,WmiAppender Add a sample appender that supports firing events to WMI,"LOG4NET-52 Allow XML configurator to set properties of type Object.
Fixed check for Level type that was too wide; it matched Object when it should not have. Level is a sealed type so an equals check on the type is all that is required.
Fixed conversion of String to Object. There is an implicit conversion because it is a supertype, but the code in OptionConverter did not account for this.", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator ConvertStringTo MODIFY OptionConverter.csOptionConverter ConvertStringTo
0,LOG4NET-71,fcd26b8ccf169f9ea4e7cc02a5ff567a2dc3d544,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.",Fix for LOG4NET-74. Made member variables protected., MODIFY MemoryAppender.cs
0,LOG4NET-51,fa6a830559dff51de434626cc537b7b6086a522f,WmiAppender Add a sample appender that supports firing events to WMI,LOG4NET-53 Allow repository properties to be set in the config file, MODIFY Hierarchy.csHierarchy PropertyEntry ToString Hierarchy AddProperty
0,LOG4NET-193,3c054052a5cc1a9091b84b849f36bff0c51cc221,"Supported Frameworks Inconsistency on Website Viewing the list of supported frameworks on http://logging.apache.org/log4net/release/manual/introduction.html states that log4net does not support .NET 2 and does support Compact Framework 2.

Viewing the list of supported frameworks on http://logging.apache.org/log4net/release/framework-support.html states that log4net does indeed support .NET 2 and does not list support for Compact Framework 2.

After downloading 1.2.10 and inspecting the bin directory, it appears that the second page is correct and the introduction in the manual needs to be corrected.  This seems like a major documentation issue as that is the starting point for many at the site who may be looking for .NET 2.0 support.",Fix for LOG4NET-135. Improve documentation for resetting log file once per application run., MODIFY config-examples.xml
0,LOG4NET-266,a06839a335c7f13c865ee4bfb30982f67a2a63b9,"AdoNetAppender does not work on a IIS 7 website using Windows authentication  When the Windows Authentication is deactivated, the AdoNetAppender works properly.

Howerver, once the Windows authentication is activated, the AdoNetAppender start working properly and then, after a few seconds, it is aborted and the following error message is retrieved:

log4net:ERROR [AdoNetAppender] Failed in DoAppend
System.ObjectDisposedException: Safe handle has been closed
   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)
   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)
   at Microsoft.Win32.Win32Native.GetTokenInformation(SafeTokenHandle TokenHandle, UInt32 TokenInformationClass, SafeLocalAllocHandle TokenInformation, UInt32 TokenInformationLength, UInt32& ReturnLength)
   at System.Security.Principal.WindowsIdentity.GetTokenInformation(SafeTokenHandle tokenHandle, TokenInformationClass tokenInformationClass)
   at System.Security.Principal.WindowsIdentity.get_User()
   at System.Security.Principal.WindowsIdentity.GetName()
   at System.Security.Principal.WindowsIdentity.get_Name()
   at log4net.Core.LoggingEvent.get_Identity()
   at log4net.Core.LoggingEvent.FixVolatileData(FixFlags flags)
   at log4net.Appender.BufferingAppenderSkeleton.Append(LoggingEvent loggingEvent)
   at log4net.Appender.AppenderSkeleton.DoAppend(LoggingEvent loggingEvent)


See below the settings of the appender. Various options (i.e. Securitycontext )  have also been tested in vain.

<appender name=""AdoNetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
		<bufferSize value=""1"" />
		  <connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
		  <connectionString value=""data source=WWWWWW;initial catalog=XXXXX;integrated security=false;persist security info=True;User ID=sa;Password=YYYYYYYY"" />
		 <commandText value=""sp_LOG_Insert""/>
		<commandType value=""StoredProcedure"" />
			<parameter>
			<parameterName value=""@DATE"" />
			<dbType value=""DateTime"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
		</parameter>
		<parameter>
			<parameterName value=""@THREAD"" />
			<dbType value=""String"" />
			<size value=""255"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%thread"" />
		</parameter>
		<parameter>
			<parameterName value=""@LEVEL"" />
			<dbType value=""String"" />
			<size value=""50"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%level"" />
		</parameter>
		<parameter>
			<parameterName value=""@LOGGER"" />
			<dbType value=""String"" />
			<size value=""255"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%logger"" />
		</parameter>
		<parameter>
			<parameterName value=""@MESSAGE"" />
			<dbType value=""String"" />
			<size value=""8000"" />
			<layout type=""log4net.Layout.PatternLayout"" value=""%message"" />
		</parameter>
	  
	</appender>

",LOG4NET-354 added a configuration option that allows to configure the subject and body encoding, MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-382,8d38538aadae55824e5059583e8a3a4a85d97f6d,"TargetInvocationException occurs because MESSAGE_SIZE fields in EventLogAppender are initialized in wrong order In log4net.Appender.EventLogAppender:

The MAX_EVENTLOG_MESSAGE_SIZE field is initiated before MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER.  Therefore, when MAX_EVENTLOG_MESSAGE_SIZE is set during construction, MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER are zero.

The end result is that a TargetInvocationException occurs in log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement appenderElement) (Line 303) and that the message recorded in the event log is empty.
",LOG4NET-341 fix stack frame item compilation warning, MODIFY StackFrameItem.csStackFrameItem StackFrameItem
0,LOG4NET-388,9ad6da147b8a6d97346502e727f53a71e46b8b2d,"[PATCH] NotSupportedException is thrown in SystemInfo.AssemblyLocationInfo for dynamic assemblies For dynamic assemblies ""Location"" property shouldn't be used (http://msdn.microsoft.com/en-us/library/system.reflection.assembly.location.aspx).
Therefore in log4net.Util.SystemInfo we can test if assembly is dynamic and in result avoid exception.

Exception is very annoying and popular with NHibernate 3.3.3.4001.

I have added both fix and test.",Username is always fixed thanks to LOG4NET-205, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix
0,LOG4NET-310,09f7293056e8abf36655537318384e9bd0ff5c9e,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-167,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-241,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
1,LOG4NET-58,974427fe43314c80595bb726862f5dfb02b15abd,"Support clean build on .NET 2.0 Updates to the source that allow building under .NET 2.0 RTM with no source code related warnings.  Warnings that do appear are related to xml documentation, and a deprecated nant method call.  Updates are commented as appropriate to indicate the compiler warning resolved.

I updated the nant build file to include a new reference needed for 2.0 but since nant (as of 0.85 rc3) doesn't recognize the new framework yet I was unable to test building using the nant build.  Visual Studio 2005 solution/project files are attached.","Fix for LOG4NET-58 Support clean build on .NET 2.0.
Updates to work around obsolete warning messages from the MS .NET 2.0 compiler.", MODIFY log4net.build MODIFY EventLogAppender.csEventLogAppender ActivateOptions EventLogAppender CreateEventSource MODIFY SmtpAppender.csSmtpAppender SendBuffer MODIFY XmlConfigurator.csXmlConfigurator Configure XmlConfigurator Configure MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository MODIFY LevelMap.cs MODIFY LoggerManager.csLoggerManager LoggerManager MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator Configure MODIFY LogLog.csLogLog LogLog MODIFY SystemInfo.csSystemInfo GetAppSetting SystemInfo CreateCaseInsensitiveHashtable SystemInfo SystemInfo MODIFY IPAddressConverter.csIPAddressConverter ConvertFrom MODIFY RemotingAppenderTest.csRemotingAppenderTest RegisterRemotingServerChannel MODIFY XmlLayoutTest.csXmlLayoutTest createEventNode XmlLayoutTest createEventNode
0,LOG4NET-69,5f64f8de9766f3ac66e2aec8dc62eb2439171c4f,"Exception thrown when *Format methods are given a malformed format string FormatException thrown when *Format methods are given a malformed format string: log.DebugFormat(""Malformed {{,,,5}format{8}!"");

This statement:

 log.DebugFormat(""Malformed {{,,,5}format{8}!"");

throws the following exception:

[FormatException: Input string was not in a correct format.]
   System.Text.StringBuilder.FormatError()
   System.Text.StringBuilder.AppendFormat(IFormatProvider provider, String format, Object[] args)
   System.String.Format(IFormatProvider provider, String format, Object[] args)
   log4net.Core.LogImpl.DebugFormat(String format, Object[] args)

which is consistent with the documentation for String.Format:

System.FormatException: The format item in format is invalid.  -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.  ",Fix for LOG4NET-73. Added code to cleanup the connection and command objects that are stored in members if the InitializeDatabaseConnection method is called multiple times., MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-296,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Patch for .net 4, client profile and a fix for the name resolution bug  ",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-38,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
1,LOG4NET-335,ca41de816d183c517c287b4743073f6f4feb3bc6,"Lost the ability to monitor changes to logger config files when you call ConfigureAndWatch multiple times with different Config File Names - worked fine on 1.2.10.0 We had a class that wraps log4net that is in a shared assembly, multiple components in our application create instances to the Log 4 Net Wrapper, each component has its own log config file.

When the Log4Net wrapper class is constructed it uses log4net.Logmanager to ConfigureAndWatch the log config file passed in to it by the calling component. We recently upgraded from log4net 1.2.10.0 to 1.2.11.0 and log4net no longer detects when the log configuration file is modified. I looked at the source code fro 1.2.11.0 and it appears that it only allows one ConfigureAndWatchHandler object and if you attempt to ConfigureAndWatch more than one logger config file, the previous one is Disposed, thereby removing the ability to detect config file changes",LOG4NET-335 fix InternalConfigureAndWatch to allow exactly one watch handler for every config file instead of one watch handler for every repository, MODIFY XmlConfigurator.csXmlConfigurator InternalConfigureAndWatch
0,LOG4NET-132,0b5dce128eb255fd55ad23421745011db7b700bb,"Environment variables are mistakenly case sensitive on windows On windows, environment variables are meant to be case insensitive.  Because of this, in some contexts, a special IDictionary class that lowercases all the keys is used to manipulate environment variables, specifically ProcessStartInfo.EnvironmentVariables.

The upshot of this, for me, is that when running under the profiler I have, all the environment variables get lowercased, and my logging configuration is broken, because TEMP is now temp, and log4net is treating the environment variables in a case sensitive manner, from using Environment.GetEnvironmentVariables(), which creates a normal case sensitive Hashtable object.

It seems that, on windows, the result of Environment.GetEnvironmentVariables() should be copied into a StringDictionary to get proper case insensitive behavior.",LOG4NET-71 move log4net's sources to a subdirectory, MODIFY log4net.build MODIFY log4net.include RENAME AdoNetAppender.cs RENAME AnsiColorTerminalAppender.cs RENAME AppenderCollection.cs RENAME AppenderSkeleton.cs RENAME AspNetTraceAppender.cs RENAME BufferingAppenderSkeleton.cs RENAME BufferingForwardingAppender.cs RENAME ColoredConsoleAppender.cs RENAME ConsoleAppender.cs RENAME DebugAppender.cs RENAME EventLogAppender.cs RENAME FileAppender.cs RENAME ForwardingAppender.cs RENAME IAppender.cs RENAME IBulkAppender.cs RENAME LocalSyslogAppender.cs RENAME ManagedColoredConsoleAppender.cs RENAME MemoryAppender.cs RENAME NetSendAppender.cs RENAME OutputDebugStringAppender.cs RENAME RemoteSyslogAppender.cs RENAME RemotingAppender.cs RENAME RollingFileAppender.cs RENAME SmtpAppender.cs RENAME SmtpPickupDirAppender.cs RENAME TelnetAppender.cs RENAME TextWriterAppender.cs RENAME TraceAppender.cs RENAME UdpAppender.cs RENAME AssemblyInfo.cs RENAME AssemblyVersionInfo.cpp RENAME AssemblyVersionInfo.cs RENAME AssemblyVersionInfo.js RENAME AssemblyVersionInfo.vb RENAME AliasDomainAttribute.cs RENAME AliasRepositoryAttribute.cs RENAME BasicConfigurator.cs RENAME ConfiguratorAttribute.cs RENAME DOMConfigurator.cs RENAME DOMConfiguratorAttribute.cs RENAME DomainAttribute.cs RENAME Log4NetConfigurationSectionHandler.cs RENAME PluginAttribute.cs RENAME RepositoryAttribute.cs RENAME SecurityContextProviderAttribute.cs RENAME XmlConfigurator.cs RENAME XmlConfiguratorAttribute.cs RENAME CompactRepositorySelector.cs RENAME DefaultRepositorySelector.cs RENAME ErrorCode.cs RENAME ExceptionEvaluator.cs RENAME IAppenderAttachable.cs RENAME IErrorHandler.cs RENAME IFixingRequired.cs RENAME ILogger.cs RENAME ILoggerWrapper.cs RENAME IOptionHandler.cs RENAME IRepositorySelector.cs RENAME ITriggeringEventEvaluator.cs RENAME Level.cs RENAME LevelCollection.cs RENAME LevelEvaluator.cs RENAME LevelMap.cs RENAME LocationInfo.cs RENAME LogException.cs RENAME LogImpl.cs RENAME LoggerManager.cs RENAME LoggerWrapperImpl.cs RENAME LoggingEvent.cs RENAME MethodItem.cs RENAME SecurityContext.cs RENAME SecurityContextProvider.cs RENAME StackFrameItem.cs RENAME TimeEvaluator.cs RENAME WrapperMap.cs RENAME AbsoluteTimeDateFormatter.cs RENAME DateTimeDateFormatter.cs RENAME IDateFormatter.cs RENAME Iso8601DateFormatter.cs RENAME SimpleDateFormatter.cs RENAME DenyAllFilter.cs RENAME FilterDecision.cs RENAME FilterSkeleton.cs RENAME IFilter.cs RENAME LevelMatchFilter.cs RENAME LevelRangeFilter.cs RENAME LoggerMatchFilter.cs RENAME MdcFilter.cs RENAME NdcFilter.cs RENAME PropertyFilter.cs RENAME StringMatchFilter.cs RENAME GlobalContext.cs RENAME ILog.cs RENAME DynamicPatternLayout.cs RENAME ExceptionLayout.cs RENAME ILayout.cs RENAME IRawLayout.cs RENAME Layout2RawLayoutAdapter.cs RENAME LayoutSkeleton.cs RENAME AppDomainPatternConverter.cs RENAME AspNetCachePatternConverter.cs RENAME AspNetContextPatternConverter.cs RENAME AspNetPatternConverter.cs RENAME AspNetRequestPatternConverter.cs RENAME AspNetSessionPatternConverter.cs RENAME DatePatternConverter.cs RENAME ExceptionPatternConverter.cs RENAME FileLocationPatternConverter.cs RENAME FullLocationPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LevelPatternConverter.cs RENAME LineLocationPatternConverter.cs RENAME LoggerPatternConverter.cs RENAME MessagePatternConverter.cs RENAME MethodLocationPatternConverter.cs RENAME NamedPatternConverter.cs RENAME NdcPatternConverter.cs RENAME PatternLayoutConverter.cs RENAME PropertyPatternConverter.cs RENAME RelativeTimePatternConverter.cs RENAME StackTraceDetailPatternConverter.cs RENAME StackTracePatternConverter.cs RENAME ThreadPatternConverter.cs RENAME TypeNamePatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PatternLayout.cs RENAME RawLayoutConverter.cs RENAME RawPropertyLayout.cs RENAME RawTimeStampLayout.cs RENAME RawUtcTimeStampLayout.cs RENAME SimpleLayout.cs RENAME XMLLayout.cs RENAME XMLLayoutBase.cs RENAME XmlLayoutSchemaLog4j.cs RENAME Log4netAssemblyInfo.cs RENAME LogManager.cs RENAME LogicalThreadContext.cs RENAME MDC.cs RENAME NDC.cs RENAME DefaultRenderer.cs RENAME IObjectRenderer.cs RENAME RendererMap.cs RENAME IPlugin.cs RENAME IPluginFactory.cs RENAME PluginCollection.cs RENAME PluginMap.cs RENAME PluginSkeleton.cs RENAME RemoteLoggingServerPlugin.cs RENAME ConfigurationChangedEventArgs.cs RENAME DefaultLoggerFactory.cs RENAME Hierarchy.cs RENAME ILoggerFactory.cs RENAME Logger.cs RENAME LoggerKey.cs RENAME ProvisionNode.cs RENAME RootLogger.cs RENAME XmlHierarchyConfigurator.cs RENAME IBasicRepositoryConfigurator.cs RENAME ILoggerRepository.cs RENAME IXmlRepositoryConfigurator.cs RENAME LoggerRepositorySkeleton.cs RENAME ThreadContext.cs RENAME AppenderAttachedImpl.cs RENAME CompositeProperties.cs RENAME ContextPropertiesBase.cs RENAME ConverterInfo.cs RENAME CountingQuietTextWriter.cs RENAME CyclicBuffer.cs RENAME EmptyCollection.cs RENAME EmptyDictionary.cs RENAME FormattingInfo.cs RENAME GlobalContextProperties.cs RENAME ILogExtensions.cs RENAME LevelMapping.cs RENAME LevelMappingEntry.cs RENAME LogLog.cs RENAME LogicalThreadContextProperties.cs RENAME NativeError.cs RENAME NullDictionaryEnumerator.cs RENAME NullEnumerator.cs RENAME NullSecurityContext.cs RENAME OnlyOnceErrorHandler.cs RENAME OptionConverter.cs RENAME PatternConverter.cs RENAME PatternParser.cs RENAME PatternString.cs RENAME AppDomainPatternConverter.cs RENAME DatePatternConverter.cs RENAME EnvironmentFolderPathPatternConverter.cs RENAME EnvironmentPatternConverter.cs RENAME IdentityPatternConverter.cs RENAME LiteralPatternConverter.cs RENAME NewLinePatternConverter.cs RENAME ProcessIdPatternConverter.cs RENAME PropertyPatternConverter.cs RENAME RandomStringPatternConverter.cs RENAME UserNamePatternConverter.cs RENAME UtcDatePatternConverter.cs RENAME PropertiesDictionary.cs RENAME PropertyEntry.cs RENAME ProtectCloseTextWriter.cs RENAME QuietTextWriter.cs RENAME ReadOnlyPropertiesDictionary.cs RENAME ReaderWriterLock.cs RENAME ReusableStringWriter.cs RENAME SystemInfo.cs RENAME SystemStringFormat.cs RENAME TextWriterAdapter.cs RENAME ThreadContextProperties.cs RENAME ThreadContextStack.cs RENAME ThreadContextStacks.cs RENAME Transform.cs RENAME BooleanConverter.cs RENAME ConversionNotSupportedException.cs RENAME ConverterRegistry.cs RENAME EncodingConverter.cs RENAME IConvertFrom.cs RENAME IConvertTo.cs RENAME IPAddressConverter.cs RENAME PatternLayoutConverter.cs RENAME PatternStringConverter.cs RENAME TypeConverter.cs RENAME TypeConverterAttribute.cs RENAME WindowsSecurityContext.cs RENAME log4net.vs2008.csproj RENAME log4net.vs2008.sln RENAME log4net.vs2010.csproj RENAME log4net.vs2010.sln MODIFY nant.build MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-405,52999cd7cca7a2ff0231d54d2fae40e9674e04ec,"SmtpAppender encoding changes After update to log4net 1.2.12 email encoding changed and my mail client
fail to render unicode symbols.
I think changes made for issue https://issues.apache.org/jira/browse/LOG4NET-354 brake encoding in SmtpAppender
log4net 1.2.10 use utf-8 encoding by default, below headers from email
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: base64
after update on log4net 1.2.12 email encoding koi8-r
Content-Type: text/plain; charset=koi8-r
Content-Transfer-Encoding: quoted-printable
I think change default encoding from utf-8 is pretty strange.

Proposed fix:
Do not use Encoding.Default, let SubjectEncoding and BodyEncoding by default be null, on email send set encoding only if field not null.",merge LOG4NET-132 fix from 1.2.x branch, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateCaseInsensitiveWrapper ADD XmlHierarchyConfiguratorTest.csXmlHierarchyConfiguratorTest SetTestPropWithPath XmlHierarchyConfiguratorTest TestConfigurator PublicSetParameter XmlHierarchyConfiguratorTest EnvironmentOnWindowsIsCaseInsensitive XmlHierarchyConfiguratorTest EnvironmentOnUnixIsCaseSensitive XmlHierarchyConfiguratorTest TestConfigurator TestConfigurator
0,LOG4NET-113,0b84492f43c8c769e7453e675f111b56e5263712,"[PATCH] SystemInfo.GetTypeFromString() raises NotSupportedException BUG:
Calling the GetTypeFromString(string, bool, bool) method in .NET CF 2.0 SP1 on Windows CE 4.2 raises a NotSupportedException if the supplied typeName parameter contains a comma ("","") and both boolean values are ""true"", i.e. when specifying a type and the including assembly in the log4net XML configuration.
The exception stems from the overloaded Type.GetType method that takes three parameters. When using the two parameter Type.GetType method, everything works fine.

Steps to reproduce:
On the described environment configure e.g. an Appender and supply the assembly name in the ""type"" attribute.

PATCH:
The patch simply uses the two parameter GetType overload for all NETCF frameworks instead of only for NETCF_1_0.
","Fix for LOG4NET-98.
Updated all source, build and doc files to use new Apache source headers as per http://www.apache.org/legal/src-headers.html", MODIFY NOTICE.txt MODIFY contributing.html MODIFY downloads.html MODIFY history.html MODIFY index.html MODIFY license.html MODIFY building.html MODIFY config-examples.html MODIFY example-apps.html MODIFY faq.html MODIFY features.html MODIFY framework-support.html MODIFY chainsaw.html MODIFY index.html MODIFY configuration.html MODIFY contexts.html MODIFY internals.html MODIFY introduction.html MODIFY plugins.html MODIFY repositories.html MODIFY release-notes.html MODIFY roadmap.html MODIFY support.html MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AsyncAppender.cs MODIFY FastDbAppender.cs MODIFY FireEventAppender.cs MODIFY MessageBoxAppender.cs MODIFY MessageObjectExpanderAppender.cs MODIFY MsmqAppender.cs MODIFY PatternFileAppender.cs MODIFY SimpleSmtpAppender.cs MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY IWmiBoundEvent.cs MODIFY WmiAppender.cs MODIFY WmiInstaller.cs MODIFY WmiLayout.cs MODIFY WmiLoggingEvent.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY TraceLogApp.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ForwardingLayout.cs MODIFY LineWrappingLayout.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY NotLogging.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY NotLogging.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingClient.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY RemotingServer.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY Math.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cs MODIFY Global.asax.cs MODIFY WebForm1.aspx.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY AssemblyVersionInfo.vb MODIFY Global.asax.vb MODIFY WebForm1.aspx.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY EntryPoint.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY Math.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cpp MODIFY ConsoleApp.cpp MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY LoggingExample.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.vb MODIFY EntryPoint.vb MODIFY LoggingExample.vb MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EntryPoint.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY Math.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.js MODIFY LoggingExample.js MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY EventIDLogImpl.cs MODIFY EventIDLogManager.cs MODIFY IEventIDLog.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY MarshalByRefLogImpl.cs MODIFY MarshalByRefLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY AssemblyInfo.cs MODIFY ITraceLog.cs MODIFY TraceLogImpl.cs MODIFY TraceLogManager.cs MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY nant.build MODIFY nant.config MODIFY log4net-sdk.ndoc MODIFY log4net.build MODIFY log4net.include MODIFY AdoNetAppender.cs MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderCollection.cs MODIFY AppenderSkeleton.cs MODIFY AspNetTraceAppender.cs MODIFY BufferingAppenderSkeleton.cs MODIFY BufferingForwardingAppender.cs MODIFY ColoredConsoleAppender.cs MODIFY ConsoleAppender.cs MODIFY DebugAppender.cs MODIFY EventLogAppender.cs MODIFY FileAppender.cs MODIFY ForwardingAppender.cs MODIFY IAppender.cs MODIFY IBulkAppender.cs MODIFY LocalSyslogAppender.cs MODIFY MemoryAppender.cs MODIFY NetSendAppender.cs MODIFY OutputDebugStringAppender.cs MODIFY RemoteSyslogAppender.cs MODIFY RemotingAppender.cs MODIFY RollingFileAppender.cs MODIFY SmtpAppender.cs MODIFY SmtpPickupDirAppender.cs MODIFY TelnetAppender.cs MODIFY TextWriterAppender.cs MODIFY TraceAppender.cs MODIFY UdpAppender.cs MODIFY AssemblyInfo.cs MODIFY AssemblyVersionInfo.cpp MODIFY AssemblyVersionInfo.cs MODIFY AssemblyVersionInfo.js MODIFY AssemblyVersionInfo.vb MODIFY AliasDomainAttribute.cs MODIFY AliasRepositoryAttribute.cs MODIFY BasicConfigurator.cs MODIFY ConfiguratorAttribute.cs MODIFY DOMConfigurator.cs MODIFY DOMConfiguratorAttribute.cs MODIFY DomainAttribute.cs MODIFY Log4NetConfigurationSectionHandler.cs MODIFY PluginAttribute.cs MODIFY RepositoryAttribute.cs MODIFY SecurityContextProviderAttribute.cs MODIFY XmlConfigurator.cs MODIFY XmlConfiguratorAttribute.cs MODIFY CompactRepositorySelector.cs MODIFY DefaultRepositorySelector.cs MODIFY ErrorCode.cs MODIFY ExceptionEvaluator.cs MODIFY IAppenderAttachable.cs MODIFY IErrorHandler.cs MODIFY IFixingRequired.cs MODIFY ILogger.cs MODIFY ILoggerWrapper.cs MODIFY IOptionHandler.cs MODIFY IRepositorySelector.cs MODIFY ITriggeringEventEvaluator.cs MODIFY Level.cs MODIFY LevelCollection.cs MODIFY LevelEvaluator.cs MODIFY LevelMap.cs MODIFY LocationInfo.cs MODIFY LogException.cs MODIFY LogImpl.cs MODIFY LoggerManager.cs MODIFY LoggerWrapperImpl.cs MODIFY LoggingEvent.cs MODIFY SecurityContext.cs MODIFY SecurityContextProvider.cs MODIFY WrapperMap.cs MODIFY AbsoluteTimeDateFormatter.cs MODIFY DateTimeDateFormatter.cs MODIFY IDateFormatter.cs MODIFY Iso8601DateFormatter.cs MODIFY SimpleDateFormatter.cs MODIFY DenyAllFilter.cs MODIFY FilterDecision.cs MODIFY FilterSkeleton.cs MODIFY IFilter.cs MODIFY LevelMatchFilter.cs MODIFY LevelRangeFilter.cs MODIFY LoggerMatchFilter.cs MODIFY MdcFilter.cs MODIFY NdcFilter.cs MODIFY PropertyFilter.cs MODIFY StringMatchFilter.cs MODIFY GlobalContext.cs MODIFY ILog.cs MODIFY ExceptionLayout.cs MODIFY ILayout.cs MODIFY IRawLayout.cs MODIFY Layout2RawLayoutAdapter.cs MODIFY LayoutSkeleton.cs MODIFY AppDomainPatternConverter.cs MODIFY AspNetCachePatternConverter.cs MODIFY AspNetContextPatternConverter.cs MODIFY AspNetPatternConverter.cs MODIFY AspNetRequestPatternConverter.cs MODIFY AspNetSessionPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY ExceptionPatternConverter.cs MODIFY FileLocationPatternConverter.cs MODIFY FullLocationPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LevelPatternConverter.cs MODIFY LineLocationPatternConverter.cs MODIFY LoggerPatternConverter.cs MODIFY MessagePatternConverter.cs MODIFY MethodLocationPatternConverter.cs MODIFY NamedPatternConverter.cs MODIFY NdcPatternConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RelativeTimePatternConverter.cs MODIFY ThreadPatternConverter.cs MODIFY TypeNamePatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PatternLayout.cs MODIFY RawLayoutConverter.cs MODIFY RawPropertyLayout.cs MODIFY RawTimeStampLayout.cs MODIFY RawUtcTimeStampLayout.cs MODIFY SimpleLayout.cs MODIFY XMLLayout.cs MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.cs MODIFY LogManager.cs MODIFY LogicalThreadContext.cs MODIFY MDC.cs MODIFY NDC.cs MODIFY DefaultRenderer.cs MODIFY IObjectRenderer.cs MODIFY RendererMap.cs MODIFY IPlugin.cs MODIFY IPluginFactory.cs MODIFY PluginCollection.cs MODIFY PluginMap.cs MODIFY PluginSkeleton.cs MODIFY RemoteLoggingServerPlugin.cs MODIFY DefaultLoggerFactory.cs MODIFY Hierarchy.cs MODIFY ILoggerFactory.cs MODIFY Logger.cs MODIFY LoggerKey.cs MODIFY ProvisionNode.cs MODIFY RootLogger.cs MODIFY XmlHierarchyConfigurator.cs MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.cs MODIFY ThreadContext.cs MODIFY AppenderAttachedImpl.cs MODIFY CompositeProperties.cs MODIFY ContextPropertiesBase.cs MODIFY CountingQuietTextWriter.cs MODIFY CyclicBuffer.cs MODIFY EmptyCollection.cs MODIFY EmptyDictionary.cs MODIFY FormattingInfo.cs MODIFY GlobalContextProperties.cs MODIFY LevelMapping.cs MODIFY LevelMappingEntry.cs MODIFY LogLog.cs MODIFY LogicalThreadContextProperties.cs MODIFY NativeError.cs MODIFY NullDictionaryEnumerator.cs MODIFY NullEnumerator.cs MODIFY NullSecurityContext.cs MODIFY OnlyOnceErrorHandler.cs MODIFY OptionConverter.cs MODIFY PatternConverter.cs MODIFY PatternParser.cs MODIFY PatternString.cs MODIFY AppDomainPatternConverter.cs MODIFY DatePatternConverter.cs MODIFY EnvironmentPatternConverter.cs MODIFY IdentityPatternConverter.cs MODIFY LiteralPatternConverter.cs MODIFY NewLinePatternConverter.cs MODIFY ProcessIdPatternConverter.cs MODIFY PropertyPatternConverter.cs MODIFY RandomStringPatternConverter.cs MODIFY UserNamePatternConverter.cs MODIFY UtcDatePatternConverter.cs MODIFY PropertiesDictionary.cs MODIFY ProtectCloseTextWriter.cs MODIFY QuietTextWriter.cs MODIFY ReadOnlyPropertiesDictionary.cs MODIFY ReaderWriterLock.cs MODIFY ReusableStringWriter.cs MODIFY SystemInfo.cs MODIFY SystemStringFormat.cs MODIFY TextWriterAdapter.cs MODIFY ThreadContextProperties.cs MODIFY ThreadContextStack.cs MODIFY ThreadContextStacks.cs MODIFY Transform.cs MODIFY BooleanConverter.cs MODIFY ConversionNotSupportedException.cs MODIFY ConverterRegistry.cs MODIFY EncodingConverter.cs MODIFY IConvertFrom.cs MODIFY IConvertTo.cs MODIFY IPAddressConverter.cs MODIFY PatternLayoutConverter.cs MODIFY PatternStringConverter.cs MODIFY TypeConverter.cs MODIFY TypeConverterAttribute.cs MODIFY WindowsSecurityContext.cs MODIFY nant.build MODIFY BufferingAppenderTest.cs MODIFY CountingAppender.cs MODIFY EventLogAppenderTest.cs MODIFY RemotingAppenderTest.cs MODIFY RollingFileAppenderTest.cs MODIFY StringAppender.cs MODIFY AssemblyInfo.cs MODIFY ThreadContextTest.cs MODIFY FixingTest.cs MODIFY ShutdownTest.cs MODIFY StringFormatTest.cs MODIFY Logger.cs MODIFY PatternLayoutTest.cs MODIFY XmlLayoutTest.cs MODIFY CyclicBufferTest.cs MODIFY PropertiesDictionaryTest.cs MODIFY RandomStringPatternConverterTest.cs MODIFY SystemInfoTest.cs MODIFY Utils.cs MODIFY contributing.xml MODIFY downloads.xml MODIFY history.xml MODIFY index.xml MODIFY license.xml MODIFY building.xml MODIFY config-examples.xml MODIFY example-apps.xml MODIFY faq.xml MODIFY features.xml MODIFY framework-support.xml MODIFY chainsaw.xml MODIFY index.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY internals.xml MODIFY introduction.xml MODIFY plugins.xml MODIFY repositories.xml MODIFY release-notes.xml MODIFY roadmap.xml MODIFY project.xml MODIFY site.vsl MODIFY support.xml
0,LOG4NET-386,2f3bb2d6736c90407b942e053d63916e16dac66e,Can't access ThreadContext properties I want to be able to retrieve all the properties out of ThreadContext.Properties collection.  This collection does not expose any methods for iteration or for getting keys out of the dictionary.  Could something be added to do this?  (I apologize in advance for filling out any fields incorrectly. This is my first time logging an issue.),LOG4NET-342 added a FAQ entry that describes how to check if the repository was configured and how one can enumerate the configuration messages, MODIFY faq.xml
0,LOG4NET-460,3db262186c8ae7aee64d6e9278bf6298ecf4e9d1,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.","Some optimizations in locking for LOG4NET-376

* remove inner lock in favor of fresh StringBuilders
* reduce extent of outer lock

also throw in generic dictionary for good measure", MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
1,LOG4NET-71,c152704aa155d20cc835583419cd6b909a78418f,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.","LOG4NET-71 move around extensions.  Don't try to build them, yet", DELETE nant.build DELETE nant.config DELETE cs-extensions.sln DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config DELETE nant.build DELETE nant.config RENAME AssemblyInfo.cs RENAME EventIDLogImpl.cs RENAME EventIDLogManager.cs RENAME IEventIDLog.cs RENAME log4net.Ext.EventID.csproj RENAME AssemblyInfo.cs RENAME MarshalByRefLogImpl.cs RENAME MarshalByRefLogManager.cs RENAME log4net.Ext.MarshalByRef.csproj
0,LOG4NET-148,ca41de816d183c517c287b4743073f6f4feb3bc6,"ThreadContext uses LocalDataStore to store ThreadSpecific data instead should be using  [ThreadStatic] variables. According to this article (http://blogs.msdn.com/junfeng/archive/2005/12/31/508423.aspx) and production issues encountered: using LocalDataStore is not a scalable approach for any web server that gets a significant amount of traffic.

The ThreadContext object should be modified to use [ThreadStatic] variables.

From the article:
The Whidbey RTM implementation of Thread.GetData/Thread.SetData has several scalability issues caused by global locks being taken. The appdomain-global lock taken in LocalDataStore.SetData is one of them. There is another global lock taken in ThreadNative::GetDomainLocalStore that is even worse since it is process-global.

The best workaround is to use [ThreadStatic] variables instead of Thread.GetData/Thread.SetData",LOG4NET-335 fix InternalConfigureAndWatch to allow exactly one watch handler for every config file instead of one watch handler for every repository, MODIFY XmlConfigurator.csXmlConfigurator InternalConfigureAndWatch
0,LOG4NET-11,eb02bce2d20473bba7b2fddbad056f90651054dd,"Add Flush command to API While using Buffering is a wonderful way to help improve
performance, I would like the ability to programatically
tell the current ILog object to flush any buffers that
exist on the appenders that I've been logging to so that
I can get any messages that I've sent rather than
waiting for the buffer to fill up.

Thus, one might be able to do the following:

""log.Flush();""

and then any messages sent to that ILog object would
be processed.

Kevin Conroy - kmconroy

----

I vote for this one too!

dcazzulino",Fix for LOG4NET-45. Added constructor and property to take plugin type as a Type, MODIFY PluginAttribute.csPluginAttribute ToString PluginAttribute PluginAttribute PluginAttribute CreatePlugin PluginAttribute PluginAttribute PluginAttribute PluginAttribute
0,LOG4NET-378,cb150d88f8da4a06f829d6c47d2222f48a84baad,"Rolling log file is overwritten when application is restarted My server process uses log files which roll on date and file size (4MB). 
When I restart the server and there are already more than 1 log files for the current date, the 2nd segment gets overwritten and the 3rd, 4th, ... may get overwritten later, when #2 is filled up again.
I'm using version 1.2.11, which I can't select in the ""Affects Version"" combo box.

e.g. 
flotto.20130527.0.log = 4MB
flotto.20130527.1.log = 0MB (just got overwritten when the server was restarted)
flotto.20130527.2.log = 4MB (still contains original data but will be overwritten too as soon as #1 fills up)
flotto.20130527.3.log = 4MB (same as above)


The configuration in MyServer.exe.config looks like this:
<log4net>
    <appender name=""LogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
      <file value=""flotto.log"" />
      <appendToFile value=""true"" />
      <encoding>utf-8</encoding>
      <preserveLogFileNameExtension value=""true""/>
      <rollingStyle value=""Composite"" />
      <staticLogFileName value=""false"" />
      <datePattern value="".yyyyMMdd""/>
      <countDirection value=""1""/>
      <maximumFileSize value=""4MB"" />
      <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""%date [%-7thread] %-5level %-35logger - %message%newline"" />
      </layout>
    </appender>
    <root>
      <level value=""INFO"" />
      <appender-ref ref=""LogFileAppender""/>
    </root>
    <logger name=""Flotto.FlottoService"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.TcpServer"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.UdpBroadcastReceiver"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.GpsTrackerGprsServer"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.TrackerManager"">
      <!--<level value=""INFO""/>-->
    </logger>
  </log4net>
",LOG4NET-379 fixed an avoidable NullReferenceException raised in the Fileappender ActivateOptions(), MODIFY FileAppender.csFileAppender ActivateOptions
0,LOG4NET-117,e1c9c3b7bb26b3564062859a86b38b793048548a,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",FixingTest failed when rerunning tests in NUnit GUI without reloading the DLL.  Related to LOG4NET-301, MODIFY FixingTest.csFixingTest TestAllFixedValues FixingTest FixingTest FixingTest TestUnfixedValues FixingTest AssertExpectedLoggingEvent FixingTest CreateRepository FixingTest TestNoFixedValues
0,LOG4NET-654,47aaf46d5f031ea29d781bac4617bd1bb9446215,"WEBSITE - SDK Reference link broken Its not possible to read the SDK.

There is no means to contact anyone about this other that raise a bug.

 

https://logging.apache.org/log4net/release/sdk/index.html",":bookmark: bump version to 2.0.12, fixes LOG4NET-(652|653)", MODIFY package.json MODIFY LoggingEvent.csLoggingEvent TryGetCurrentUserName MODIFY log4net.csproj
0,LOG4NET-129,73a4921de015d4262273055b04ea37206a224038,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-460,964fad01933ec029bbbff6631bfc7d559be75e6e,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",silly little timimg helper for LOG4NET-376, ADD AbsoluteTimeDateFormatterTiming.csAbsoluteTimeDateFormatterTiming Main AbsoluteTimeDateFormatterTiming SingleThread
0,LOG4NET-393,0119c40a291be35b13f05c981bd6463e7a5516fc,"Using dynamic methods with log4net causes NullReferenceException in StackFrameItem In our production code we use dynamic methods e.g. when using the factory pattern. We upgraded from 1.2.10 to 1.2.12 and encountered the following exception:

log4net:ERROR An exception ocurred while retreiving stack frame information.
System.NullReferenceException: Object reference not set to an instance of an object.
   at log4net.Core.StackFrameItem..ctor(StackFrame frame) in c:\Users\wilfred.dittmer\Documents\Visual Studio 2012\Projects\Log4netLambaExpressionTest\log4net-1.2.12-src\log4net-1.2.12\src\Core\StackFrameItem.cs:line 61

I created a test project (attached) which shows the exception occuring.
If the method is: {System.Object lambda_method(System.Runtime.CompilerServices.Closure)}
then one cannot access the DeclaringType. The code then tries to get the FullName of the null value which causes the exception.

According to: http://msdn.microsoft.com/en-us/library/system.reflection.emit.dynamicmethod.declaringtype.aspx

""DynamicMethod.DeclaringType: Gets the type that declares the method, which is always null for dynamic methods.""

So it seems best to check if DeclaringType is null and if so leave the m_className set to 'NA'.
",LOG4NET-394 added try/catch clauses in the ILogExtensions, MODIFY ILogExtensions.csILogExtensions DebugFormatExt ILogExtensions FatalFormatExt ILogExtensions DebugExt ILogExtensions DebugExt ILogExtensions WarnFormatExt ILogExtensions InfoExt ILogExtensions ErrorExt ILogExtensions ErrorExt ILogExtensions WarnExt ILogExtensions ErrorFormatExt ILogExtensions WarnExt ILogExtensions WarnExt ILogExtensions DebugFormatExt ILogExtensions InfoFormatExt ILogExtensions WarnFormatExt ILogExtensions ErrorExt ILogExtensions ErrorFormatExt ILogExtensions FatalExt ILogExtensions FatalFormatExt ILogExtensions InfoFormatExt ILogExtensions ErrorFormatExt ILogExtensions FatalFormatExt ILogExtensions ErrorExt ILogExtensions InfoExt ILogExtensions ErrorFormatExt ILogExtensions WarnExt ILogExtensions FatalExt ILogExtensions InfoExt ILogExtensions FatalFormatExt ILogExtensions DebugFormatExt ILogExtensions WarnFormatExt ILogExtensions InfoExt ILogExtensions ErrorFormatExt ILogExtensions DebugExt ILogExtensions InfoFormatExt ILogExtensions InfoFormatExt ILogExtensions FatalFormatExt ILogExtensions FatalExt ILogExtensions FatalExt ILogExtensions WarnFormatExt ILogExtensions DebugExt ILogExtensions InfoFormatExt ILogExtensions DebugFormatExt ILogExtensions WarnFormatExt ILogExtensions DebugFormatExt
0,LOG4NET-460,cca252c3090b1e8091d61ffdd0e97835146db31a,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
0,LOG4NET-494,17b09952215b8d43f52b6d411b74218429f8b595,"ArgumentOutOfRange with SQLite In AdoNetAppender.cs at line 561 :	
param.FormatValue(dbCmd, e);

In SQLite we need to call the Prepare function before FormatValue :
param.Prepare(dbCmd);

If Prepare not called, then SQLite generate an ArgumentOutOfRangeException because the parameters is not defined",LOG4NET-495: added buffering test for the AdoNetAppender, MODIFY AdoNetAppenderTest.csAdoNetAppenderTest NoBufferingTest AdoNetAppenderTest BufferingTest
0,LOG4NET-76,b9c24915eadbbb665778ef42524fd74d99eb969a,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-167,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-318,cb150d88f8da4a06f829d6c47d2222f48a84baad,"log4net doesn't pass verification Run PEVerify tool. (http://msdn.microsoft.com/en-us/library/62bwd2yd(v=VS.100).aspx)

I get
[IL]: Error: [log4net.dll : log4net.Plugin.RemoteLoggingServerPlugin::Attach][offset 0x00000029] Method is not visible.

It is a good idea to add verification step for the build process.

Thanks.
",LOG4NET-379 fixed an avoidable NullReferenceException raised in the Fileappender ActivateOptions(), MODIFY FileAppender.csFileAppender ActivateOptions
0,LOG4NET-344,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
0,LOG4NET-447,0d28efa8d9873efd2e6b7eb41a69a40b956e9a8e,"MemoryAppender class is not thread safe The memory appender cannot be used safely in an application that uses more than one thread to interact with logging.

When using this code to retrieve and then clear events logged in the memory appender:
var events = memoryAppender.GetEvents();
memoryAppender.Clear();

The executing thread may be preempted between these two calls and additional logging events logged. These events are then cleared when the thread resumes execution - and are never seen/processed.

I expect to be be able to retrieve and clear the list of current events in one call that guarantees that no events are ever lost.","LOG4NET-455 LogicalThreadContext does not flow correctly through async/await 
Patch by Alexander Houben

closes #12 by @ahouben", ADD LogicalThreadContextTest.csLogicalThreadContextTest TestLogicalThreadStackPattern LogicalThreadContextTest SomeWorkProperties LogicalThreadContextTest TestLogicalThreadStackPattern2 LogicalThreadContextTest TestLogicalThreadStackPatternNullVal LogicalThreadContextTest TestLogicalThreadPropertiesPatternBasicGetSet LogicalThreadContextTest MoreWorkStack LogicalThreadContextTest TearDown LogicalThreadContextTest TestLogicalThreadStackPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadPropertiesPatternAsyncAwait LogicalThreadContextTest TestLogicalThreadStackPatternNullVal2 LogicalThreadContextTest SomeWorkStack LogicalThreadContextTest MoreWorkProperties MODIFY Utils.csUtils RemovePropertyFromAllContexts MODIFY log4net.Tests.vs2010.csproj ADD log4net.Tests.vs2012.csproj MODIFY AssemblyInfo.cs MODIFY LogicalThreadContext.cs MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove ADD LogicalThreadContextStack.csLogicalThreadContextStack AutoPopStackFrame AutoPopStackFrame LogicalThreadContextStack Push LogicalThreadContextStack StackFrame if LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack ToString LogicalThreadContextStack Pop LogicalThreadContextStack GetFixedObject LogicalThreadContextStack Clear LogicalThreadContextStack LogicalThreadContextStack LogicalThreadContextStack StackFrame StackFrame LogicalThreadContextStack GetFullMessage ADD LogicalThreadContextStacks.csLogicalThreadContextStacks LogicalThreadContextStacks LogicalThreadContextStacks if LogicalThreadContextStacks if LogicalThreadContextStacks registerNew MODIFY log4net.vs2010.csproj ADD log4net.vs2012.csproj ADD log4net.vs2012.sln
1,LOG4NET-38,fc878ee7e72a20432534f7670c4549739170287b,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",Allow EventLog category to be specified via the LoggingEvent's properties or a configured value.  Based on patch by Ron Grabowsky.  LOG4NET-38, MODIFY EventLogAppender.csEventLogAppender Append MODIFY SystemInfo.csSystemInfo TryParse
1,LOG4NET-94,40452cf93b5838e865647a463137662eb4891119,"Incorrect config file for ..\examples\net\1.0\Tutorials\ConsoleApp The app.config file has some errors in it...


Line 39

is...
<sppendToFile value=""true"" />

should be...
<appendToFile value=""true"" />


Line 43

is...
<geader value=""[Header]&#13;&#10;"" />

should be...
<header value=""[Header]&#13;&#10;"" />



Line 87

is...
<commandText"" value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />

should be...
<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />



Line 94

is...
</param>

should be...
</layout>


-- Jeff Hegedus:  Corrected xml below ---

<?xml version=""1.0"" encoding=""utf-8"" ?>
<!-- 
		.NET application configuration file     
		This file must have the exact same name as your application with .config appended to it. 
		
		For example if your application is ConsoleApp.exe then the config file must be ConsoleApp.exe.config. 
		It must also be in the same directory as the application. 
	-->
<configuration>
	<!-- Register a section handler for the log4net section -->
	<configSections>
		<section name=""log4net"" type=""System.Configuration.IgnoreSectionHandler"" />
	</configSections>
	<appSettings>
		<!-- To enable internal log4net logging specify the following appSettings key -->
		<!-- <add key=""log4net.Internal.Debug"" value=""true""/> -->
	</appSettings>
	<!-- This section contains the log4net configuration settings -->
	<log4net>
		<!-- Define some output appenders -->
		<appender name=""RollingLogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file value=""rolling-log.txt"" />
			<appendToFile value=""true"" />
			<maxSizeRollBackups value=""10"" />
			<maximumFileSize value=""100"" />
			<rollingStyle value=""Size"" />
			<staticLogFileName value=""true"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<appender name=""LogFileAppender"" type=""log4net.Appender.FileAppender"">
			<file value=""log-file.txt"" />
			<!-- Example using environment variables in params -->
			<!-- <file value=""${TMP}\log-file.txt"" /> -->
			<appendToFile value=""true"" />
			<!-- An alternate output encoding can be specified -->
			<!-- <encoding value=""unicodeFFFE"" /> -->
			<layout type=""log4net.Layout.PatternLayout"">
				<header value=""[Header]&#13;&#10;"" />
				<footer value=""[Footer]&#13;&#10;"" />
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
			<!-- Alternate layout using XML			
			<layout type=""log4net.Layout.XMLLayout"" /> -->
		</appender>
		<appender name=""ConsoleAppender"" type=""log4net.Appender.ConsoleAppender"">
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] &lt;%property{auth}&gt; - %message%newline"" />
			</layout>
		</appender>
		<appender name=""NetSendAppender"" type=""log4net.Appender.NetSendAppender"">
			<threshold value=""ERROR"" />
			<server value=""IN27WS024728"" />
			<recipient value=""jhegedus2"" />
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%date [%thread] %-5level %logger [%ndc] - %message%newline"" />
			</layout>
		</appender>
		<!-- Example of how to configure the AdoNetAppender		
		<appender name=""AdoNetAppender"" type=""log4net.Appender.AdoNetAppender"" >			
			<connectionString value=""Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"" />
			<layout type=""log4net.Layout.PatternLayout"">				
				<conversionPattern value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES ('%date','%thread','%level','%logger','%message')"" />
			</layout>
		</appender> 
		-->
		<!-- 
		<appender name=""A"" type=""log4net.Appender.ForwardingAppender"" >
			<threshold value=""WARN""/>			
			<appender-ref ref=""ConsoleAppender"" />		
		</appender>
		<appender name=""B"" type=""log4net.Appender.ForwardingAppender"" >
			<filter type=""log4net.Filter.LevelRangeFilter"">
				<levelMin value=""DEBUG""/>
				<levelMax value=""INFO""/>
			</filter>
			<appender-ref ref=""ConsoleAppender"" />
		</appender> 
		-->
		<!-- Example of how to configure the AdoNetAppender to connect to MS Access -->
		<appender name=""ADONetAppender_Access"" type=""log4net.Appender.AdoNetAppender"">
			<connectionString value=""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""1024"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Example of how to configure the AdoNetAppender to connect to MS SQL Server -->
		<appender name=""ADONetAppender_SqlServer"" type=""log4net.Appender.AdoNetAppender"">
			<bufferSize value=""1"" />
			<connectionType value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
			<connectionString value=""data source=SQLSVR;initial catalog=test_log4net;integrated security=false;persist security info=True;User ID=sa;Password=sa"" />
			<commandText value=""INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message]) VALUES (@log_date, @thread, @log_level, @logger, @message)"" />
			<parameter>
				<parameterName value=""@log_date"" />
				<dbType value=""DateTime"" />
				<!-- 
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%date{yyyy'-'MM'-'dd HH':'mm':'ss'.'fff}"" />
				</layout> 
				-->
				<layout type=""log4net.Layout.RawTimeStampLayout"" />
			</parameter>
			<parameter>
				<parameterName value=""@thread"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%thread"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@log_level"" />
				<dbType value=""String"" />
				<size value=""50"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%level"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@logger"" />
				<dbType value=""String"" />
				<size value=""255"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%logger"" />
				</layout>
			</parameter>
			<parameter>
				<parameterName value=""@message"" />
				<dbType value=""String"" />
				<size value=""4000"" />
				<layout type=""log4net.Layout.PatternLayout"">
					<conversionPattern value=""%message"" />
				</layout>
			</parameter>
		</appender>
		<!-- Setup the root category, add the appenders and set the default level -->
		<root>
			<level value=""WARN"" />
			<appender-ref ref=""LogFileAppender"" />
			<appender-ref ref=""ConsoleAppender"" />
			<!-- <appender-ref ref=""ADONetAppender_SqlServer"" /> -->
			<appender-ref ref=""NetSendAppender"" />
			<!-- <appender-ref ref=""A"" /> -->
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name=""ConsoleApp.LoggingExample"">
			<!-- <appender-ref ref=""B"" /> -->
			<level value=""ALL"" />
			<appender-ref ref=""RollingLogFileAppender"" />
		</logger>
	</log4net>
</configuration>",Fix for LOG4NET-94: Corrected typos in App.config files., MODIFY App.config MODIFY App.config
0,LOG4NET-275,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
1,LOG4NET-49,0880f3b15c7de3a922c5a9087575398aa64514bd,"CountingQuietTextWriter does not count strings written with WriteLine The CountingQuietTextWriter overrides Write(String) to count the chars written. However it should also override Write(Char) and Write(Char[],int,int).

WriteLine(String) calls Write(Char[],int,int) and therefore the CountingQuietTextWriter is not counting these strings, which are written to the output writer.","Fix for LOG4NET-49, Added missing overrides to CountingQuietTextWriter", MODIFY CountingQuietTextWriter.csCountingQuietTextWriter Write CountingQuietTextWriter Write
0,LOG4NET-382,169ed0620c24fdcdca8b5e47eb81aebb41ac8859,"TargetInvocationException occurs because MESSAGE_SIZE fields in EventLogAppender are initialized in wrong order In log4net.Appender.EventLogAppender:

The MAX_EVENTLOG_MESSAGE_SIZE field is initiated before MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER.  Therefore, when MAX_EVENTLOG_MESSAGE_SIZE is set during construction, MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER are zero.

The end result is that a TargetInvocationException occurs in log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement appenderElement) (Line 303) and that the message recorded in the event log is empty.
",LOG4NET-354 fix build errors for MONO since MONO does not implement the System.Web.Mail.MailMessage.SubjectEncoding property, MODIFY SmtpAppender.csSmtpAppender SendEmail
1,LOG4NET-154,3906958b6efc70f61cb897ceb3b4f15ea6146b14,"Add a StackTracePatternConverter to display method calls leading up to log message Modify LocationInfo to save StackTrace information and make it available as StackTracePatternConverter to display call stack leading up to the log message:

 log.Debug(""Item Saved"");
 
 [%stackTrace{3}] %message%newline

 [default_aspx.btnSubmit_Click > productController.Save > productService.Save] Item Saved

This will probably be a slow pattern converter on par with other LocationInfo derived pattern converters.",Fix for LOG4NET-154. Added StackTracePatternConverter that outputs the methods called before the log message., ADD StackTracePatternConverter.csStackTracePatternConverter ActivateOptions StackTracePatternConverter Convert
0,LOG4NET-38,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-297,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-212,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-311,702b0775760b413eee77c86d855f94e6c77316e4,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",no longer needed now that content has been migrated to mvn site.  LOG4NET-117, DELETE contributing.html DELETE site.css DELETE style.css DELETE downloads.html DELETE history.html DELETE index.html DELETE license.html DELETE building.html DELETE config-examples.html DELETE example-apps.html DELETE faq.html DELETE features.html DELETE framework-support.html DELETE chainsaw.html DELETE index.html DELETE configuration.html DELETE contexts.html DELETE internals.html DELETE introduction.html DELETE plugins.html DELETE repositories.html DELETE release-notes.html DELETE roadmap.html DELETE support.html DELETE build.xml DELETE ant-1.4.1.jar DELETE commons-collections-2.0.jar DELETE jdom-b8.jar DELETE log4j-1.1.3.jar DELETE velocity-1.4-dev.jar DELETE xerces-1.4.4.jar DELETE contributing.xml DELETE downloads.xml DELETE history.xml DELETE index.xml DELETE license.xml DELETE building.xml DELETE config-examples.xml DELETE example-apps.xml DELETE faq.xml DELETE features.xml DELETE framework-support.xml DELETE chainsaw.xml DELETE index.xml DELETE configuration.xml DELETE contexts.xml DELETE internals.xml DELETE introduction.xml DELETE plugins.xml DELETE repositories.xml DELETE release-notes.xml DELETE roadmap.xml DELETE project.xml DELETE site.vsl DELETE support.xml
0,LOG4NET-212,56357bef38685f4521b5a9743dad54770f6258a5,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",TryParse has been introduced in .NET 2.0.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-242,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-69,be8cee00caa2c20ccbe5b59ad48dddc7fe3ebff9,"Exception thrown when *Format methods are given a malformed format string FormatException thrown when *Format methods are given a malformed format string: log.DebugFormat(""Malformed {{,,,5}format{8}!"");

This statement:

 log.DebugFormat(""Malformed {{,,,5}format{8}!"");

throws the following exception:

[FormatException: Input string was not in a correct format.]
   System.Text.StringBuilder.FormatError()
   System.Text.StringBuilder.AppendFormat(IFormatProvider provider, String format, Object[] args)
   System.String.Format(IFormatProvider provider, String format, Object[] args)
   log4net.Core.LogImpl.DebugFormat(String format, Object[] args)

which is consistent with the documentation for String.Format:

System.FormatException: The format item in format is invalid.  -or- The number indicating an argument to format is less than zero, or greater than or equal to the number of specified objects to format.  ",Part for fix for LOG4NET-60. Missed out important line from patch. The Days are 1 based not 0 based., MODIFY RollingFileAppender.csRollingFileAppender NextCheckDate
0,LOG4NET-11,f7000163b5e88d518727fa049bef8604d25288b5,"Add Flush command to API While using Buffering is a wonderful way to help improve
performance, I would like the ability to programatically
tell the current ILog object to flush any buffers that
exist on the appenders that I've been logging to so that
I can get any messages that I've sent rather than
waiting for the buffer to fill up.

Thus, one might be able to do the following:

""log.Flush();""

and then any messages sent to that ILog object would
be processed.

Kevin Conroy - kmconroy

----

I vote for this one too!

dcazzulino",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
0,LOG4NET-212,54493ed542fa2c3ab36809f1b5a65b8daa97d1ae,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",Deal with SecurityException in EventLogAppender more gracefully.  LOG4NET-310, MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY EventLogAppenderTest.csEventLogAppenderTest ActivateOptionsDisablesAppenderIfSourceDoesntExist EventLogAppenderTest TestGetEntryTypeForExistingApplicationName EventLogAppenderTest TestGetEntryType
0,LOG4NET-447,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"MemoryAppender class is not thread safe The memory appender cannot be used safely in an application that uses more than one thread to interact with logging.

When using this code to retrieve and then clear events logged in the memory appender:
var events = memoryAppender.GetEvents();
memoryAppender.Clear();

The executing thread may be preempted between these two calls and additional logging events logged. These events are then cleared when the thread resumes execution - and are never seen/processed.

I expect to be be able to retrieve and clear the list of current events in one call that guarantees that no events are ever lost.",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-311,8fa4d71a61c7e6e6d9e8d8adc47a22fceaf8bf37,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Fix race-condition in XmlLayoutBase. LOG4NET-76, MODIFY XMLLayoutBase.csXmlLayoutBase Format
0,LOG4NET-311,b9c24915eadbbb665778ef42524fd74d99eb969a,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-23,68a31477786920c4670fa05845f935fcff0e7a71,example-apps.html links are off by one folder level In the doc/release/example-apps.html document the href links to the example folders are all off by 1 folder level. The links go up one too many folders.,Fix LOG4NET-24. Programmatic flush of BufferingAppenderSkeleton buffer, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Flush BufferingAppenderSkeleton Append
0,LOG4NET-167,d78a5f8331dad60de277fecda43205412ccb464a,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-265,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"RemoteFileAppender Tests fail on Windows 7 Compiled the version of log4net in the repository and ran the unit tests. All of the RemotingAppenderTests fail. Enabling internal logging gives the following error.

log4net:ERROR [RemotingAppender] ErrorCode: GenericFailure. Failed in SendBufferCallback
System.Runtime.Serialization.SerializationException: Because of security restrictions, the type System.Runtime.Remoting.ObjRef cannot be accessed. ---> System.Security.SecurityException: Request failed.
   at System.Runtime.Serialization.FormatterServices.nativeGetSafeUninitializedObject(RuntimeType type)
   at System.Runtime.Serialization.FormatterServices.GetSafeUninitializedObject(Type type)
The action that failed was:
Demand
The type of the first permission that failed was:
System.Security.Permissions.SecurityPermission
The first permission that failed was:
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""Infrastructure""/>

The demand was for:
<PermissionSet class=""System.Security.PermissionSet""
version=""1"">
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""Infrastructure""/>
</PermissionSet>

The only permitted permissions were:
<PermissionSet class=""System.Security.PermissionSet""
version=""1"">
<IPermission class=""System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
version=""1""
Flags=""SerializationFormatter""/>
</PermissionSet>

The method that caused the failure was:
System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Channels.ITransportHeaders, System.IO.Stream, System.Runtime.Remoting.Messaging.IMessage ByRef, System.Runtime.Remoting.Channels.ITransportHeaders ByRef, System.IO.Stream ByRef)
",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-126,289a3f2a030c75e6fb0912f2c0c22021848d587c,"Links on the log4net Examples page do not work, including the overview link explaining why the other links do not work The page at

http://logging.apache.org/log4net/release/example-apps.html

is one of the first pages that new users will visit.

The Overview section at the top of the page explains that none of the links given for examples, such as

http://logging.apache.org/examples/mono/1.0/Tutorials/ConsoleApp/cs

work, which is a shame as they would be a very handy reference. 

I skipped past this explanation looking for an example for SMTPAppender. It was only when I realised that none of the links were working that I scrolled back to the top of the page and saw the Overview section.


The Overview section gives a link to the release download, it gives

http://logging.apache.org/log4net/downloads.html

which also doesn't work. it should be 

http://logging.apache.org/log4net/download.html


Fixing these links would give a far better impression to new users.

Cheers

Brian

",Fix for LOG4NET-140. Improve documentation for IFixingRequired to explain how data can be evaluated immediately when a logging event is created or delayed until being written to an appender., MODIFY LoggingEvent.cs MODIFY contexts.xml
0,LOG4NET-212,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-311,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
1,LOG4NET-15,f7000163b5e88d518727fa049bef8604d25288b5,"Email high ""importance"" priority setting with SmtpAppender It would be quite valuable for error alerting if the
SMTPAppender would expose its
System.Web.Mail.MailMessage's importance priority
setting, as a property of the SmtpAppender class.

A common scenario would probably be where the user
would set the Threshold
to ERROR and set the High Importance flag to being
true.

regards,

carl",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
1,LOG4NET-107,2f34b9fb03a5a8f7dc533136817cbfba41a0d1a5,[PATCH] Added ExceptionEvaluator Added an ExceptionEvaluator class to allow buffered appenders to trigger based on the type of LoggingEvent.ExceptionObject.  By setting the TiggerOnSubclass property the evaluator will trigger on types that are of the same type or subclasses of ExceptionType.,Fix for LOG4NET-107. Added ExceptionEvaluator that triggers a BufferingAppenderSkeleton to flush its buffer when a certain Exception is detected., ADD ExceptionEvaluator.csExceptionEvaluator IsTriggeringEvent ExceptionEvaluator ExceptionEvaluator ExceptionEvaluator ExceptionEvaluator MODIFY log4net.csproj MODIFY EvaluatorTest.csEvaluatorTest TestInvalidExceptionEvaluator EvaluatorTest TestExceptionEvaluator
1,LOG4NET-322,d006a2da7701479790413fe39b261ca970fcad85,"Conditional compilation symbols for .net4 Release While Debug configuration has a proper list of Conditional compilation symbols (""NET;NET_2_0;NET_4_0""), the Release configuration has them set to ""STRONG;NET;NET_1_0;"". This causes problems with a lot of appenders and LogicalThreadContext is not working, since it uses SetData(), not LogicalSetData()","fix compilation symbolds for RELEASE builds, submitted by Iso Su, LOG4NET-322", MODIFY log4net.vs2010.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-242,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-215,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-172,dbe0f89a38f6fca026d8d78ab59f23009cde8443,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.",LOG4NET-443 prevent orphaned locks with ReaderWriterLockSlim in the face of aborted threads, MODIFY ReaderWriterLock.csReaderWriterLock AcquireReaderLock ReaderWriterLock AcquireWriterLock
0,LOG4NET-215,56357bef38685f4521b5a9743dad54770f6258a5,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",TryParse has been introduced in .NET 2.0.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-33,5da72adfc37db5725c5d2606730e2dd9a6bbd1b1,"Ability to use global property to point to log4net configuration file The log4j tool has the ability to specify a system property to point to the logging configuration file.  For instance, when starting a java program (such as tomcat), one can pass ""-Dlog4j.configuration=http://mydomain/log4j.xml"" as a command line parameter.  Log4j checks to see whether this property is available and, if it is, uses the return value from the URL to configure categories and appenders.

A similar mechanism in log4net would allow a few improvements in logging configuring:
* No need to use the XmlConfiguratorAttribute in any assemblies
* No need to know at design time where the log4net config file will be located
* Ability to configure logging for all components in an app domain by setting a property in the app domain's config file
* Ability to configure logging for all components on a machine by setting a property in the machine.config file
* Ability to updating config file contents without updating app or machine config contents.

I'd propose doing a direct mirror of the log4j capabilities into log4net as follows:
* Update the LogManager class with a static constructor that mirrors the static block in the LogManager class in log4j
* Use System.Configuration.ConfigurationSettings.AppSettings.Get(...) instead of java's System.getProperty(...)
* Don't support the configuratorClass attribute (yet) because the XmlConfigurator seems to be the only logical choice
* Don't implement the DEFAULT_XML_CONFIGURATION_FILE or DEFAULT_CONFIGURATION_FILE property checks (yet). ",Fix and tests for LOG4NET-32 AdoNetAppender losing first entry, MODIFY BufferingAppenderSkeleton.csBufferingAppenderSkeleton Append ADD BufferingAppenderTest.csBufferingAppenderTest TestSetupAppender BufferingAppenderTest TestBufferSize5 BufferingAppenderTest SetupRepository MODIFY CountingAppender.csCountingAppender ResetCounter MODIFY log4net.Tests.csproj
1,LOG4NET-87,243f1e9f3ee235955bade4b4fe664a903378719a,"Support ASP.Net related PatternConverters to allow items from the HttpContext.Current.Session, Cache, Request, etc. to be captured. It would be nice if there were built-in Pattern Converters to support core ASP.Net objects:

 %aspnet-session{UserId}
 %aspnet-session
 %aspnet-request{ProductId}

This issue may be a good time to investigate supporting a more advanced syntax for the Option parameter:

 %aspnet-request{queryString:ProductId}

that could be shared across all Pattern Converters.","Started to implement LOG4NET-87: Support ASP.Net related PatternConverters to allow items from the HttpContext.Current.Session, Cache, Request, etc. to be captured.", ADD AspNetCachePatternConverter.csAspNetCachePatternConverter Convert ADD AspNetContextPatternConverter.csAspNetContextPatternConverter Convert ADD AspNetPatternConverter.csAspNetPatternConverter Convert ADD AspNetRequestPatternConverter.csAspNetRequestPatternConverter Convert ADD AspNetSessionPatternConverter.csAspNetSessionPatternConverter Convert MODIFY PatternLayout.csPatternLayout PatternLayout MODIFY log4net.csproj
1,LOG4NET-540,a2d1dfe84ca0b88050de1bd8ca73320cd6252cf7,nuget dependencies for .NET Standard leak into net46 to avoid this https://github.com/NuGet/Home/issues/4167,LOG4NET-540 add empty dependency groups for all supported target frameworks, MODIFY log4net.nuspec
1,LOG4NET-148,71442423b3ab3200c01c4f9b18e28e76b3e4c607,"ThreadContext uses LocalDataStore to store ThreadSpecific data instead should be using  [ThreadStatic] variables. According to this article (http://blogs.msdn.com/junfeng/archive/2005/12/31/508423.aspx) and production issues encountered: using LocalDataStore is not a scalable approach for any web server that gets a significant amount of traffic.

The ThreadContext object should be modified to use [ThreadStatic] variables.

From the article:
The Whidbey RTM implementation of Thread.GetData/Thread.SetData has several scalability issues caused by global locks being taken. The appdomain-global lock taken in LocalDataStore.SetData is one of them. There is another global lock taken in ThreadNative::GetDomainLocalStore that is even worse since it is process-global.

The best workaround is to use [ThreadStatic] variables instead of Thread.GetData/Thread.SetData",LOG4NET-148 thread context properties does now use a ThreadStatic properties dictionary, MODIFY ThreadContextProperties.csThreadContextProperties if ThreadContextProperties if ThreadContextProperties Clear ThreadContextProperties if ThreadContextProperties Remove ThreadContextProperties GetProperties
1,LOG4NET-58,0e3bd4dc7a58d3f1a38e85cab874115b48c6b285,"Support clean build on .NET 2.0 Updates to the source that allow building under .NET 2.0 RTM with no source code related warnings.  Warnings that do appear are related to xml documentation, and a deprecated nant method call.  Updates are commented as appropriate to indicate the compiler warning resolved.

I updated the nant build file to include a new reference needed for 2.0 but since nant (as of 0.85 rc3) doesn't recognize the new framework yet I was unable to test building using the nant build.  Visual Studio 2005 solution/project files are attached.","Added nant.build target to compile tests under framework .NET 2.0
Related to LOG4NET-58", MODIFY nant.build
1,LOG4NET-382,5c3a1a599e29f3f5ee65fc2c5df1b0af2da567d6,"TargetInvocationException occurs because MESSAGE_SIZE fields in EventLogAppender are initialized in wrong order In log4net.Appender.EventLogAppender:

The MAX_EVENTLOG_MESSAGE_SIZE field is initiated before MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER.  Therefore, when MAX_EVENTLOG_MESSAGE_SIZE is set during construction, MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER are zero.

The end result is that a TargetInvocationException occurs in log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement appenderElement) (Line 303) and that the message recorded in the event log is empty.
",LOG4NET-382 fixed initialization order of static readonly fields, MODIFY EventLogAppender.cs
0,LOG4NET-215,9df9848f90c58c41f658b66c68178112eccc7c30,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-243,8400fecdd81394a86d4192889446d40678dcfb90,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
1,LOG4NET-117,9df9848f90c58c41f658b66c68178112eccc7c30,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-344,3fb61ce794a7fc1fdbfc1e21adff29b300316d2d,"Make AdoNetAppender not to stuck application process The original AdoNetAppender could stuck application during log insertion.
Because it use the sync method call to do database insert, once the DB is unavailable or table was locked.
I change the implementation that has an inner queue inside to store the messages, and the other independent thread will be going to cunsuming the queue messages and do DB insertion.

This implementation will not have any impact on application performance and much stable.

Trade off: Once the queue max buffer was full, the later coming log message would be ignored and gone forever. But log4net is not designed for guarantee delivery in purpose, right? So it's not big deal at all. :)  ",LOG4NET-460 make Logger's virtual properties work when overridden, MODIFY Logger.csLogger for Logger IsEnabledFor Logger CallAppenders Logger for
0,LOG4NET-15,29ec33c991b1a22aeac4e67c77ebbe94b370f9d1,"Email high ""importance"" priority setting with SmtpAppender It would be quite valuable for error alerting if the
SMTPAppender would expose its
System.Web.Mail.MailMessage's importance priority
setting, as a property of the SmtpAppender class.

A common scenario would probably be where the user
would set the Threshold
to ERROR and set the High Importance flag to being
true.

regards,

carl","Fix for LOG4NET-43. Handles empty string properties by creating an empty string rather than attempting to construct one.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
1,LOG4NET-73,5f64f8de9766f3ac66e2aec8dc62eb2439171c4f,"ADONetAppender.ActivateOptions() leaks database connection when called multiple times ADONetAppender.ActivateOptions() calls InitializeDatabaseConnection. This method does not check if the m_dbConnection is already initialised. If it is initialise then it will beleaked.

Update InitializeDatabaseConnection to check and close the connection if not null.",Fix for LOG4NET-73. Added code to cleanup the connection and command objects that are stored in members if the InitializeDatabaseConnection method is called multiple times., MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-11,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"Add Flush command to API While using Buffering is a wonderful way to help improve
performance, I would like the ability to programatically
tell the current ILog object to flush any buffers that
exist on the appenders that I've been logging to so that
I can get any messages that I've sent rather than
waiting for the buffer to fill up.

Thus, one might be able to do the following:

""log.Flush();""

and then any messages sent to that ILog object would
be processed.

Kevin Conroy - kmconroy

----

I vote for this one too!

dcazzulino","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
0,LOG4NET-154,10eb59431deedcdaedc9d9f13684cf1ba9e67e03,"Add a StackTracePatternConverter to display method calls leading up to log message Modify LocationInfo to save StackTrace information and make it available as StackTracePatternConverter to display call stack leading up to the log message:

 log.Debug(""Item Saved"");
 
 [%stackTrace{3}] %message%newline

 [default_aspx.btnSubmit_Click > productController.Save > productService.Save] Item Saved

This will probably be a slow pattern converter on par with other LocationInfo derived pattern converters.","MutexLock => InterProcessLock.  Document it, discourage its use.  LOG4NET-164", MODIFY FileAppender.cs MODIFY config-examples.xml MODIFY faq.xml MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestInterProcessLockUnlocks RollingFileAppenderTest TestInterProcessLockRecovers RollingFileAppenderTest TestMutexLockFails RollingFileAppenderTest TestInterProcessLockFails RollingFileAppenderTest TestMutexLockUnlocks
1,LOG4NET-2,4e262fa919e6a0eb44abe6eca92ae07d17f1cd1a,"Configurator should report errors I understand that you do not want to throw exceptions
from within the logging methods, as a failure in log4net
would make the hosting app fail.

However, I think it is necessary that DOMConfigurator
throws exceptions. If a failure occurs at that point, for
example due to a malformed configuration file, I believe
the hosting app would in most cases like to know. Even
if it doesn't, it could easily just swallow any exceptions.

In my case, I have a Windows Service app that will just
quit logging if there is an error in the configuration file.
That makes the logging mechanism rather more fragile
than I would like.

Tor Hovland - torhovl

---

I completely agree.  I suggest that you take an additional
step and provide an additional mechanism, perhaps a
ValidateLoggers() method which operates like a standard
logging call, but is capable of throwing exceptions or
providing another form of feedback which would allow the
caller to diagnose bad configurations.  The configuration
file can be well-formed, but logging can still fail for any
number of reasons.

Most applications that provide a logging mechanism employ a
'start-up banner' log entry at an INFO level.  This would be
a great time to detect any problems with the logging system
itself.  I currently have a project deployed at a customer
site and despite a well formed config file... no logging is
taking place.  I don't know why, and there does not seem to
be a simple way to  diagnose the problem.

Ben Newman - benjamin91","Fix for LOG4NET-2. Require that a Type parameter be passed to log4net's internal logging class when recording an internal message. Added LogReceived event to LogLog class to facilitate capturing internal messages during the the configuration process. Added ILoggerRepository.ConfigurationMessages property which holds a list of internal messages generated during the most recent configuration cycle. Changed signature on XmlConfigurator/BasicConfigurator.Configure methods to return internal messages recording during the configuration process. 

Added Visual Studio 2005 solution and project files.", MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender SendBuffer AdoNetAppender GetLogStatement AdoNetAppender SendBuffer AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderSkeleton.csAppenderSkeleton ~AppenderSkeleton AppenderSkeleton lock MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY FileAppender.csFileAppender OpenFile FileAppender ActivateOptions MODIFY RollingFileAppender.csRollingFileAppender OpenFile RollingFileAppender ComputeCheckPeriod RollingFileAppender RollOverSize RollingFileAppender InitializeFromOneFile RollingFileAppender GetExistingFiles RollingFileAppender DetermineCurSizeRollBackups RollingFileAppender ExistingInit RollingFileAppender DeleteFile RollingFileAppender RollFile RollingFileAppender RollOverIfDateBoundaryCrossing MODIFY SmtpAppender.cs MODIFY TelnetAppender.csTelnetAppender SocketHandler OnConnect TelnetAppender ActivateOptions MODIFY TextWriterAppender.csTextWriterAppender lock MODIFY BasicConfigurator.csBasicConfigurator InternalConfigure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure MODIFY SecurityContextProviderAttribute.csSecurityContextProviderAttribute Configure MODIFY XmlConfigurator.csXmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator InternalConfigureAndWatch XmlConfigurator InternalConfigure XmlConfigurator ConfigureAndWatch XmlConfigurator Configure XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnRenamed XmlConfigurator InternalConfigureFromXml XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnChanged XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler OnWatchedFileChange XmlConfigurator ConfigureFromXml XmlConfigurator Configure XmlConfigurator ConfigureAndWatch MODIFY XmlConfiguratorAttribute.csXmlConfiguratorAttribute ConfigureFromFile XmlConfiguratorAttribute Configure XmlConfiguratorAttribute ConfigureFromUri XmlConfiguratorAttribute ConfigureFromFile MODIFY CompactRepositorySelector.csCompactRepositorySelector CompactRepositorySelector CompactRepositorySelector CreateRepository MODIFY DefaultRepositorySelector.csDefaultRepositorySelector LoadPlugins DefaultRepositorySelector CreateRepository DefaultRepositorySelector ConfigureRepository DefaultRepositorySelector GetInfoForAssembly DefaultRepositorySelector DefaultRepositorySelector DefaultRepositorySelector LoadAliases DefaultRepositorySelector CreateRepository MODIFY Level.cs MODIFY LocationInfo.csLocationInfo LocationInfo MODIFY LoggerManager.csLoggerManager LoggerManager MODIFY LoggingEvent.csLoggingEvent if LoggingEvent if LoggingEvent if MODIFY DatePatternConverter.csDatePatternConverter Convert DatePatternConverter ActivateOptions MODIFY NamedPatternConverter.csNamedPatternConverter ActivateOptions MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY RendererMap.csRendererMap FindAndRender MODIFY RemoteLoggingServerPlugin.csRemoteLoggingServerPlugin Attach ADD ConfigurationChangedEventArgs.csConfigurationChangedEventArgs ConfigurationChangedEventArgs MODIFY Hierarchy.csHierarchy BasicRepositoryConfigure Hierarchy UpdateParents Hierarchy XmlRepositoryConfigure Hierarchy CollectAppenders Hierarchy Shutdown MODIFY Logger.csLogger Log Logger CallAppenders Logger Log Logger IsEnabledFor Logger Log MODIFY RootLogger.csRootLogger if MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator ParseAppender XmlHierarchyConfigurator ParseChildrenOfLoggerElement XmlHierarchyConfigurator ParseRenderer XmlHierarchyConfigurator FindAppenderByReference XmlHierarchyConfigurator ParseLogger XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator Configure XmlHierarchyConfigurator ConvertStringTo XmlHierarchyConfigurator ParseLevel MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.csLoggerRepositorySkeleton LoggerRepositorySkeleton LoggerRepositorySkeleton ResetConfiguration MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend AppenderAttachedImpl RemoveAllAppenders MODIFY LogLog.csLogLog OnLogReceived LogLog Debug LogReceivedEventArgs LogReceivedEventArgs LogLog Error LogLog ToString LogLog Warn LogLog Error LogLog LogReceivedAdapter LogReceivedAdapter LogLog LogReceivedAdapter LogLog_LogReceived LogLog Error LogLog Warn LogLog Error LogLog Warn LogLog Debug LogLog LogLog LogLog LogReceivedAdapter Dispose LogLog Warn LogLog Debug LogLog Debug LogLog LogLog MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties GetProperties LogicalThreadContextProperties SetCallContextData MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler Error OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error MODIFY OptionConverter.csOptionConverter ToFileSize OptionConverter ToBoolean OptionConverter InstantiateByClassName MODIFY PatternParser.csPatternParser ProcessConverter MODIFY DatePatternConverter.csDatePatternConverter ActivateOptions DatePatternConverter Convert MODIFY EnvironmentFolderPathPatternConverter.csEnvironmentFolderPathPatternConverter Convert MODIFY EnvironmentPatternConverter.csEnvironmentPatternConverter Convert MODIFY IdentityPatternConverter.csIdentityPatternConverter Convert MODIFY ProcessIdPatternConverter.csProcessIdPatternConverter Convert MODIFY RandomStringPatternConverter.csRandomStringPatternConverter ActivateOptions RandomStringPatternConverter Convert MODIFY UserNamePatternConverter.csUserNamePatternConverter Convert MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY SystemInfo.csSystemInfo GetTypeFromString SystemInfo SystemInfo SystemInfo GetAppSetting SystemInfo if MODIFY SystemStringFormat.csSystemStringFormat StringFormatError SystemStringFormat StringFormat MODIFY ThreadContextStacks.csThreadContextStacks if MODIFY ConverterRegistry.csConverterRegistry CreateConverterInstance ADD log4net.vs2005.csproj ADD log4net.vs2005.sln ADD ConfigurationMessages.csLogLogAppender Append ConfigurationMessages ConfigurationMessagesTest ConfigurationMessages rep_ConfigurationChanged LogLogAppender ActivateOptions ADD LogLogTest.csLogLogTest EmitInternalMessages TraceListenerCounter Write TraceListenerCounter WriteLine TraceListenerCounter Reset LogLogTest TraceListenerCounterTest LogLogTest LogReceivedAdapter ADD log4net.Tests.vs2005.csproj
0,LOG4NET-311,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-74,5f64f8de9766f3ac66e2aec8dc62eb2439171c4f,"Change MemoryAppender member variables to protected The MemoryAppender is designed to hold the log events in an internal array. The appender can be subclassed, however the internal list is not available to subclasses.
This appender will be more useful if the members are protected.",Fix for LOG4NET-73. Added code to cleanup the connection and command objects that are stored in members if the InitializeDatabaseConnection method is called multiple times., MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection
0,LOG4NET-382,a3dd7409333e6d8dfa06f282e9ab3687dc60e50f,"TargetInvocationException occurs because MESSAGE_SIZE fields in EventLogAppender are initialized in wrong order In log4net.Appender.EventLogAppender:

The MAX_EVENTLOG_MESSAGE_SIZE field is initiated before MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER.  Therefore, when MAX_EVENTLOG_MESSAGE_SIZE is set during construction, MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT and MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER are zero.

The end result is that a TargetInvocationException occurs in log4net.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement appenderElement) (Line 303) and that the message recorded in the event log is empty.
",LOG4NET-148 fix build error in thread context properties, MODIFY ThreadContextProperties.csThreadContextProperties GetProperties
1,LOG4NET-376,964fad01933ec029bbbff6631bfc7d559be75e6e,"Race condition in AbsoluteTimeDateFormatter AbsoluteTimeDateFormatter's caching of the ""to the second"" timestamp string is not thread-safe.  It is possible for one thread to clear the check (that this timestamp matches the currently cached ""to the second"" timestamp), but then end up using an incorrect ""to the second"" timestamp string if another thread has changed it in the meantime.

In our organization, we see this bug fairly regularly because we have a mix of ""real time"" loggers that immediately write out log lines and ""batching"" loggers that defer logging to a background task that runs every second.  We therefore regularly see log lines where the timestamp is off by a second or two.

The following unit tests demonstrates the bug:

    [TestFixture]
    [Explicit]
    public class Log4netTimestampBug
    {
        /// <summary>
        /// This test demonstrates a bug with the log4net default time formatter (Iso8601DateFormatter)
        /// where the logged timestamp can be seconds off from the actual input timestamp
        /// The bug is caused to a race condition in the base class AbsoluteTimeDateFormatter
        /// because this class caches the timestamp string to the second but it is possible for
        /// the timestamp as written by a different thread to ""sneak in"" and be used by another
        /// thread erroneously (the checking and usage of this string is not done under a lock, only
        /// its modification) 
        /// </summary>
        [Test]
        public void Test()
        {
            var now = DateTime.Now;
            var times = Enumerable.Range(1, 1000000).Select(i => now.AddMilliseconds(i)).ToList();

            var sb1 = new StringBuilder();
            var sb2 = new StringBuilder();

            var task1 = Task.Run(() => WriteAllTheTimes(times, new StringWriter(sb1)));
            var task2 = Task.Delay(50).ContinueWith(t => WriteAllTheTimes(times, new StringWriter(sb2)));

            Task.WaitAll(task1, task2);

            var task1Strings = GetTimeStrings(sb1);
            var task2Strings = GetTimeStrings(sb2);

            var diffs = Enumerable.Range(0, times.Count).Where(i => task1Strings[i] != task2Strings[i]).ToList();

            Console.WriteLine(""found {0} instances where the formatted timestamps are not the same"", diffs.Count);
            Console.WriteLine();

            var diffToLookAt = diffs.FirstOrDefault(i => i - 10 > 0 && i + 10 < times.Count);
            if (diffToLookAt != 0)
            {
                Console.WriteLine(""Example Diff:"");
                Console.WriteLine();
                Console.WriteLine(""Index     Original Timestamp        Task 1 Format             Task 2 Format"");
                for (int i = diffToLookAt - 10; i < diffToLookAt + 10; i++)
                {
                    Console.WriteLine(""{0,-7}   {1}   {2}   {3}   {4}"", i, times[i].ToString(""yyyy-MM-dd HH:mm:ss,fff""),
                                      task1Strings[i], task2Strings[i], i == diffToLookAt ? ""**** DIFF HERE ****"" : """");
                }
            }

            CollectionAssert.AreEqual(task1Strings, task2Strings);
        }

        private static List<string> GetTimeStrings(StringBuilder sb1)
        {
            return sb1.ToString().Split(new[] {'\r', '\n'}, StringSplitOptions.RemoveEmptyEntries).ToList();
        }

        private static void WriteAllTheTimes(IEnumerable<DateTime> times,
                                             TextWriter writer)
        {
            var formatter = new Iso8601DateFormatter();
            foreach (var t in times)
            {
                formatter.FormatDate(t, writer);
                writer.WriteLine();
            }
        }
    }




",silly little timimg helper for LOG4NET-376, ADD AbsoluteTimeDateFormatterTiming.csAbsoluteTimeDateFormatterTiming Main AbsoluteTimeDateFormatterTiming SingleThread
0,LOG4NET-36,4e6114e136c6af46ae0fb9d485c91f61f18b41c9,"System.Diagnostics.Trace may throw exception if AppDomain does not have config file System.Diagnostics.Trace may throw exception if AppDomain does not have config file.

If the AppDomain has been created programmatically it is possible that it does not have a config file set. It has been reported that an exception can be generated on certain platforms in this situation.

The exception is:


System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. --->
System.TypeInitializationException: The type initializer for ""D2L.Mail.MailService"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Core.LoggerManager"" threw an exception. --->
System.TypeInitializationException: The type initializer for ""log4net.Util.LogLog"" threw an exception. --->
System.NullReferenceException: Object reference not set to an instance of an object.

   at System.Configuration.ConfigurationSettings.GetConfig(String sectionName)
   at System.Diagnostics.DiagnosticsConfiguration.GetConfigTable()
   at System.Diagnostics.DiagnosticsConfiguration.Initialize()
   at System.Diagnostics.DiagnosticsConfiguration.get_IndentSize()
   at System.Diagnostics.TraceInternal.InitializeSettings()
   at System.Diagnostics.TraceInternal.get_Listeners()
   at System.Diagnostics.TraceInternal.WriteLine(String message)
   at System.Diagnostics.Trace.WriteLine(String message)
   at log4net.Util.LogLog.Error(String message, Exception exception)
   at log4net.Util.LogLog..cctor()

   --- End of inner exception stack trace ---

   at log4net.Util.LogLog.Debug(String message)
   at log4net.Core.LoggerManager..cctor()

   --- End of inner exception stack trace ---

   at log4net.Core.LoggerManager.GetLogger(Assembly
repositoryAssembly, String name)
   at log4net.LogManager.GetLogger(Type type)
   at D2L.Mail.MailService..cctor()

   --- End of inner exception stack trace ---

   --- End of inner exception stack trace ---
",Fix for LOG4NET-37. Allow the RepositorySelector type to be sepecified using the AppSettings config, MODIFY LoggerManager.csLoggerManager LoggerManager
0,LOG4NET-49,6586b155fe474144ba918de90e9769780234a1e5,"CountingQuietTextWriter does not count strings written with WriteLine The CountingQuietTextWriter overrides Write(String) to count the chars written. However it should also override Write(Char) and Write(Char[],int,int).

WriteLine(String) calls Write(Char[],int,int) and therefore the CountingQuietTextWriter is not counting these strings, which are written to the output writer.",Fix for LOG4NET-17. Added Layouts sample project with line wrapping layout, ADD .cvsignore ADD nant.build ADD nant.config ADD .cvsignore ADD App.config ADD AssemblyInfo.cs ADD ForwardingLayout.csForwardingLayout ForwardingLayout ForwardingLayout if ForwardingLayout Format ForwardingLayout ActivateOptions ADD LineWrappingLayout.csLineWrappingLayout Format LineWrappingLayout WrapText LineWrappingLayout LineWrappingLayout ADD LoggingExample.csLoggingExample Main ADD SampleLayoutsApp.csproj ADD nant.build ADD nant.config ADD nant.build ADD nant.config MODIFY cs-examples.sln MODIFY example-apps.xml
0,LOG4NET-214,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-170,a233bcb1bd3b771cf8bdf9c011f639f341d0a4a7,Documentation improvement re: fixing and active properties Documentation improvement - see http://www.nabble.com/ASP.NET%2C-AdoNetAppender-and-deferred-property-execution-tt18865968.html,Fix for LOG4NET-168. Add ReplyTo property to SmtpAppender., MODIFY SmtpAppender.csSmtpAppender SendEmail
0,LOG4NET-241,73a4921de015d4262273055b04ea37206a224038,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-311,73a4921de015d4262273055b04ea37206a224038,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
1,LOG4NET-65,63ba6a2b3b11d5e7713020dee3afea41d235922d,"Unhandled SecurityException exception for FileIOPermission while loading configuration file If the calling application does not have the PathDiscovery FileIOPermission a SecurityException is generated from the XmlConfiguratorAttribute.Configure method. This is called from the first LoggerManager.GetLogger in a calling assembly.

The exception should be caught as we may potentially be injecting this exception into user code's class initialisation phase which the user would find unexpected.

An example stack trace for the exception is:

[SecurityException: Request for the permission of type 'System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' failed.]
   System.Security.CodeAccessSecurityEngine.Check(Object demand, StackCrawlMark& stackMark, Boolean isPermSet) +0
   System.Security.CodeAccessPermission.Demand() +59
   System.AppDomainSetup.VerifyDir(String dir, Boolean normalize) +110
   System.AppDomain.get_BaseDirectory() +61
   log4net.Util.SystemInfo.get_ApplicationBaseDirectory() +31
   log4net.Config.XmlConfiguratorAttribute.Configure(Assembly sourceAssembly, ILoggerRepository targetRepository) +30
   log4net.Core.DefaultRepositorySelector.ConfigureRepository(Assembly assembly, ILoggerRepository repository) +314
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType, String repositoryName, Boolean readAssemblyAttributes) +532
   log4net.Core.DefaultRepositorySelector.CreateRepository(Assembly repositoryAssembly, Type repositoryType) +42
   log4net.Core.DefaultRepositorySelector.GetRepository(Assembly repositoryAssembly) +80
   log4net.Core.LoggerManager.GetLogger(Assembly repositoryAssembly, String name) +132
   log4net.LogManager.GetLogger(Assembly repositoryAssembly, String name) +30
   log4net.LogManager.GetLogger(String name) +34
","Fix for LOG4NET-65 Unhandled SecurityException exception for FileIOPermission while loading configuration file
Added additional try/catch blocks to the DefaultRepositorySelector and the XmlConfiguratorAttribute to wrap any path discovery permission checks made by the AppDomain.", MODIFY XmlConfiguratorAttribute.csXmlConfiguratorAttribute Configure XmlConfiguratorAttribute ConfigureFromFile XmlConfiguratorAttribute ConfigureFromUri MODIFY DefaultRepositorySelector.csDefaultRepositorySelector CreateRepository DefaultRepositorySelector GetInfoForAssembly DefaultRepositorySelector ConfigureRepository MODIFY SystemInfo.csSystemInfo ConvertToFullPath
1,LOG4NET-34,b118bfdd67abb332332b405321d9b2ce6e35405a,"Allow xml config values to be set via XmlNodeType.CDATA or XmlNodeType.Text rather than just value=""foo"" Currently values for xml config nodes must be passed in via the value attribute:

 <conversionPattern value=""%5p %d{yyyy-MM-dd hh:mm:ss tt} (%c:%L) - %m%n"" />

Why isn't this syntax supported?

 <conversionPattern>%5p %d{yyyy-MM-dd hh:mm:ss tt} (%c:%L) - %m%n</conversionPattern>

If the above syntax were supported, a possible solution to this question:

 http://www.mail-archive.com/log4net-user%40logging.apache.org/msg01791.html

would be:

 <conversionPattern>
  <![CDATA[<header>%n <date>%d</date>%n <user>%u</user>%n <info>%m</info>%n</header>%n]]>
 </conversionPattern>",Applied patch for LOG4NET-34 Allow xml config values to be set via XmlNodeType.CDATA or XmlNodeType.Text rather than just value=xxx, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
0,LOG4NET-310,bec1fa114507de8036cb8daa8af0c6242f9d9ed7,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",make doc match the implementation.  LOG4NET-297, MODIFY AppenderSkeleton.cs
1,LOG4NET-375,ee2fb50f42cdcc69cf202e8a0a28cf7c79bf77dd,"typo / misspelling in log message src\Repository\Hierarchy\XmlHierarchyConfigurator.cs

line 348

LogLog.Debug(declaringType, ""reated Appender ["" + appenderName + ""]"");

the 'reated' should be 'Created'",LOG4NET-375 fix typo in src/Repository/Hierarchy/XmlHierarchyConfigurator.cs, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator ParseAppender
0,LOG4NET-46,eb02bce2d20473bba7b2fddbad056f90651054dd,"Support appenders that can output multiple events efficiently Some appenders can efficiently output batches of events. Currently there is no way to pass a batch of events to an appender.

Add an interface IBulkAppender that exposes a DoAppend method that takes an array of events. This interface can be supported by appenders that can process in bulk.",Fix for LOG4NET-45. Added constructor and property to take plugin type as a Type, MODIFY PluginAttribute.csPluginAttribute ToString PluginAttribute PluginAttribute PluginAttribute CreatePlugin PluginAttribute PluginAttribute PluginAttribute PluginAttribute
0,LOG4NET-45,18d006ea8f6d2b65bdf257b0abeb2491d2c789a8,"PluginAttribute does not allow plugin type to be specified as a Type, only as a string The PluginAttribute currently allows the plugin type to be specified as a string, for example:

[assembly: log4net.Config.Plugin(""log4net.Plugin.RemoteLoggingServerPlugin,log4net"")]

it should be possible to specify this as a type, for example:

[assembly: log4net.Config.Plugin(typeof(log4net.Plugin.RemoteLoggingServerPlugin))]","Fixes for LOG4NET-22 and LOG4NET-44 with associated tests.

Characters that cannot be expressed in XML are now masked with a user specifiable charater.
The message and property values may be base64 encoded if this is undesirable.

The name of the properties node has been fixed to properties rather than global-properties.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XMLLayout.csXmlLayout FormatXml XmlLayout ActivateOptions MODIFY XMLLayoutBase.cs MODIFY XmlLayoutSchemaLog4j.csXmlLayoutSchemaLog4j FormatXml MODIFY Transform.csTransform WriteEscapedXmlString Transform WriteEscapedXmlString Transform MaskXMLInvalidCharacters ADD XmlLayoutTest.csXmlLayoutTest TestPropertyCharacterEscaping XmlLayoutTest TestPropertyEventLogging XmlLayoutTest TestPropertyIllegalCharacterMaskingInName XmlLayoutTest TestCDATAEscaping2 XmlLayoutTest TestIllegalCharacterMasking XmlLayoutTest TestCDATAEscaping1 XmlLayoutTest createBaseEvent XmlLayoutTest TestCDATAEscaping3 XmlLayoutTest TestPropertyIllegalCharacterMasking XmlLayoutTest TestBase64PropertyEventLogging XmlLayoutTest TestBase64EventLogging XmlLayoutTest TestBasicEventLogging MODIFY log4net.Tests.csproj
0,LOG4NET-143,b9c24915eadbbb665778ef42524fd74d99eb969a,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-311,73bdae467e39a9082d1a6dad3d2d5d26995b2a95,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Race-Condition via shared StringBuilder in ReusableStringWriter.   LOG4NET-212, MODIFY AppenderSkeleton.csAppenderSkeleton RenderLoggingEvent MODIFY PatternConverter.csPatternConverter Format
0,LOG4NET-242,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-45,21c34f7153387912a991692eaf1f32fe82ec9492,"PluginAttribute does not allow plugin type to be specified as a Type, only as a string The PluginAttribute currently allows the plugin type to be specified as a string, for example:

[assembly: log4net.Config.Plugin(""log4net.Plugin.RemoteLoggingServerPlugin,log4net"")]

it should be possible to specify this as a type, for example:

[assembly: log4net.Config.Plugin(typeof(log4net.Plugin.RemoteLoggingServerPlugin))]",Update for LOG4NET-43. Updated error message to be more explicit on incorrect type. Restricted empty string fix only to empty element nodes., MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator IsTypeConstructible XmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator HasAttributesOrElements
0,LOG4NET-437,3db262186c8ae7aee64d6e9278bf6298ecf4e9d1,"LogicalThreadContext data does not flow properly using Async and Await LogicalThreadContext doesn't work properly when using Async and Await. The current NDC call stack gets corrupted because the logical data context is not immutable. (See: http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html for the gory details). I've attached a Program.cs that demonstrates the issue. You will see with an unpatched log4net the thread context is corrupted compared to the proper implementation in MyStack and the console logger. An entry like:

LOG4NET Main 1 A 2 A: </MoreWork>
LOG4NET Main 1 A 2 A: </MoreWork>

is invalid and should not be possible in a properly working thread context.

I've attached a VERY naive patch that corrects the issue.","Some optimizations in locking for LOG4NET-376

* remove inner lock in favor of fresh StringBuilders
* reduce extent of outer lock

also throw in generic dictionary for good measure", MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-38,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-241,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-310,73a4921de015d4262273055b04ea37206a224038,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
1,LOG4NET-386,95824fd8b68cefb8975bec151156f3d76fc1b981,Can't access ThreadContext properties I want to be able to retrieve all the properties out of ThreadContext.Properties collection.  This collection does not expose any methods for iteration or for getting keys out of the dictionary.  Could something be added to do this?  (I apologize in advance for filling out any fields incorrectly. This is my first time logging an issue.),LOG4NET-386 added a method in ThreadContextProperties to retrieve the property keys, MODIFY ThreadContextProperties.csThreadContextProperties GetKeys
0,LOG4NET-486,4fc3185acbb8d2f734b1a6b578b33d924fa25c98,"Rolling File Appender with 'maxSizeRollBackups' and 'datePattern' does not detect existing logs initially Rolling file appender with 'maxSizeRollBackups' set to a positive number tries to initialise by looking at existing log files to continue the rolling sequence and set 'm_curSizeRollBackups' to its correct value but the base filename format is wrong.

In method GetWildcardPatternForFile with m_preserveLogFileNameExtension true it should construct a wildcard pattern but the 'baseFileName' is not enough to fully identify the log file when 'datePattern' is also specified.

For example: -

With log files such as: -

MyLogFile_2015-10-27.1.log
MyLogFile_2015-10-27.2.log

the pattern created is 'MyLogFile.*.log'

The date pattern is missing and as a result no log files are found and historical log files get overwritten rather than rolled over.

A quick fix I'm using is to remove the '.' from the literal "".*"" in the wildcard. This allows the OS to identify the log files. Later code makes a fuller check of the exact log file format and therefore this may be safe but I would think it needs more validation and testing to be sure this works under all circumstances.","LOG4NET-461: refactored the AdoNetAppender

The AdoNetAppender suffered several issues. One was that a database command was
created and stored for the appenders lifetime. This caused trouble with some
database servers because those cleaned up cached prepared statements from time to
time and thus caused the appender to fail without the capability to recover. I
solved this problem by creating a database command whenever the buffer is sent,
well knowing that this costs a little more performance but is much more stable.

At this point I further took the chance to cleanup the source by replacing all
references to private member attributes with their public property mapping.
Further I added and fixed some of the documentation.

This overall cleanup is not yet complete, meaning that there is still a connection
that is being kept alive while it would be wiser to rely on proper connection
pooling and just open/close the database connection when sending the buffer. I
will raise this topic on the dev list.", MODIFY AdoNetAppender.csAdoNetAppender InitializeDatabaseConnection AdoNetAppender OnClose AdoNetAppender GetLogStatement AdoNetAppender InitializeDatabaseCommand AdoNetAppender AddParameter AdoNetAppender DiposeConnection AdoNetAppender SendBuffer AdoNetAppender CreateConnection AdoNetAppender ResolveConnectionType AdoNetAppender ResolveConnectionString AdoNetAppender AdoNetAppender AdoNetAppender ActivateOptions AdoNetAppenderParameter AdoNetAppenderParameter AdoNetAppenderParameter Prepare AdoNetAppenderParameter FormatValue AdoNetAppender SendBuffer AdoNetAppender DisposeCommand
0,LOG4NET-76,73bdae467e39a9082d1a6dad3d2d5d26995b2a95,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Race-Condition via shared StringBuilder in ReusableStringWriter.   LOG4NET-212, MODIFY AppenderSkeleton.csAppenderSkeleton RenderLoggingEvent MODIFY PatternConverter.csPatternConverter Format
0,LOG4NET-486,03c1ce16b0e48285eada61a9afa40bf5dc036643,"Rolling File Appender with 'maxSizeRollBackups' and 'datePattern' does not detect existing logs initially Rolling file appender with 'maxSizeRollBackups' set to a positive number tries to initialise by looking at existing log files to continue the rolling sequence and set 'm_curSizeRollBackups' to its correct value but the base filename format is wrong.

In method GetWildcardPatternForFile with m_preserveLogFileNameExtension true it should construct a wildcard pattern but the 'baseFileName' is not enough to fully identify the log file when 'datePattern' is also specified.

For example: -

With log files such as: -

MyLogFile_2015-10-27.1.log
MyLogFile_2015-10-27.2.log

the pattern created is 'MyLogFile.*.log'

The date pattern is missing and as a result no log files are found and historical log files get overwritten rather than rolled over.

A quick fix I'm using is to remove the '.' from the literal "".*"" in the wildcard. This allows the OS to identify the log files. Later code makes a fuller check of the exact log file format and therefore this may be safe but I would think it needs more validation and testing to be sure this works under all circumstances.","LOG4NET-485: implemented a mutex that locks rolling across multiple processes on the same computer

However, this does not solve issues where multiple processes from different computers
try to roll over files that are located on a network share.", MODIFY RollingFileAppender.csRollingFileAppender ActivateOptions RollingFileAppender AdjustFileBeforeAppend RollingFileAppender RollingFileAppender RollingFileAppender ~RollingFileAppender
0,LOG4NET-129,9df9848f90c58c41f658b66c68178112eccc7c30,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-143,8400fecdd81394a86d4192889446d40678dcfb90,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-489,449cb8ecfae26d6053a51bdcd5beb4b83d48ab22,"AdoNetAppender fails after upgrade to 2.0.4 with 1.2.13 everything is working fine.
Update to 1.2.14 (2.0.4 on Nuget), logging fails.
I would have attached screenshots, but can't work out how.

For example

    <connectionType
      value=""System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"" />
    <connectionStringName value=""LabelPrint"" />
    <commandText
      value=""INSERT INTO dbo.Logging ([LogDate],[Level],[Operation],[OperationInfo],[User],[Label],[Application],[CorrelationId],[Method],[Line],[Logger],[Message],[Exception]) 
                 VALUES (@log_date, @log_level, @operation, @operationInfo, @user, @label, @application, @correlationId, @pgm_method, @pgm_line, @logger, @message, @exception)"" />
    <parameter>
      <parameterName value=""@log_date"" />
      <dbType value=""DateTime"" />
      <layout type=""log4net.Layout.RawUtcTimeStampLayout"" />
    </parameter>
    ... etc

This now causes the error 

'Exception while writing to database System.IndexOutOfRangeException: An SqlParameter with ParamerName '@log_date' is not contained by this SqlParameterCollection ....

","LOG4NET-488: fix tests for .net 2.0

This is a modified version of the patch supplied by NN.", MODIFY SmtpPickupDirAppenderTest.csSmtpPickupDirAppenderTest TestDefaultFileNameIsAGuid SmtpPickupDirAppenderTest TestConfigurableFileExtension
1,LOG4NET-63,186421082617e3383b52c97153fc31b3ee8d2982,"1.2.9.0 Documentation typos ------------------------------------------------------------------------------------------------------------------------------------
http://logging.apache.org/log4net/release/sdk/log4net.Layout.PatternLayout.html 
This page has ""It's"" instead of ""Its"" in the following text (this appears several times) 
WARNING Generating caller location information is extremely slow. It's use should be avoided unless execution speed is not an issue. 

------------------------------------------------------------------------------------------------------------------------------------. 
http://logging.apache.org/log4net/release/faq.html#what-is-log4net 
This page has a broken link at the bottom of the page under the ""How do I report bugs?"" title, where it says ""See the support page for details."" 
The ""support"" link here is broken here (it's set to http://logging.apache.org/support.html instead of http://logging.apache.org/log4net/support.html) 

------------------------------------------------------------------------------------------------------------------------------------
Page http://logging.apache.org/log4net/release/manual/configuration.html
Typo 1:
In the following paragraph, the Last sentence should have ""logger"" as plural, i.e. ""All loggers ultimately...""
Root Logger
Only one root logger element may only be defined and it must be a child of <log4net> element. The root logger is the root of the logger hierarchy. All loggers ultimately inherit from this logger.

Typo 2:
Under the ""Loggers"" section, the ""additivity"" attribute is mentioned as a required attribute in the table of attributes, whereas I believe it is optional.
------------------------------------------------------------------------------------------------------------------------------------",Fixed LOG4NET-63. Fixed typos and broken links in documentation., MODIFY FileAppender.csFileAppender LockingStream EndWrite MODIFY RollingFileAppender.cs MODIFY PatternLayout.cs MODIFY faq.xml MODIFY configuration.xml
1,LOG4NET-369,fabbb1473a4c96c1c6bb3e8e0ac84b3e0577ae98,"preserveLogFileNameExtension is not considered when rolling over time after an application restart Consider this configuration, with V 1.2.11 or trunk:

<file value=""log.log"" />
<appendToFile value=""true"" />
<rollingStyle value=""Composite"" />
<datePattern value="".yyyyMMdd-HHmm"" />
<staticLogFileName value=""true"" />
<preserveLogFileNameExtension value=""true"" />

* Start an application (a verbose one, preferably) with it.

* Kill it immediately.
  Log directory now looks like this
  ---
  log.log
  ---

* Wait until we are in another minute

* Start application again

* Kill it immediately
  Log directory now looks like this
  ---
  log.log
  log.log.20130122-2042
  ---

Didn't we say we want to preserveLogFileNameExtension?
Shouldn't the file name of the file rolled over be ""log.20130122-2042.log""?
If the application weren't killed and restarted in another period,
everything were correct.

This happens when rolling over an old log file from a previous run upon application start. The line of this patch fixes it.",LOG4NET-369 fix the rolling file appender to consider preserveLogFileNameExtension when rolling over time after an application restart, MODIFY RollingFileAppender.csRollingFileAppender RollOverIfDateBoundaryCrossing
1,LOG4NET-21,569de12361e5900c6248d492f4f4fd32849aedf6,"RemotingAppender fails once NDC becomes empty If an NDC, or any form of Context.Stack, is set on the current thread and then becomes empty the RemotingAppender will fail. This is caused by the LoggingEvent Properties failing to serialise due to an unexpected null value in the properties map.

The issue is caused by the GetObjectData method of log4net.Util.ReadOnlyPropertiesDictionary not coping with null values.

Issue reported by Sam Smoot.",Fix for LOG4NET-21. Remove from fixedProperties any key-value pairs where the key or value (or fixed value) is null, MODIFY LoggingEvent.csLoggingEvent CacheProperties
0,LOG4NET-241,6ad97a4127f5bfb691957f83cdd68cfcbc7035f3,"Issue tracking page does not link to project The issue tracking page http://logging.apache.org/log4net/issue-tracking.html links to http://issues.apache.org/jira/ which is not particularly helpful.

It should link to http://issues.apache.org/jira/browse/LOG4NET or https://issues.apache.org/jira/browse/LOG4NET

",add log4net.Config.Watch appsetting to configure as comanion to log4net.Config to determine whether the config is going to be watched.  Submitted by Uri Goldstein.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-167,73a4921de015d4262273055b04ea37206a224038,"ArrayOutOfBounds Exception in MemoryAppender.getEvents() Getting this every once in a while.
No specific reproduction scenario.

Destination array was not long enough. Check destIndex and length, and the array's lower bounds.
   at System.Array.Copy(Array sourceArray, Int32 sourceIndex, Array destinationArray, Int32 destinationIndex, Int32 length, Boolean reliable)
   at System.Collections.ArrayList.ToArray(Type type)
   at log4net.Appender.MemoryAppender.GetEvents()

",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-297,73a4921de015d4262273055b04ea37206a224038,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-13,f7000163b5e88d518727fa049bef8604d25288b5,"Allow SMTPAppender to have replaceable parameters in Subject It would be helpful to be able to have parameters that
are replaced on a per-log event basis on the Subject
line for the SMTPAppender.

Example:
I have multiple web servers running a .NET web service
and all use log4net. When an error occurs, they use the
SMTPAppender to notify me. It would be very useful to
include the host name of the sender in the subject line
so that I could easily determine which web server had
an error instead of having to look into the email.

In thinking more about this it could either be the
Subject line or the From line that has replacable
parameters. Perhaps even make it so that these
properties can use the <layout> tag.

Jeremy Wiebe - jeropa",Fix for LOG4NET-15. Add mail message Priority property to SmtpAppender, MODIFY SmtpAppender.csSmtpAppender SendBuffer
0,LOG4NET-17,eb02bce2d20473bba7b2fddbad056f90651054dd,"Line-wrapping Appender Layouts I think a line-wrapping layout, or a line-wrapping version
or extension of one or more of the current layouts (or a
way to decorate or extend one of the current layouts....)
would be very useful. Such a layout could take a
threshold that is the number of chars that is the
maximum length for a line, as well as an indentation
amount for leading space characters for the indented
lines. I'm sure one could easily imagine more
complicated things it could do....

Given time, I might be interested in contributing to such
an addition.

regards,

carl",Fix for LOG4NET-45. Added constructor and property to take plugin type as a Type, MODIFY PluginAttribute.csPluginAttribute ToString PluginAttribute PluginAttribute PluginAttribute CreatePlugin PluginAttribute PluginAttribute PluginAttribute PluginAttribute
0,LOG4NET-71,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"Reorganise source repository to support multiple src projects The log4net source code repository needs to be updated to allow multiple projects under the src folder. Currently the source for the log4net assembly is directly in the src folder.

A better structure would be:

src/
    log4net/
    log4net.Tests/
    log4net.Experimental/
    xdocs/

We may want to move the examples in to the src folder, or we may want to leave then outside.

The major impact of this change is to the NAnt build scripts that we use to build the log4net assembly, the examples and the tests.",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
0,LOG4NET-214,09f7293056e8abf36655537318384e9bd0ff5c9e,"EventLogAppender should also use config file to set EventId It should be possible to set the EventId of the EventLogAppender using the config file.

example:
IT would like to be able to setup EventId for certain error without having to recompile the application:

<appender name=""EventLogAppender_Terminated"" type=""log4net.Appender.EventLogAppender"" >
    <applicationName value=""..."" />
    <eventId value=""1234"" /> 
    <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""........."" />
    </layout>
    <filter type=""log4net.Filter.LevelRangeFilter"">
        <levelMin value=""ERROR"" />
    </filter>
    <filter type=""log4net.Filter.StringMatchFilter"">
        <stringToMatch value=""DatabaseException"" />
    </filter>
    <filter type=""log4net.Filter.DenyAllFilter"" />
</appender>

 
","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-111,e86390b79552a9b83c5f3bf48ab3300cad330b80,Project metadata for projects.apache.org projects.apache.org is a catalog of Apache projects that is generated from project supplied metadata.  This issue requests adding a metadata file to the log4net repository to allow log4net to appear in projects.apache.org alongside log4j and log4cxx.,"Fixed LOG4NET-92.
Added support for .NET Compact Framework 2.0.", MODIFY log4net.build MODIFY log4net.include MODIFY AnsiColorTerminalAppender.csAnsiColorTerminalAppender Append MODIFY ConsoleAppender.csConsoleAppender Append MODIFY XmlConfigurator.csXmlConfigurator Configure MODIFY LogException.cs MODIFY LoggingEvent.cs MODIFY XMLLayout.csXmlLayout FormatXml MODIFY NDC.cs MODIFY SystemInfo.csSystemInfo GetTypeFromString SystemInfo CreateArgumentOutOfRangeException SystemInfo NewGuid SystemInfo CreateCaseInsensitiveHashtable MODIFY ThreadContextStack.cs MODIFY ConversionNotSupportedException.cs MODIFY IPAddressConverter.csIPAddressConverter ConvertFrom
0,LOG4NET-96,4e262fa919e6a0eb44abe6eca92ae07d17f1cd1a,"Expose the Message, Exception, and ErrorCode properties of OnlyOnceErrorHandler. When an appender makes use of an OnlyOnceErrorHandler, allow the values that were written to the error handler to be inspected.","Fix for LOG4NET-2. Require that a Type parameter be passed to log4net's internal logging class when recording an internal message. Added LogReceived event to LogLog class to facilitate capturing internal messages during the the configuration process. Added ILoggerRepository.ConfigurationMessages property which holds a list of internal messages generated during the most recent configuration cycle. Changed signature on XmlConfigurator/BasicConfigurator.Configure methods to return internal messages recording during the configuration process. 

Added Visual Studio 2005 solution and project files.", MODIFY AdoNetAppender.csAdoNetAppender OnClose AdoNetAppender SendBuffer AdoNetAppender GetLogStatement AdoNetAppender SendBuffer AdoNetAppender InitializeDatabaseCommand AdoNetAppender InitializeDatabaseConnection MODIFY AnsiColorTerminalAppender.cs MODIFY AppenderSkeleton.csAppenderSkeleton ~AppenderSkeleton AppenderSkeleton lock MODIFY EventLogAppender.csEventLogAppender ActivateOptions MODIFY FileAppender.csFileAppender OpenFile FileAppender ActivateOptions MODIFY RollingFileAppender.csRollingFileAppender OpenFile RollingFileAppender ComputeCheckPeriod RollingFileAppender RollOverSize RollingFileAppender InitializeFromOneFile RollingFileAppender GetExistingFiles RollingFileAppender DetermineCurSizeRollBackups RollingFileAppender ExistingInit RollingFileAppender DeleteFile RollingFileAppender RollFile RollingFileAppender RollOverIfDateBoundaryCrossing MODIFY SmtpAppender.cs MODIFY TelnetAppender.csTelnetAppender SocketHandler OnConnect TelnetAppender ActivateOptions MODIFY TextWriterAppender.csTextWriterAppender lock MODIFY BasicConfigurator.csBasicConfigurator InternalConfigure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure BasicConfigurator Configure MODIFY SecurityContextProviderAttribute.csSecurityContextProviderAttribute Configure MODIFY XmlConfigurator.csXmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator InternalConfigureAndWatch XmlConfigurator InternalConfigure XmlConfigurator ConfigureAndWatch XmlConfigurator Configure XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnRenamed XmlConfigurator InternalConfigureFromXml XmlConfigurator InternalConfigure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler ConfigureAndWatchHandler_OnChanged XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator Configure XmlConfigurator ConfigureAndWatchHandler OnWatchedFileChange XmlConfigurator ConfigureFromXml XmlConfigurator Configure XmlConfigurator ConfigureAndWatch MODIFY XmlConfiguratorAttribute.csXmlConfiguratorAttribute ConfigureFromFile XmlConfiguratorAttribute Configure XmlConfiguratorAttribute ConfigureFromUri XmlConfiguratorAttribute ConfigureFromFile MODIFY CompactRepositorySelector.csCompactRepositorySelector CompactRepositorySelector CompactRepositorySelector CreateRepository MODIFY DefaultRepositorySelector.csDefaultRepositorySelector LoadPlugins DefaultRepositorySelector CreateRepository DefaultRepositorySelector ConfigureRepository DefaultRepositorySelector GetInfoForAssembly DefaultRepositorySelector DefaultRepositorySelector DefaultRepositorySelector LoadAliases DefaultRepositorySelector CreateRepository MODIFY Level.cs MODIFY LocationInfo.csLocationInfo LocationInfo MODIFY LoggerManager.csLoggerManager LoggerManager MODIFY LoggingEvent.csLoggingEvent if LoggingEvent if LoggingEvent if MODIFY DatePatternConverter.csDatePatternConverter Convert DatePatternConverter ActivateOptions MODIFY NamedPatternConverter.csNamedPatternConverter ActivateOptions MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY RendererMap.csRendererMap FindAndRender MODIFY RemoteLoggingServerPlugin.csRemoteLoggingServerPlugin Attach ADD ConfigurationChangedEventArgs.csConfigurationChangedEventArgs ConfigurationChangedEventArgs MODIFY Hierarchy.csHierarchy BasicRepositoryConfigure Hierarchy UpdateParents Hierarchy XmlRepositoryConfigure Hierarchy CollectAppenders Hierarchy Shutdown MODIFY Logger.csLogger Log Logger CallAppenders Logger Log Logger IsEnabledFor Logger Log MODIFY RootLogger.csRootLogger if MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter XmlHierarchyConfigurator ParseAppender XmlHierarchyConfigurator ParseChildrenOfLoggerElement XmlHierarchyConfigurator ParseRenderer XmlHierarchyConfigurator FindAppenderByReference XmlHierarchyConfigurator ParseLogger XmlHierarchyConfigurator CreateObjectFromXml XmlHierarchyConfigurator Configure XmlHierarchyConfigurator ConvertStringTo XmlHierarchyConfigurator ParseLevel MODIFY IBasicRepositoryConfigurator.cs MODIFY ILoggerRepository.cs MODIFY IXmlRepositoryConfigurator.cs MODIFY LoggerRepositorySkeleton.csLoggerRepositorySkeleton LoggerRepositorySkeleton LoggerRepositorySkeleton ResetConfiguration MODIFY AppenderAttachedImpl.csAppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl AppendLoopOnAppenders AppenderAttachedImpl CallAppend AppenderAttachedImpl RemoveAllAppenders MODIFY LogLog.csLogLog OnLogReceived LogLog Debug LogReceivedEventArgs LogReceivedEventArgs LogLog Error LogLog ToString LogLog Warn LogLog Error LogLog LogReceivedAdapter LogReceivedAdapter LogLog LogReceivedAdapter LogLog_LogReceived LogLog Error LogLog Warn LogLog Error LogLog Warn LogLog Debug LogLog LogLog LogLog LogReceivedAdapter Dispose LogLog Warn LogLog Debug LogLog Debug LogLog LogLog MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties GetProperties LogicalThreadContextProperties SetCallContextData MODIFY OnlyOnceErrorHandler.csOnlyOnceErrorHandler Error OnlyOnceErrorHandler Error OnlyOnceErrorHandler Error MODIFY OptionConverter.csOptionConverter ToFileSize OptionConverter ToBoolean OptionConverter InstantiateByClassName MODIFY PatternParser.csPatternParser ProcessConverter MODIFY DatePatternConverter.csDatePatternConverter ActivateOptions DatePatternConverter Convert MODIFY EnvironmentFolderPathPatternConverter.csEnvironmentFolderPathPatternConverter Convert MODIFY EnvironmentPatternConverter.csEnvironmentPatternConverter Convert MODIFY IdentityPatternConverter.csIdentityPatternConverter Convert MODIFY ProcessIdPatternConverter.csProcessIdPatternConverter Convert MODIFY RandomStringPatternConverter.csRandomStringPatternConverter ActivateOptions RandomStringPatternConverter Convert MODIFY UserNamePatternConverter.csUserNamePatternConverter Convert MODIFY UtcDatePatternConverter.csUtcDatePatternConverter Convert MODIFY SystemInfo.csSystemInfo GetTypeFromString SystemInfo SystemInfo SystemInfo GetAppSetting SystemInfo if MODIFY SystemStringFormat.csSystemStringFormat StringFormatError SystemStringFormat StringFormat MODIFY ThreadContextStacks.csThreadContextStacks if MODIFY ConverterRegistry.csConverterRegistry CreateConverterInstance ADD log4net.vs2005.csproj ADD log4net.vs2005.sln ADD ConfigurationMessages.csLogLogAppender Append ConfigurationMessages ConfigurationMessagesTest ConfigurationMessages rep_ConfigurationChanged LogLogAppender ActivateOptions ADD LogLogTest.csLogLogTest EmitInternalMessages TraceListenerCounter Write TraceListenerCounter WriteLine TraceListenerCounter Reset LogLogTest TraceListenerCounterTest LogLogTest LogReceivedAdapter ADD log4net.Tests.vs2005.csproj
1,LOG4NET-246,470413cc9fa5d8b1913190b98bbad83bb3f916ee,"Make it possible to choose whether or not to watch configuration files specified using the ""log4net.Config"" appsetting key  Currently (v1.2.10) it is possible to specify a configuration file for log4net by adding a key like this in the host application's configuration <appSettings> section:
<add key=""log4net.Config"" value=""Log.config"" />

This defaults to invoking XmlConfigurator.Configure() on the file specified (log4net/Core/DefaultRepositorySelector.cs,  line 725). This means the file is not watched for changes during program run time.

It would be nice if there was some way similar to the above <appSettings> key to specify whether log4net should watch the file or not.

I might propose that a new key is introduced in this fashion:
<add key=""log4net.Config.Watch"" value=""true"" />

This key would denote a bool value defaulting to false. The value would only be taken into consideration if the ""log4net.Config"" key is specified.",document log4net.Config and log4net.Config.Watch.  LOG4NET-246, MODIFY configuration.xml
1,LOG4NET-486,652101924faf9232b4a4c8388632619ad1447d9a,"Rolling File Appender with 'maxSizeRollBackups' and 'datePattern' does not detect existing logs initially Rolling file appender with 'maxSizeRollBackups' set to a positive number tries to initialise by looking at existing log files to continue the rolling sequence and set 'm_curSizeRollBackups' to its correct value but the base filename format is wrong.

In method GetWildcardPatternForFile with m_preserveLogFileNameExtension true it should construct a wildcard pattern but the 'baseFileName' is not enough to fully identify the log file when 'datePattern' is also specified.

For example: -

With log files such as: -

MyLogFile_2015-10-27.1.log
MyLogFile_2015-10-27.2.log

the pattern created is 'MyLogFile.*.log'

The date pattern is missing and as a result no log files are found and historical log files get overwritten rather than rolled over.

A quick fix I'm using is to remove the '.' from the literal "".*"" in the wildcard. This allows the OS to identify the log files. Later code makes a fuller check of the exact log file format and therefore this may be safe but I would think it needs more validation and testing to be sure this works under all circumstances.",LOG4NET-486: adapted Simon Clarks idea to correctly detect file names when maxSizeRollBackups and datePattern is used, MODIFY RollingFileAppender.csRollingFileAppender GetWildcardPatternForFile
0,LOG4NET-379,d68a3ab28f137926263ba0e502abd77b3caeb70b,"NullReferenceException in FileAppender when file is not filled. When I create a FileAppender without a filename and I call ActivateOptions(), a NullReferenceException is thrown. This is because the filename is first trimmed before the check whether the filename is null or not.",LOG4NET-341 fix location info to not contain a reference to StackFrame any more, MODIFY LocationInfo.csLocationInfo LocationInfo ADD MethodItem.csMethodItem MethodItem MethodItem MethodItem MethodItem GetMethodParameterNames MethodItem MethodItem MethodItem MethodItem ADD StackFrameItem.csStackFrameItem StackFrameItem MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate MODIFY StackTraceDetailPatternConverter.csStackTraceDetailPatternConverter GetMethodInformation StackTraceDetailPatternConverter GetMethodParameterNames StackTraceDetailPatternConverter GetMethodInformation MODIFY StackTracePatternConverter.csStackTracePatternConverter GetMethodInformation StackTracePatternConverter Convert StackTracePatternConverter GetMethodInformation MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj
1,LOG4NET-342,2f3bb2d6736c90407b942e053d63916e16dac66e,"Add a way to prevent silent failure I spent most of the day trying to find out why logging is not working on my dev system but not on test. There should be a way to force error reporting by throwing (possibly unhandled) exceptions. This could be done by adding a required flag to the appenders and another flag that requires a least one working appender.

I am not sure about a good way to implement this, I would just love it if my favourite tool to end silent failure could stop failing silently. 

",LOG4NET-342 added a FAQ entry that describes how to check if the repository was configured and how one can enumerate the configuration messages, MODIFY faq.xml
0,LOG4NET-317,3ccf8e704ee310c3e7c42665b17b15297fed0358,LogicalThreadContext sometimes doesn't follow CallContext's logical thread   See the discussion in http://logging.markmail.org/thread/q3bogptirf32g77r,a PaternLayout subclass that re-evaluates header and footer on each call.  Submitted by Roy Chastain.  LOG4NET-316, ADD DynamicPatternLayout.csDynamicPatternLayout DynamicPatternLayout DynamicPatternLayout DynamicPatternLayout MODIFY log4net.vs2008.csproj MODIFY log4net.vs2010.csproj ADD DynamicPatternLayoutTest.csDynamicPatternLayoutTest NewPatternLayout DynamicPatternLayoutTest NewPatternLayout MODIFY PatternLayoutTest.csPatternLayoutTest NamedPatternConverterWithPrecision2ShouldStripLessLeadingStuffIfPresent PatternLayoutTest TestStackTracePattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TestAddingCustomPattern PatternLayoutTest TestExceptionPattern PatternLayoutTest NamedPatternConverterWithPrecision1ShouldStripLeadingStuffIfPresent PatternLayoutTest NewPatternLayout PatternLayoutTest NamedPatternConverterWithoutPrecisionShouldReturnFullName PatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest NewPatternLayout MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-485,2ce45ddd39877f2955ce645ba01b9e9389b03fd6,"RollingFileAppender cannot be used by multiple process RollingFileAppender doesn't acquire lock when rolling takes place.
As a consequence running multiple instances of the same program rewrites the same log file instead of making a roll for everyone.

There is FileAppender.InterProcessLock but it only protects writes and not rolls.","LOG4NET-484: fix object disposed exception

This is a modified version of the patch supplied by nn1436401 at gmail dot com.", MODIFY FileAppender.csFileAppender LockingStream Seek FileAppender LockingStream LockingStream FileAppender MinimalLock OpenFile FileAppender LockingStream AssertLocked FileAppender ExclusiveLock AcquireLock FileAppender FileAppender FileAppender InterProcessLock ReleaseLock FileAppender ActivateOptions FileAppender InterProcessLock OpenFile FileAppender ConvertToFullPath FileAppender InterProcessLock AcquireLock FileAppender Reset FileAppender LockingStream BeginWrite FileAppender LockingModelBase CreateStream FileAppender LockingStream ReadByte FileAppender ExclusiveLock ReleaseLock FileAppender LockingModelBase CloseStream FileAppender Append FileAppender LockingStream Close FileAppender SafeOpenFile FileAppender LockingStream AcquireLock FileAppender WriteHeader FileAppender LockingStream Write FileAppender MinimalLock ReleaseLock FileAppender CloseWriter FileAppender LockingStream SetLength FileAppender PrepareWriter FileAppender LockingStream Flush FileAppender WriteFooter FileAppender LockingStream Dispose FileAppender SetQWForFiles FileAppender FileAppender FileAppender LockingStream ReleaseLock FileAppender InterProcessLock CloseFile FileAppender LockingStream LockStateException LockStateException FileAppender OpenFile FileAppender Append FileAppender LockingStream Read FileAppender ExclusiveLock CloseFile FileAppender MinimalLock AcquireLock FileAppender SetQWForFiles FileAppender FileAppender FileAppender MinimalLock CloseFile FileAppender LockingStream BeginRead FileAppender CloseFile FileAppender LockingStream EndWrite FileAppender ExclusiveLock OpenFile FileAppender LockingStream EndRead FileAppender LockingStream WriteByte MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestInterProcessLockRoll RollingFileAppenderTest CreateLogger RollingFileAppenderTest CreateLogger
0,LOG4NET-460,1d7b996059e82fca4723fb06b11007078a4a991a,"log4net.Repository.Hierarchy.Logger ignores overridden virtual properties log4net.Repository.Hierarchy.Logger declares Hierarchy property as virtual, however, when reading the value it uses the private field m_hierarchy, which is not the correct value (and probably null) if a derived class has overridden the Hierarchy property.
This leads to a NullReferenceException when invoking the IsEnabledFor method, which is used in the Log method.

Expected: overriding the Hierarchy property works
Actual: overriding the Hierarchy property leaves the private field m_hierarchy unset, which causes NullReferenceExceptions to be thrown

This issue also appears to apply for Level and m_level.  The EffectiveLevel property accesses the private m_level field instead of the virtual Level property, which may also lead to NullReferenceException.",LOG4NET-407 add a few unit tests for AsyncLogger, ADD AsyncAppenderTest.csAsyncAppenderTest WaitSomeTimeAndReturnLogWithLineFeedsStripped AsyncAppenderTest ShouldMaintainOrderOfEvents AsyncAppenderTest ShouldLogSingleEvent AsyncAppenderTest ResetRepository AsyncAppenderTest SetupRepository AsyncAppenderTest ShouldForwardBulkOfEvents MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj MODIFY log4net.Tests.vs2012.csproj
0,LOG4NET-310,9df9848f90c58c41f658b66c68178112eccc7c30,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-360,d32a83cc1b9093c4c0de77dd8fe3b06bf995be28,"EventLogAppender can corrupt the event log on Windows Vista and higher if the string is longer than 31839 bytes Issue: EventLogAppender can corrupt the event log on Windows Vista and higher if the string is longer than 31839 bytes.

The log4net EventLogAppender allows you to write up to 32000 bytes and there is a defect in the .NET Framework that will let you write that much data in Windows Vista and higher (which has a limit of 31839).

See the attachment that shows ""$exception	{""The event log file is corrupted""}	System.Exception {System.ComponentModel.Win32Exception}"" along with the stack after a call to EventLog.WriteEntry() under Windows 7 that used a message string that was 31,876 bytes long.

The issue has been reported to Microsoft as well: https://connect.microsoft.com/VisualStudio/feedback/details/770126/eventlog-writeentry-can-corrupt-the-event-log-because-of-invalid-argument-check-in-net-framework#tabs

The code below is my workaround for determining a max message length that will not corrupt the event log. I've also written our own custom EventLogAppender that is able to work around this issue.

private const int MaxEventLogMsgLength_PreVista = 32766;
private const int MaxEventLogMsgLength_VistaOrHigher = 31839;

/// <summary>
/// Gets the maximum allowable size of event log message for the current operating system.
/// </summary>
/// <returns></returns>
public static int GetMaxEventLogMessageSize()
{
	// http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx            
	// The 32766 documented max size is two bytes shy of 32K (I'm assuming 32766 may leave space for a two byte null
	// terminator of #0#0). The 32766 max length is what the .NET 4.0 source code checks for, but this is WRONG!...
	// strings with a length > 31839 on Windows Vista or higher can CORRUPT the event log! See:
	// System.Diagnostics.EventLogInternal.InternalWriteEvent() for the use of the 32766 max size.
	var maxEventMsgSize = MaxEventLogMsgLength_PreVista;

	// Windows Vista and higher
	if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6)
	{
		// See ReportEvent API: http://msdn.microsoft.com/en-us/library/aa363679(VS.85).aspx
		// ReportEvent's lpStrings parameter: ""A pointer to a buffer containing an array of null-terminated strings that are
		// merged into the message before Event Viewer displays the string to the user. This parameter must be a valid pointer
		// (or NULL), even if wNumStrings is zero. Each string is limited to 31,839 characters.""

		// Going beyond the size of 31839 will (at some point) corrupt the event log on Windows Vista or higher! It may succeed
		// for a while...but you will eventually run into the error: ""System.ComponentModel.Win32Exception : A device attached to
		// the system is not functioning"", and the event log will then be corrupt (I was able to corrupt an event log using a 
		// length of 31877 on Windows 7).

		// The max size for Windows Vista or higher is documented here: http://msdn.microsoft.com/en-us/library/xzwc042w(v=vs.100).aspx.
		// Going over this size may succeed a few times but the buffer will overrun and eventually corrupt the log (based on testing).
		// Log4net's own EventLogAppender will write up to 32000 bytes (0x7D00), which can corrupt the event log.

		// The maxEventMsgSize size is based on the max buffer size of the lpStrings parameter of the ReportEvent API.
		// The documented max size for EventLog.WriteEntry for Windows Vista and higher is 31839, but I'm leaving room for a
		// terminator of #0#0, as we cannot see the source of ReportEvent (though we could use an API monitor to examine the
		// buffer, given enough time).
		// TODO: Use an API monitor to examine how the ReportEvent API allocates a buffer for the event log message strings.
		const int terminatorLength = 2; // Safety for now.
		maxEventMsgSize = MaxEventLogMsgLength_VistaOrHigher - terminatorLength;
	}
	return maxEventMsgSize;
}		",LOG4NET-362 fix SystemInfo.AssemblyLocationInfo that raises an unhandled ArgumentException when the application is started via UNC path, MODIFY SystemInfo.csSystemInfo AssemblyLocationInfo
0,LOG4NET-117,73a4921de015d4262273055b04ea37206a224038,"Migrate web content generation of Maven 2.0 The other LS projects have been migrating to Maven 2.0 for documentation generation and deployment, packaging and, for the Java projects, build and dependency management.  Migrating log4net would complete the migration and would allow consistency between the web content of the various projects.

The initial commit overlays the existing source code struction with fragments of the Maven Standard Directory Layout,.  The following directories are added:

src/assembly - release packaging info, includes assembly.bin borrowed from another project.

src/changes - project change list.  Includes sample changes.xml.  log4cxx has an XSLT transform that can generate changes.xml from a downloaded JIRA issue list.  Used to generate change-report.html.

src/site - documentation source files, site.xml contains navigation and layout details for all generated pages
src/site/apt - web content in Maven's APT (almost plain text) format
src/site/resources - static content copied over without processing
src/site/xdoc - XDoc content, I copied the existing xdocs content here, but deleted a few no longer needed pages

The existing C# code in src should be relocated to src/main/cs and the build and project files appropriately changed.  For extra credit, the following relocations would bring the layout closer to a typical Maven layout:

change log4net.build to generate DLL's in target (maybe target\bin) instead of bin
svn rm docs
svn mv examples src/examples
svn mv extensions src/extensions
svn mv tests/src src/test/cs
svn mv tests/nant.build src/test/nant.build (modified to build test DLL's in target)
svn rm xdocs


pom.xml - Maven project descriptor, contains info used to generate much of the web content

After installing Maven 2.0.7 (which requires a JDK 1.4 or later).  Running mvn site will generate the web content in target/site/index.html.

mvn site-deploy should deploy the content to the logging/site/trunk/docs SVN for staging before going live on logging.apache.org.  The implementation of site-deploy uses Maven to generate the web content, invoke Nant to checkout the existing content, uses Maven's SCP deployment to copy the generated content over the existing content, and then invokes Nant to set svn:mime-type and finally commit the changes.  The deployment stalled on the commit when run from Maven, but if I ctrl+c'd the process and then manually ""svn commit"", the changes were processed.

I set up a Windows build environment but ran into problems with both NUnit and NDoc that I wasn't able to get around.  Setting up the SSHD to receive the ""uploaded"" web content before deployment was also less than ideal. It may be simpler to add mono, ndoc and nant to the VM used to build the other LS projects for web creation.  I have left stubs that should have published the API docs if I had been successful getting them from NDoc.

",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-388,2f3bb2d6736c90407b942e053d63916e16dac66e,"[PATCH] NotSupportedException is thrown in SystemInfo.AssemblyLocationInfo for dynamic assemblies For dynamic assemblies ""Location"" property shouldn't be used (http://msdn.microsoft.com/en-us/library/system.reflection.assembly.location.aspx).
Therefore in log4net.Util.SystemInfo we can test if assembly is dynamic and in result avoid exception.

Exception is very annoying and popular with NHibernate 3.3.3.4001.

I have added both fix and test.",LOG4NET-342 added a FAQ entry that describes how to check if the repository was configured and how one can enumerate the configuration messages, MODIFY faq.xml
0,LOG4NET-129,cf6e898f05a0d770abb50e493fecdb1fa2f3735f,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",explain when to use comma and when to use semicolon in documentation summary as well.  LOG4NET-128, MODIFY SmtpAppender.cs
0,LOG4NET-229,b9c24915eadbbb665778ef42524fd74d99eb969a,"Japanese characters get garbled with log4net.Layout.XmlLayoutSchemaLog4j  with XmlLayoutSchemaLog4j ,all (as far as I see) of Japanese characters are replaced with '?'
because log4net.Util.Transform.INVALIDCHARS regular expression is not correct.
this issue may be affect in other languages, as Chinese, Korean or like that.



http://issues.apache.org/jira/browse/LOG4NET-22 says that permitted chars are

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

, but regex for invalid characters are

private static Regex INVALIDCHARS=new Regex(@""[^\x09\x0A\x0D\x20-\xFF\u00FF-\u07FF\uE000-\uFFFD]"",RegexOptions.Compiled);

so 0x0800 ~ 0xD7FF are mistreated as invalid character.

and 0xD800 ~ 0xDFFF sould also be permitted because these characters are used to express 0x10000 ~ 0x10FFFF in UTF-16
(0xD800 ~ 0xDFFF in unicode are invalid, but in UTF-16 they are ok)

so regex INVALIDCHARS shold be ""[^\x09\x0A\x0D\x20-\u00FF\uFFFD]""
(above code is NOT TESTED)","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-437,24157c2a6a1ba70f80ff17fa4fdb9406cca28d09,"LogicalThreadContext data does not flow properly using Async and Await LogicalThreadContext doesn't work properly when using Async and Await. The current NDC call stack gets corrupted because the logical data context is not immutable. (See: http://blog.stephencleary.com/2013/04/implicit-async-context-asynclocal.html for the gory details). I've attached a Program.cs that demonstrates the issue. You will see with an unpatched log4net the thread context is corrupted compared to the proper implementation in MyStack and the console logger. An entry like:

LOG4NET Main 1 A 2 A: </MoreWork>
LOG4NET Main 1 A 2 A: </MoreWork>

is invalid and should not be possible in a properly working thread context.

I've attached a VERY naive patch that corrects the issue.","revert part of last patch for LOG4NET-376

actually the lock has two purposes (at least revision 1483378
indicates this):

* lock the table and the last formatted timestamp
* lock the writer instance

my last patch exposed the writer instance to thread-safety issues.", MODIFY AbsoluteTimeDateFormatter.csAbsoluteTimeDateFormatter FormatDate
0,LOG4NET-228,ca41de816d183c517c287b4743073f6f4feb3bc6,log4net.Util.HostName may throw System.Configuration.ConfigurationErrorsException in System.Net.Dns.GetHostName(). The exception should be ignored.  ,LOG4NET-335 fix InternalConfigureAndWatch to allow exactly one watch handler for every config file instead of one watch handler for every repository, MODIFY XmlConfigurator.csXmlConfigurator InternalConfigureAndWatch
0,LOG4NET-76,8400fecdd81394a86d4192889446d40678dcfb90,"TextWriterAdapter is not thread safe When logging using the XmlAppender, our company application can generate overlapping appender calls.  TextWriterAppender is not thread safe.

",Pass through characters in range #x100-#xd7ff inside XmlFormat.  LOG4NET-229, MODIFY Transform.cs ADD TransformTest.csTransformTest MaskXmlInvalidCharactersMasks0Char TransformTest MaskXmlInvalidCharactersAllowsJapaneseCharacters MODIFY log4net.Tests.vs2003.csproj MODIFY log4net.Tests.vs2008.csproj MODIFY log4net.Tests.vs2010.csproj
0,LOG4NET-441,cca252c3090b1e8091d61ffdd0e97835146db31a,"FAQ should have Q&A about initialization I set up a sample application to try out log4net but nothing happened. I had linked the assembly, called the methods and set up the config, but I neither called one of the configurators nor included one of the configurator attributes. While in retrospect it's stupid on my part, it also seems to be a common cry for help (search ""log4net not working""). The FAQ Q&A (under troubleshooting) could be something like:

Q: Why isn't log4net working at all?
A: You may have overlooked initialization code for log4net in your application. log4net can be initialized explicitly by calling one of the configurators (e.g. BasicConfigurator, DOMConfigurator or XmlConfigurator in the log4net.Config namespace, or implicitly by including one of the configurator attributes (e.g. [XmlConfiguratorAttribute], [DOMConfiguratorAttribute]) in the assembly where log4net is first used. See xxxx and yyyy for more information.",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
0,LOG4NET-228,a06839a335c7f13c865ee4bfb30982f67a2a63b9,log4net.Util.HostName may throw System.Configuration.ConfigurationErrorsException in System.Net.Dns.GetHostName(). The exception should be ignored.  ,LOG4NET-354 added a configuration option that allows to configure the subject and body encoding, MODIFY SmtpAppender.csSmtpAppender SendEmail
1,LOG4NET-242,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-375,56a2e146e21ff4737e1ff3ec308810e667873947,"typo / misspelling in log message src\Repository\Hierarchy\XmlHierarchyConfigurator.cs

line 348

LogLog.Debug(declaringType, ""reated Appender ["" + appenderName + ""]"");

the 'reated' should be 'Created'",LOG4NET-370 fix RemoteSyslogAppender to log only characters that are valid as of RFC http://www.ietf.org/rfc/rfc3164.txt, MODIFY RemoteSyslogAppender.csRemoteSyslogAppender Append
1,LOG4NET-21,ffeeca6277b0a7601d40d07344ae3c23d619829e,"RemotingAppender fails once NDC becomes empty If an NDC, or any form of Context.Stack, is set on the current thread and then becomes empty the RemotingAppender will fail. This is caused by the LoggingEvent Properties failing to serialise due to an unexpected null value in the properties map.

The issue is caused by the GetObjectData method of log4net.Util.ReadOnlyPropertiesDictionary not coping with null values.

Issue reported by Sam Smoot.",Fix for LOG4NET-21. Do not serialise key-value pairs where either the key or value is null, MODIFY ReadOnlyPropertiesDictionary.csReadOnlyPropertiesDictionary GetObjectData
1,LOG4NET-164,69e4789ebe481e8b138c971b42a94ec2f8a1099e,"using a named mutex for file appenders About logging to the same file from 2 or more instances of an application.
As opposed to a minimallock which makes it still possible for 2 application instances to interfere. Why not use a named mutex so that the logging will wait for the lock to be released from another instance.
",test new MutexLock and make it actually work.  LOG4NET-164, MODIFY FileAppender.csFileAppender LockingModelBase CreateStream FileAppender MutexLock CloseFile FileAppender MutexLock AcquireLock FileAppender MutexLock ReleaseLock MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestMutexLockUnlocks RollingFileAppenderTest TestMutexLockFails
0,LOG4NET-143,d78a5f8331dad60de277fecda43205412ccb464a,"Invalid Repository Config Uri composition from ""log4net.Config"" application setting In DefaultRepositorySelector class in method ConfigureRepository(Assembly assembly, ILoggerRepository repository) (DefaultRepositorySelector.cs, line 706) code perform config uri composition from applicationBaseDirectory path and specified in ""log4net.Config"" settings file name. Because SystemInfo.ApplicationBaseDirectory property return path not ended with slash '\' at line 706 during ""new Uri(applicationBaseDirectory)"" operation executed trimmed last folder, so config uri made invalid.",RemotingAppenderTest fails on very first test because of timing issues - at least on my machine.  Avoid problems by waiting a bit longer.  LOG4NET-301 and LOG4NET-265, MODIFY RemotingAppenderTest.csRemotingAppenderTest TestFullFix RemotingAppenderTest TestPartialFix RemotingAppenderTest TestRemotedMessage RemotingAppenderTest TestRemotedMessageNdcPushPop
0,LOG4NET-38,9df9848f90c58c41f658b66c68178112eccc7c30,"EventLogAppender: Add support for setting the Category on Event Log messages. The EventLog supports Categories for each message. A category is a short integer.

This could either be implemented as a fixed category value defined on the appender at config time, or as a value read from the LoggingEvent properties. The second option is more flexible as it allows the category to be specified for each message, a default category could still be specified in the appender configuration to allow for scenario 1 as well.","fix JIRA link in mvn site (detected by Ivan Habunek) and doap file, fix mailing list URL in doap file as well.  LOG4NET-241 and LOG4NET-117", MODIFY doap_log4net.rdf MODIFY pom.xml
0,LOG4NET-275,4c77e243badefb4253e9e7600d2eccc703b2f3fb,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",properly resolve relative URI of config file name given via log4net.Config appsetting.  LOG4NET-143, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
1,LOG4NET-378,78c420aea76cb9c7cded0d7205fc28fe67c840db,"Rolling log file is overwritten when application is restarted My server process uses log files which roll on date and file size (4MB). 
When I restart the server and there are already more than 1 log files for the current date, the 2nd segment gets overwritten and the 3rd, 4th, ... may get overwritten later, when #2 is filled up again.
I'm using version 1.2.11, which I can't select in the ""Affects Version"" combo box.

e.g. 
flotto.20130527.0.log = 4MB
flotto.20130527.1.log = 0MB (just got overwritten when the server was restarted)
flotto.20130527.2.log = 4MB (still contains original data but will be overwritten too as soon as #1 fills up)
flotto.20130527.3.log = 4MB (same as above)


The configuration in MyServer.exe.config looks like this:
<log4net>
    <appender name=""LogFileAppender"" type=""log4net.Appender.RollingFileAppender"">
      <file value=""flotto.log"" />
      <appendToFile value=""true"" />
      <encoding>utf-8</encoding>
      <preserveLogFileNameExtension value=""true""/>
      <rollingStyle value=""Composite"" />
      <staticLogFileName value=""false"" />
      <datePattern value="".yyyyMMdd""/>
      <countDirection value=""1""/>
      <maximumFileSize value=""4MB"" />
      <layout type=""log4net.Layout.PatternLayout"">
        <conversionPattern value=""%date [%-7thread] %-5level %-35logger - %message%newline"" />
      </layout>
    </appender>
    <root>
      <level value=""INFO"" />
      <appender-ref ref=""LogFileAppender""/>
    </root>
    <logger name=""Flotto.FlottoService"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.TcpServer"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.UdpBroadcastReceiver"">
      <!--<level value=""DEBUG""/>-->
    </logger>
    <logger name=""Flotto.GpsTrackerGprsServer"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.SmsAtHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpReceiver"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.BulksmsComHttpSender"">
      <level value=""DEBUG""/>
    </logger>
    <logger name=""Flotto.TrackerManager"">
      <!--<level value=""INFO""/>-->
    </logger>
  </log4net>
","LOG4NET-378 fixed a problem where rolled log files get overwritten when the application is restarted

The cause is that InitializeFromOneFile() does not succesfully detect the filenames.", MODIFY RollingFileAppender.csRollingFileAppender InitializeFromOneFile
1,LOG4NET-342,1e8b33af3276005577134150eef461704eb97c89,"Add a way to prevent silent failure I spent most of the day trying to find out why logging is not working on my dev system but not on test. There should be a way to force error reporting by throwing (possibly unhandled) exceptions. This could be done by adding a required flag to the appenders and another flag that requires a least one working appender.

I am not sure about a good way to implement this, I would just love it if my favourite tool to end silent failure could stop failing silently. 

",LOG4NET-342 fixed typos introduced with the prior commit, MODIFY faq.xml
0,LOG4NET-22,29ec33c991b1a22aeac4e67c77ebbe94b370f9d1,"XmlLayout allows output of invalid control characters XmlLayout allows output of invalid control characters.

Reported by Mike Blake-Knox with additional comments from Curt Arnold.


The XmlLayout encodes the character 0x1e as &#x1E; using the standard XML numeric character reference.

This character code is in a range which is not allowed to appear in XML 1.0 either as a un-encoded value or as a numeric character reference.

The valid character ranges are defined here in the XML recommendation:
http://www.w3.org/TR/REC-xml/#charsets

They are:

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

Numeric character references are not able to express characters from outside these ranges.

The System.Xml.XmlTextWriter does not verify if the unicode character is valid in XML, but it does encode it as a numeric character reference if it cannot be expressed in the output encoding.

To complicate matters further XML 1.1 does allow further, so called restricted characters, to be included in the output if they are encoded as numeric character references. These ranges are:

[#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]

See http://www.w3.org/TR/2004/REC-xml11-20040204/#charsets for details.","Fix for LOG4NET-43. Handles empty string properties by creating an empty string rather than attempting to construct one.

PR:
Obtained from:
Submitted by:
Reviewed by:", MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
0,LOG4NET-172,964fad01933ec029bbbff6631bfc7d559be75e6e,"Web Service Appender I have created a web service appender for a project I'm working on, and would like to contribute the code to log4net.",silly little timimg helper for LOG4NET-376, ADD AbsoluteTimeDateFormatterTiming.csAbsoluteTimeDateFormatterTiming Main AbsoluteTimeDateFormatterTiming SingleThread
0,LOG4NET-311,c9f73b57b77b27eba4d584accf6e5b7904d9a0cc,"MinimalLock and AppendToFile=false don't work together in trunk's FileAppender As part of adding the MutextLock with LOG4NET-164 the logic that open the file has been factored out into a method of the base class of all locking models.  The line that sets MinimalLock's m_append to true after opening the file has been lost on the way.

This is responsible for two of the unit tests errors reported in LOG4NET-301.",Make MemoryAppender thread-safe - at least as safe as we can without breaking BWC.  Patch by Steve Glendinning.  LOG4NET-167, MODIFY MemoryAppender.csMemoryAppender GetEvents MemoryAppender Append MemoryAppender Clear
0,LOG4NET-473,b0925ead3f58f007f280268c4dc0a97a8c750081,"Option for file extension in SmtpPickupDirAppender Especially on Windows file extensions are very handy, if you give the output files the `eml` extension you can just double click the file to open the mail in outlook.

I have added a `FileExtension` option to the `SmtpPickupDirAppender` that can be used to specify a file extension for the generated files.

Although a default value of `eml` would be nice I have preserved backwards compatibility of no file extension by default.",LOG4NET-461: fix for ancient .NET frameworks, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
0,LOG4NET-73,36b8c818193e23af8a29c104a31bf35554e982c1,"ADONetAppender.ActivateOptions() leaks database connection when called multiple times ADONetAppender.ActivateOptions() calls InitializeDatabaseConnection. This method does not check if the m_dbConnection is already initialised. If it is initialise then it will beleaked.

Update InitializeDatabaseConnection to check and close the connection if not null.","Fix for LOG4NET-72. Added overloaded Format methods for 1, 2, and 3 fixed arguments. This is a performance enhancement.", MODIFY LogImpl.csLogImpl ErrorFormat LogImpl WarnFormat LogImpl InfoFormat LogImpl ErrorFormat LogImpl DebugFormat LogImpl WarnFormat LogImpl ErrorFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl FatalFormat LogImpl DebugFormat LogImpl InfoFormat LogImpl WarnFormat LogImpl DebugFormat LogImpl InfoFormat MODIFY ILog.cs MODIFY StringFormatTest.csStringFormatTest TestThreadPropertiesPattern StringFormatTest TestLogFormatApi_Error StringFormatTest TestLogFormatApi_NoFatal StringFormatTest TestLogFormatApi_NoWarn StringFormatTest TestFormatString StringFormatTest TestLogFormatApi_NoInfo StringFormatTest TestLogFormatApi_NoDebug StringFormatTest TestLogFormatApi_Debug StringFormatTest TestLogFormatApi_Warn StringFormatTest TestLogFormatApi_Fatal StringFormatTest TestLogFormatApi_Info StringFormatTest TestLogFormatApi_NoError
0,LOG4NET-212,09f7293056e8abf36655537318384e9bd0ff5c9e,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.","ThreadContextTest and PatternLayoutTest influence each other via contexts, reset the contexts.  LOG4NET-301", MODIFY ThreadContextTest.csThreadContextTest TestThreadStackPattern2 ThreadContextTest TestThreadPropertiesPattern ThreadContextTest TestBackgroundThreadContextProperty ThreadContextTest TearDown ThreadContextTest TestThreadStackPattern ThreadContextTest TestThreadStackPatternNullVal2 ThreadContextTest ExecuteBackgroundThread ThreadContextTest TestThreadStackPatternNullVal MODIFY PatternLayoutTest.csPatternLayoutTest TestGlobalPropertiesPattern PatternLayoutTest TestThreadPropertiesPattern PatternLayoutTest TearDown MODIFY Utils.csUtils RemovePropertyFromAllContexts
0,LOG4NET-341,cb150d88f8da4a06f829d6c47d2222f48a84baad,"RemotingAppender Error I have a solution with a console application (.Net 4 and log4net v1.2.11) which implement the Remoting sink - server side. And a WPF or WindowsForms application - client side. The framework version on the client side doesn't matter. But the log4net version is different. On v1.2.10 anything is ok. When I reference the client with v1.2.11 throw this error: 

log4net:ERROR [RemotingAppender] ErrorCode: GenericFailure. Failed in SendBufferCallback
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileNotFoundException: Could not load file or assembly 'WpfTestApplication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Das System kann die angegebene Datei nicht finden.
   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection, Boolean suppressSecurityChecks)
   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)
   at System.Reflection.Assembly.Load(String assemblyString)
   at System.Runtime.Serialization.FormatterServices.LoadAssemblyFromString(String assemblyName)
   at System.Reflection.MemberInfoSerializationHolder..ctor(SerializationInfo info, StreamingContext context)
   --- End of inner exception stack trace ---

Server stack trace: 
   at System.RuntimeMethodHandle._SerializationInvoke(IRuntimeMethodInfo method, Object target, SignatureStruct& declaringTypeSig, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.CompleteISerializableObject(Object obj, SerializationInfo info, StreamingContext context)
   at System.Runtime.Serialization.ObjectManager.FixupSpecialObject(ObjectHolder holder)
   at System.Runtime.Serialization.ObjectManager.DoFixups()
   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)
   at System.Runtime.Remoting.Channels.CoreChannel.DeserializeBinaryRequestMessage(String objectUri, Stream inputStream, Boolean bStrictBinding, TypeFilterLevel securityLevel)
   at System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, IMessage& responseMsg, ITransportHeaders& responseHeaders, Stream& responseStream)

Exception rethrown at [0]: 
   at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)
   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)
   at log4net.Appender.RemotingAppender.IRemoteLoggingSink.LogEvents(LoggingEvent[] events)
   at log4net.Appender.RemotingAppender.SendBufferCallback(Object state)
",LOG4NET-379 fixed an avoidable NullReferenceException raised in the Fileappender ActivateOptions(), MODIFY FileAppender.csFileAppender ActivateOptions
1,LOG4NET-232,20170112593ac0a9bbdec0b9f4d97484ccfbac37,"Use ReaderWriterLockSlim instead of ReaderWriterLock. ReaderWriterLock should be replaced with ReaderWriterLockSlim according to Microsoft for performance and simplification reasons.

MSDN: http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlock.aspx

The .NET Framework has two reader-writer locks, ReaderWriterLockSlim and ReaderWriterLock. ReaderWriterLockSlim is recommended for all new development. ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified rules for recursion and for upgrading and downgrading lock state. ReaderWriterLockSlim avoids many cases of potential deadlock. In addition, the performance of ReaderWriterLockSlim is significantly better than ReaderWriterLock. ",LOG4NET-232 pulled in a modified version of Cosmin Onea's patch that allows log4net to use the ReaderWriterLockSlim in newer .NET versions, MODIFY ReaderWriterLock.csReaderWriterLock AcquireReaderLock ReaderWriterLock AcquireWriterLock ReaderWriterLock ReleaseReaderLock ReaderWriterLock ReleaseWriterLock ReaderWriterLock ReaderWriterLock
0,LOG4NET-72,fcd26b8ccf169f9ea4e7cc02a5ff567a2dc3d544,"Performance of ILog.xxxFormat methods The performance of the ILog.xxxFormat methods can be improved.

1) Add method overloads for common numbers of arguments:

void DebugFormat(string format, object arg0); 
void DebugFormat(string format, object arg0, object arg1); 
void DebugFormat(string format, object arg0, object arg1, object arg2); 

2) Delay formatting of the message until after the appenders filters have run.",Fix for LOG4NET-74. Made member variables protected., MODIFY MemoryAppender.cs
0,LOG4NET-485,4fc3185acbb8d2f734b1a6b578b33d924fa25c98,"RollingFileAppender cannot be used by multiple process RollingFileAppender doesn't acquire lock when rolling takes place.
As a consequence running multiple instances of the same program rewrites the same log file instead of making a roll for everyone.

There is FileAppender.InterProcessLock but it only protects writes and not rolls.","LOG4NET-461: refactored the AdoNetAppender

The AdoNetAppender suffered several issues. One was that a database command was
created and stored for the appenders lifetime. This caused trouble with some
database servers because those cleaned up cached prepared statements from time to
time and thus caused the appender to fail without the capability to recover. I
solved this problem by creating a database command whenever the buffer is sent,
well knowing that this costs a little more performance but is much more stable.

At this point I further took the chance to cleanup the source by replacing all
references to private member attributes with their public property mapping.
Further I added and fixed some of the documentation.

This overall cleanup is not yet complete, meaning that there is still a connection
that is being kept alive while it would be wiser to rely on proper connection
pooling and just open/close the database connection when sending the buffer. I
will raise this topic on the dev list.", MODIFY AdoNetAppender.csAdoNetAppender InitializeDatabaseConnection AdoNetAppender OnClose AdoNetAppender GetLogStatement AdoNetAppender InitializeDatabaseCommand AdoNetAppender AddParameter AdoNetAppender DiposeConnection AdoNetAppender SendBuffer AdoNetAppender CreateConnection AdoNetAppender ResolveConnectionType AdoNetAppender ResolveConnectionString AdoNetAppender AdoNetAppender AdoNetAppender ActivateOptions AdoNetAppenderParameter AdoNetAppenderParameter AdoNetAppenderParameter Prepare AdoNetAppenderParameter FormatValue AdoNetAppender SendBuffer AdoNetAppender DisposeCommand
0,LOG4NET-243,14a7664eb2b74cb20aa812e18e0ae70548b5d502,"broken link on http://logging.apache.org/log4net/release/example-apps.html the link in the text: ""The following examples are only available in the log4net release download, not on-line. To obtain the examples download one of the log4net releases.""  in the Overview section points to http://logging.apache.org/log4net/downloads.html 

whereas it should point to http://logging.apache.org/log4net/download.html . 

The current link yields a 404.","Make MinimalLock work again with appendToFile=false.  LOG4NET-311, fixes two tests mentioned in LOG4NET-301, regression introduced as part of LOG4NET-164", MODIFY FileAppender.csFileAppender MinimalLock AcquireLock
0,LOG4NET-215,8fa4d71a61c7e6e6d9e8d8adc47a22fceaf8bf37,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",Fix race-condition in XmlLayoutBase. LOG4NET-76, MODIFY XMLLayoutBase.csXmlLayoutBase Format
0,LOG4NET-212,73a4921de015d4262273055b04ea37206a224038,"Threading bug in the PatternConverter.cs Every once in a while I get the following exception:

   System.ArgumentOutOfRangeException: Index and length must refer to a location within the string.
    Parameter name: length
       at System.String.InternalSubStringWithChecks(Int32 startIndex, Int32 length, Boolean fAlwaysCopy)
       at System.Text.StringBuilder.ToString(Int32 startIndex, Int32 length)
       at log4net.Util.PatternConverter.Format(TextWriter writer, Object state) in xxx\Log4Net\src\Util\PatternConverter.cs:line 187
       at log4net.Layout.PatternLayout.Format(TextWriter writer, LoggingEvent loggingEvent) in xxx\Log4Net\src\Layout\PatternLayout.cs:line 1009
       at Nemmco.Common.Initialization.Internal.NemLoggingAppender.Execute(DateTime lastTrigger, DateTime currentTrigger) in xxxInitialization\Internal\InitializationLogging.cs:line 765
--snip--

From my own investigation it looks like the problem occurs because the shared string buffer (from the m_formatWriter.GetStringBuilder() call) may end up in a state where its size is adjusted differently on separate threads, causing one thread to over-estimate the available length.

I wonder if the re-use of a StringWriter / StringBuilder in this scenario actually outweighs the threading implications? The simplest fix would be to replace use of m_formatWriter with use of a local StringWriter / StringBuilder.",skip test that tries to set a system level environment variable if user lacks the permission to set it.  LOG4NET-301, MODIFY EnvironmentPatternConverterTest.csEnvironmentPatternConverterTest SystemLevelEnvironmentVariable
0,LOG4NET-112,e86390b79552a9b83c5f3bf48ab3300cad330b80,"Add support to the UdpAppender for IP v6 remote addresses The UdpClient object must be configured for either IP v4 or IP v6 when it is created. Once configured it cannot be used to send to remote addresses that are from a different network family.

Specifying the network family is not supported on NET 1.0, NETCF 1.0, SSCLI 1.0","Fixed LOG4NET-92.
Added support for .NET Compact Framework 2.0.", MODIFY log4net.build MODIFY log4net.include MODIFY AnsiColorTerminalAppender.csAnsiColorTerminalAppender Append MODIFY ConsoleAppender.csConsoleAppender Append MODIFY XmlConfigurator.csXmlConfigurator Configure MODIFY LogException.cs MODIFY LoggingEvent.cs MODIFY XMLLayout.csXmlLayout FormatXml MODIFY NDC.cs MODIFY SystemInfo.csSystemInfo GetTypeFromString SystemInfo CreateArgumentOutOfRangeException SystemInfo NewGuid SystemInfo CreateCaseInsensitiveHashtable MODIFY ThreadContextStack.cs MODIFY ConversionNotSupportedException.cs MODIFY IPAddressConverter.csIPAddressConverter ConvertFrom
0,LOG4NET-297,11937dbfde7b4765e3cf336c6f0ba3d5c5ad95ab,"AppenderSkeleton.RequiresLayout docs and implementation don't match In AppenderSkeleton.cs:

		/// <para>
		/// This default implementation always returns <c>true</c>.
		/// </para>
		virtual protected bool RequiresLayout
		{
			get { return false; }
		}
","Add reporting (namely RAT), populate team list in POM, remove contributors list from landing page, address some of the branding requirements.  LOG4NET-275", MODIFY pom.xml MODIFY site.xml MODIFY index.xml
0,LOG4NET-259,28a63b970d0a7d43f0adeaf7807fd943e35472d6,"Log4Net does not create a new tab in Chainsaw I believe the problem is in XmlLayoutSchemaLog4j, and that you need to change ""log4japp"" to ""application"".

According to the Chainsaw tutorial:
Chainsaw automatically looks inside each received LoggingEvent for a special Application property to determine which tab to route an event to. If it cannot find this property, it attempts to use a secondary property usually added via the SocketAppender or SocketHubAppender which identify the remote host of these events. If neither of these are found, Chainsaw routes events to a default ""Unknown"" tab.

Logging events generated internally by chainsaw include the following properties:
<log4j:properties>
    <log4j:data name=""application"" value=""Generator 1""/>
    <log4j:data name=""hostname"" value=""localhost""/>
    <log4j:data name=""log4jid"" value=""2""/>
    <log4j:data name=""some string"" value=""some valueGenerator 1""/>
</log4j:properties>

Logging events generated by XmlLayoutSchemaLog4j include the following properties:
<log4j:properties>
    <log4j:data name=""log4net:UserName"" value=""DOMAIN\username""/>
    <log4j:data name=""log4jid"" value=""281""/>
    <log4j:data name=""log4jmachinename"" value=""machineName""/>
    <log4j:data name=""log4net:HostName"" value=""machineName""/>
    <log4j:data name=""log4japp"" value=""Application.exe""/>
</log4j:properties>

See also: http://www.mail-archive.com/log4j-dev@jakarta.apache.org/msg05361.html

UPDATE: Documentation issue. See comments below.",LOG4NET-316 added a configuration example that explains the usage of DynamicPatternLayout, MODIFY config-examples.xml
0,LOG4NET-337,78c420aea76cb9c7cded0d7205fc28fe67c840db,"RollingFileAppender.RollOverIfDateBoundaryCrossing doesn't take PreserveLogFileNameExtension into account If a roll over is needed for crossing a date boundary since the last run, the m_scheduledFilename variable is set up based on the last write time of the log file. However, if PreserveLogFileNameExtension is set to true, this extension is NOT preserved, instead this option is ignored. This leads to wrong backup file names.As an example, if the log filename is file.log and the last write time of the file is 2012-04-30, the generated filename is file.log.2012-04-30 instead of file.2012-04-30.log as it should be.

Steps to reproduce: set up a RollingFileAppender, set it's PreserveLogFileNameExtension to true and have it RollOverIfDateBoundaryCrossing...","LOG4NET-378 fixed a problem where rolled log files get overwritten when the application is restarted

The cause is that InitializeFromOneFile() does not succesfully detect the filenames.", MODIFY RollingFileAppender.csRollingFileAppender InitializeFromOneFile
0,LOG4NET-275,7eabd638ae213d2a94b68f03e5b0f3b6a479565d,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",link to KEYS file on download page.  LOG4NET-242, MODIFY download.apt
0,LOG4NET-37,b118bfdd67abb332332b405321d9b2ce6e35405a,"Allow the RepositorySelector type to be specified using the AppSettings config Allow the RepositorySelector type to be sepecified using the AppSettings config.

The RepositorySelector is set by default to be DefaultRepositorySelector. This can be changed programatically by setting the LoggerManager.RepositorySelector property, however it cannot be set at runtime via the application configuration files.

Propose adding an AppSettings property 'log4net.RepositorySelector' that can be set to the type name of the repository selector to load. If this property is missing, or the type cannot be created the current default behaviour will continue.",Applied patch for LOG4NET-34 Allow xml config values to be set via XmlNodeType.CDATA or XmlNodeType.Text rather than just value=xxx, MODIFY XmlHierarchyConfigurator.csXmlHierarchyConfigurator SetParameter
0,LOG4NET-313,10eb59431deedcdaedc9d9f13684cf1ba9e67e03,"Document %stacktrace and %stacktracedetail There currently only is class-level documentation on %stacktrace and no documentation on %stacktracedetail outside of the StackTraceDetailPatternConverter class at all.  Need to update PatternLayout as well as the site.
","MutexLock => InterProcessLock.  Document it, discourage its use.  LOG4NET-164", MODIFY FileAppender.cs MODIFY config-examples.xml MODIFY faq.xml MODIFY RollingFileAppenderTest.csRollingFileAppenderTest TestMutexLockRecovers RollingFileAppenderTest TestInterProcessLockUnlocks RollingFileAppenderTest TestInterProcessLockRecovers RollingFileAppenderTest TestMutexLockFails RollingFileAppenderTest TestInterProcessLockFails RollingFileAppenderTest TestMutexLockUnlocks
0,LOG4NET-215,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Exception on Convert for return %class{1} name in function^

override protected void Convert(TextWriter writer, LoggingEvent loggingEvent)
		{
			string name = GetFullyQualifiedName(loggingEvent);
			if (m_precision <= 0)
			{
				writer.Write(name);
			}
			else 
			{
				int len = name.Length;

				// We subtract 1 from 'len' when assigning to 'end' to avoid out of
				// bounds exception in return name.Substring(end+1, len). This can happen if
				// precision is 1 and the logger name ends with a dot. 
				int end = len - 1;
				for(int i=m_precision; i>0; i--) 
				{
                    end = name.LastIndexOf('.', end - 1);
					if (end == -1)
					{
						writer.Write(name);
						return;
					}
				}
				writer.Write(name.Substring(end+1, len-end-1));
			}	  
		}

if ""string name = GetFullyQualifiedName(loggingEvent); "" return '?' (noname class-name) in line ""end = name.LastIndexOf('.', end - 1);"" exceptrion because end = 0...

",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-53,4d1b0c824d6c189b8da52c726d2b906c966a081c,"Allow repository properties to be set in the config file The LoggerRepository supports Properties. These are avaliable to the extensions, appenders, and plugins attached to the repository. While these properties can be set programatically it is not possible to set them through the config file.

We should allow properties to be set in the config file using the following schema:

<property>
  <key value=""PropertyName"" />
  <value value=""PropertyValue"" />
</property>","Fix for LOG4NET-50 Process.StartTime hangs on some systems
Changed to store the time the library is loaded rather than looking up the start time for the current process.", MODIFY SystemInfo.csSystemInfo if
0,LOG4NET-93,d5af0ed54223baf8d96d798f745d16680ee737c3,"Typos for node name in tutorial, excess quote, invalid XML log4net-1.2.10\examples\net\1.1\Tutorials\ConsoleApp\js\src

App.config

Line 42

<geader should be <header

Line  86

<commandText"" value="" should be <commandText value=""

Line 93

</param> should be </layout>


Suggest the build process should validate all example config files against the schema or DTD.

Patched file attached.

",Fix for LOG4NET-90. Correct typo (pParameterName should be parameterName) in xdoc documentation., MODIFY config-examples.xml
0,LOG4NET-310,b9c24915eadbbb665778ef42524fd74d99eb969a,"EventLogAppender's ActivateOptions throws SecurityException on Vista/Win2k3 and later when not run as administrator ActivateOptions uses EventLog.SourceExists which throws an exception of the source hasn't been found in any of the logs the user was allowed to read and there are others (in particular ""Security"") that the user is not allowed to access.

This is the reason of one of the unit test errors I reported in LOG4NET-301

Even if the code catches the exception and assumes the source doesn't exist this won't help as EventLog.CreateEventSource must not be called without administrator privileges either.

","Use mvn purely to generate the site, improve layout a bit, add footer as required by branding rules.  LOG4NET-117, LOG4NET-275", MODIFY pom.xml MODIFY download.apt ADD maven-base.css ADD site.vm MODIFY site.xml MODIFY building.xml MODIFY features.xml MODIFY framework-support.xml MODIFY configuration.xml MODIFY contexts.xml MODIFY introduction.xml MODIFY release-notes.xml DELETE project.xml DELETE site.vsl
0,LOG4NET-275,5d255ad5b9f2365ba2d4ffdadc740979ed8105f4,"Update site content for Apache Project Branding Requirements  All Apache projects are to bring their sites into conformance with the Apache Project Branding requirements (http://www.apache.org/foundation/marks/pmcs) by Q1 2011.
",ensure tests reset static LogLog configuration if they change it.  Fixes the two LogLog tests that are part of the ten failing tests in LOG4NET-301, MODIFY ConfigurationMessages.csConfigurationMessages ConfigurationMessagesTest MODIFY LogLogTest.csLogLogTest EmitInternalMessages
0,LOG4NET-388,1e8b33af3276005577134150eef461704eb97c89,"[PATCH] NotSupportedException is thrown in SystemInfo.AssemblyLocationInfo for dynamic assemblies For dynamic assemblies ""Location"" property shouldn't be used (http://msdn.microsoft.com/en-us/library/system.reflection.assembly.location.aspx).
Therefore in log4net.Util.SystemInfo we can test if assembly is dynamic and in result avoid exception.

Exception is very annoying and popular with NHibernate 3.3.3.4001.

I have added both fix and test.",LOG4NET-342 fixed typos introduced with the prior commit, MODIFY faq.xml
0,LOG4NET-484,4fc3185acbb8d2f734b1a6b578b33d924fa25c98,"System.ObjectDisposedException with FileAppender+InterProcessLock Configure lockingModel for InterProcessLock with RollingFileAppender.

{code:xml|title=app.config}
<?xml version=""1.0"" encoding=""utf-8""?>
<configuration>
	<configSections>
		<section name=""log4net"" type=""log4net.Config.Log4NetConfigurationSectionHandler, log4net"" />
	</configSections>
	<log4net>
		<appender name=""RollingFileAppender"" type=""log4net.Appender.RollingFileAppender"">
			<file type=""log4net.Util.PatternString"" value=""test.log"" />
			<encoding value=""utf-8"" />
			<appendToFile value=""true""/>
			<rollingStyle value=""Size""/>
			<maxSizeRollBackups value=""10""/>
			<maximumFileSize value=""1""/>
			<staticLogFileName value=""true""/>
			<layout type=""log4net.Layout.PatternLayout"">
				<conversionPattern value=""%d [%t] %-5p %c{2} - %m%n""/>
			</layout>
			<lockingModel type=""log4net.Appender.FileAppender+InterProcessLock"" />
		</appender>
		<root>
			<level value=""INFO""/>
			<appender-ref ref=""RollingFileAppender""/>
		</root>
	</log4net>
</configuration>
{code}

Make a log with roll :

{code:title=Program.cs}
using log4net;

namespace ConsoleApplication131
{
	class Program
	{
		static void Main(string[] args)
		{
			var log = LogManager.GetLogger(typeof(Program));
			log.Info(""A"");
			log.Info(""A"");
		}
	}
}
{code}

You get this one roll:

{noformat}
log4net:ERROR Failed to Close appender [RollingFileAppender]
System.ObjectDisposedException: Safe handle has been closed
   at System.Threading.WaitHandle.WaitOneNative(SafeWaitHandle waitHandle, UInt32 millisecondsTimeout, Boolean hasThreadAffinity, Boolean exitContext)
   at System.Threading.WaitHandle.WaitOne(Int64 timeout, Boolean exitContext)
   at log4net.Appender.FileAppender.InterProcessLock.AcquireLock()
   at log4net.Appender.FileAppender.LockingStream.AcquireLock()
   at log4net.Appender.FileAppender.WriteFooter()
   at log4net.Appender.TextWriterAppender.WriteFooterAndCloseWriter()
   at log4net.Appender.TextWriterAppender.Reset()
   at log4net.Appender.FileAppender.Reset()
   at log4net.Appender.TextWriterAppender.OnClose()
   at log4net.Appender.AppenderSkeleton.Close()
   at log4net.Util.AppenderAttachedImpl.RemoveAllAppenders()
{noformat}","LOG4NET-461: refactored the AdoNetAppender

The AdoNetAppender suffered several issues. One was that a database command was
created and stored for the appenders lifetime. This caused trouble with some
database servers because those cleaned up cached prepared statements from time to
time and thus caused the appender to fail without the capability to recover. I
solved this problem by creating a database command whenever the buffer is sent,
well knowing that this costs a little more performance but is much more stable.

At this point I further took the chance to cleanup the source by replacing all
references to private member attributes with their public property mapping.
Further I added and fixed some of the documentation.

This overall cleanup is not yet complete, meaning that there is still a connection
that is being kept alive while it would be wiser to rely on proper connection
pooling and just open/close the database connection when sending the buffer. I
will raise this topic on the dev list.", MODIFY AdoNetAppender.csAdoNetAppender InitializeDatabaseConnection AdoNetAppender OnClose AdoNetAppender GetLogStatement AdoNetAppender InitializeDatabaseCommand AdoNetAppender AddParameter AdoNetAppender DiposeConnection AdoNetAppender SendBuffer AdoNetAppender CreateConnection AdoNetAppender ResolveConnectionType AdoNetAppender ResolveConnectionString AdoNetAppender AdoNetAppender AdoNetAppender ActivateOptions AdoNetAppenderParameter AdoNetAppenderParameter AdoNetAppenderParameter Prepare AdoNetAppenderParameter FormatValue AdoNetAppender SendBuffer AdoNetAppender DisposeCommand
0,LOG4NET-148,28a63b970d0a7d43f0adeaf7807fd943e35472d6,"ThreadContext uses LocalDataStore to store ThreadSpecific data instead should be using  [ThreadStatic] variables. According to this article (http://blogs.msdn.com/junfeng/archive/2005/12/31/508423.aspx) and production issues encountered: using LocalDataStore is not a scalable approach for any web server that gets a significant amount of traffic.

The ThreadContext object should be modified to use [ThreadStatic] variables.

From the article:
The Whidbey RTM implementation of Thread.GetData/Thread.SetData has several scalability issues caused by global locks being taken. The appdomain-global lock taken in LocalDataStore.SetData is one of them. There is another global lock taken in ThreadNative::GetDomainLocalStore that is even worse since it is process-global.

The best workaround is to use [ThreadStatic] variables instead of Thread.GetData/Thread.SetData",LOG4NET-316 added a configuration example that explains the usage of DynamicPatternLayout, MODIFY config-examples.xml
0,LOG4NET-242,bde1c9f25df968b55bf8987bc2f6377462be7dc8,"Download page does not have link to KEYS file The download page http://logging.apache.org/log4net/download.html has a link describing why one should verify releases, but fails to provide a link to the relevant KEYS file

",fix links in examples page.  LOG4NET-243, ADD blockLocalOnlyLinks.js getElementsByClass BlockLocalOnlyLinks MODIFY example-apps.xml
0,LOG4NET-485,b0925ead3f58f007f280268c4dc0a97a8c750081,"RollingFileAppender cannot be used by multiple process RollingFileAppender doesn't acquire lock when rolling takes place.
As a consequence running multiple instances of the same program rewrites the same log file instead of making a roll for everyone.

There is FileAppender.InterProcessLock but it only protects writes and not rolls.",LOG4NET-461: fix for ancient .NET frameworks, MODIFY AdoNetAppender.csAdoNetAppender SendBuffer
0,LOG4NET-129,56357bef38685f4521b5a9743dad54770f6258a5,"EventLogAppender EventID parsing does not handle Active Properties properly The EventLogAppender supports setting the EventID of the Event being logged through Context Properties, as described here:
http://www.mail-archive.com/log4net-user@logging.apache.org/msg02396.html

However, since GlobalContext is inappropriate for storing the EventID (as it is likely to be specific for any given individual call to Log) and ThreadContext cannot be used reliably when running in the context of ASP.NET (since ASP.NET might switch the request between threads during execution, as outlined here: http://piers7.blogspot.com/2005/12/log4net-context-problems-with-aspnet.html ), it would be nice to be able to use an Active Property instead (which could, for instance, delegate calls for the EventID to data stored in HttpContext)

Unfortunately, this does not work, since the EventLogAppender assumes that the Context Property holding the EventID is either int or string. The relevant code is found in EventLogAppender.cs, in the override protected void Append(LoggingEvent loggingEvent) method:

if (eventIDPropertyObj is int)
{
	eventID = (int)eventIDPropertyObj;
}
else
{
	string eventIDPropertyString = eventIDPropertyObj as string;
}

Any Active Property object will end up as null through the ""as string"" call, and be ignored.

Suggested naive fix: If eventIDPropertyString is non-null and of other type than int or string, call ToString() on the object and TryParse as int. Or use whatever handling of Active Properties found elsewhere in log4net.",TryParse has been introduced in .NET 2.0.  LOG4NET-246, MODIFY DefaultRepositorySelector.csDefaultRepositorySelector ConfigureRepository
0,LOG4NET-22,252574f67d0bdabea33a7f9c73d1a941299f9e8a,"XmlLayout allows output of invalid control characters XmlLayout allows output of invalid control characters.

Reported by Mike Blake-Knox with additional comments from Curt Arnold.


The XmlLayout encodes the character 0x1e as &#x1E; using the standard XML numeric character reference.

This character code is in a range which is not allowed to appear in XML 1.0 either as a un-encoded value or as a numeric character reference.

The valid character ranges are defined here in the XML recommendation:
http://www.w3.org/TR/REC-xml/#charsets

They are:

#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

Numeric character references are not able to express characters from outside these ranges.

The System.Xml.XmlTextWriter does not verify if the unicode character is valid in XML, but it does encode it as a numeric character reference if it cannot be expressed in the output encoding.

To complicate matters further XML 1.1 does allow further, so called restricted characters, to be included in the output if they are encoded as numeric character references. These ranges are:

[#x1-#x8] | [#xB-#xC] | [#xE-#x1F] | [#x7F-#x84] | [#x86-#x9F]

See http://www.w3.org/TR/2004/REC-xml11-20040204/#charsets for details.",Fix LOG4NET-25.  RollingFileAppender fails if RollOverIfDateBoundaryCrossing required and current directory is not ApplicationBase directory., MODIFY RollingFileAppender.csRollingFileAppender ActivateOptions
0,LOG4NET-447,cca252c3090b1e8091d61ffdd0e97835146db31a,"MemoryAppender class is not thread safe The memory appender cannot be used safely in an application that uses more than one thread to interact with logging.

When using this code to retrieve and then clear events logged in the memory appender:
var events = memoryAppender.GetEvents();
memoryAppender.Clear();

The executing thread may be preempted between these two calls and additional logging events logged. These events are then cleared when the thread resumes execution - and are never seen/processed.

I expect to be be able to retrieve and clear the list of current events in one call that guarantees that no events are ever lost.",LOG4NET-455 make code compile on .NET 2.0, MODIFY LogicalThreadContextProperties.csLogicalThreadContextProperties Clear LogicalThreadContextProperties Remove MODIFY LogicalThreadContextStack.csLogicalThreadContextStack Push LogicalThreadContextStack AutoPopStackFrame Dispose LogicalThreadContextStack Pop
0,LOG4NET-441,446fb1f0ad43c9b4c18d9ff55b88ba6a1376bedf,"FAQ should have Q&A about initialization I set up a sample application to try out log4net but nothing happened. I had linked the assembly, called the methods and set up the config, but I neither called one of the configurators nor included one of the configurator attributes. While in retrospect it's stupid on my part, it also seems to be a common cry for help (search ""log4net not working""). The FAQ Q&A (under troubleshooting) could be something like:

Q: Why isn't log4net working at all?
A: You may have overlooked initialization code for log4net in your application. log4net can be initialized explicitly by calling one of the configurators (e.g. BasicConfigurator, DOMConfigurator or XmlConfigurator in the log4net.Config namespace, or implicitly by including one of the configurator attributes (e.g. [XmlConfiguratorAttribute], [DOMConfiguratorAttribute]) in the assembly where log4net is first used. See xxxx and yyyy for more information.",LOG4NET-456 create debugging symbols for release builds.  Patch by Gert Kello, MODIFY log4net.include
